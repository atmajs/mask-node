/*!
 * MaskJS v0.71.79
 * Part of the Atma.js Project
 * http://atmajs.com/
 *
 * MIT license
 * http://opensource.org/licenses/MIT
 *
 * (c) 2012, 2022 Atma.js and other contributors
 */
(function(factory) {
  factory = factory(global, module.exports);
  module.exports = factory;
})(function(global, exports) {
  'use strict';
  var document;
  var _ref_mask_projects_expression_src_ast = {};
  var _ref_mask_projects_expression_src_astNode_utils = {};
  var _ref_mask_projects_expression_src_ast_utils = {};
  var _ref_mask_projects_expression_src_class_AwaitableCtx = {};
  var _ref_mask_projects_expression_src_class_DeferStatement = {};
  var _ref_mask_projects_expression_src_class_DeferredExp = {};
  var _ref_mask_projects_expression_src_class_ObjectStream = {};
  var _ref_mask_projects_expression_src_class_PromisedStream = {};
  var _ref_mask_projects_expression_src_class_SubjectKind = {};
  var _ref_mask_projects_expression_src_class_SubjectStream = {};
  var _ref_mask_projects_expression_src_class_Subscription = {};
  var _ref_mask_projects_expression_src_eval = {};
  var _ref_mask_projects_expression_src_eval_deferred = {};
  var _ref_mask_projects_expression_src_eval_statements = {};
  var _ref_mask_projects_expression_src_exports = {};
  var _ref_mask_projects_expression_src_parser = {};
  var _ref_mask_projects_expression_src_scope_vars = {};
  var _ref_mask_projects_expression_src_util = {};
  var _ref_mask_projects_expression_src_vars_helper = {};
  var _ref_mask_projects_mask_binding_src_BindingProvider = {};
  var _ref_mask_projects_mask_binding_src_DomObjectTransport = {};
  var _ref_mask_projects_mask_binding_src_ValidatorProvider = {};
  var _ref_mask_projects_mask_binding_src_attributes_exports = {};
  var _ref_mask_projects_mask_binding_src_attributes_xClassToggle = {};
  var _ref_mask_projects_mask_binding_src_attributes_xToggle = {};
  var _ref_mask_projects_mask_binding_src_attributes_xxVisible = {};
  var _ref_mask_projects_mask_binding_src_binders_EventEmitterBinder = {};
  var _ref_mask_projects_mask_binding_src_binders_ExpressionBinder = {};
  var _ref_mask_projects_mask_binding_src_binders_IBinder = {};
  var _ref_mask_projects_mask_binding_src_binders_RxBinder = {};
  var _ref_mask_projects_mask_binding_src_binders_exports = {};
  var _ref_mask_projects_mask_binding_src_exports = {};
  var _ref_mask_projects_mask_binding_src_handlers_bind_node = {};
  var _ref_mask_projects_mask_binding_src_handlers_dualbind_node = {};
  var _ref_mask_projects_mask_binding_src_handlers_exports = {};
  var _ref_mask_projects_mask_binding_src_handlers_validate = {};
  var _ref_mask_projects_mask_binding_src_handlers_validate_group = {};
  var _ref_mask_projects_mask_binding_src_handlers_visible = {};
  var _ref_mask_projects_mask_binding_src_statements_base_ABindedStatement = {};
  var _ref_mask_projects_mask_binding_src_statements_base_ALoopBindedStatement = {};
  var _ref_mask_projects_mask_binding_src_statements_exports = {};
  var _ref_mask_projects_mask_binding_src_statements_if = {};
  var _ref_mask_projects_mask_binding_src_statements_listen = {};
  var _ref_mask_projects_mask_binding_src_statements_loop_each = {};
  var _ref_mask_projects_mask_binding_src_statements_loop_for = {};
  var _ref_mask_projects_mask_binding_src_statements_loop_utils = {};
  var _ref_mask_projects_mask_binding_src_statements_switch = {};
  var _ref_mask_projects_mask_binding_src_statements_utils = {};
  var _ref_mask_projects_mask_binding_src_statements_visible = {};
  var _ref_mask_projects_mask_binding_src_statements_with = {};
  var _ref_mask_projects_mask_binding_src_utilities_bind = {};
  var _ref_mask_projects_mask_binding_src_utilities_exports = {};
  var _ref_mask_projects_mask_binding_src_utils_compo = {};
  var _ref_mask_projects_mask_binding_src_utils_date = {};
  var _ref_mask_projects_mask_binding_src_utils_dom = {};
  var _ref_mask_projects_mask_binding_src_utils_expression = {};
  var _ref_mask_projects_mask_binding_src_utils_signal = {};
  var _ref_mask_projects_mask_compo_src_DomLite = {};
  var _ref_mask_projects_mask_compo_src_compo_Compo = {};
  var _ref_mask_projects_mask_compo_src_compo_CompoConfig = {};
  var _ref_mask_projects_mask_compo_src_compo_CompoProto = {};
  var _ref_mask_projects_mask_compo_src_compo_CompoStatics = {};
  var _ref_mask_projects_mask_compo_src_compo_CompoStaticsGc = {};
  var _ref_mask_projects_mask_compo_src_compo_Component = {};
  var _ref_mask_projects_mask_compo_src_compo_EventsDeco = {};
  var _ref_mask_projects_mask_compo_src_compo_anchor = {};
  var _ref_mask_projects_mask_compo_src_compo_async = {};
  var _ref_mask_projects_mask_compo_src_compo_children = {};
  var _ref_mask_projects_mask_compo_src_compo_events = {};
  var _ref_mask_projects_mask_compo_src_compo_find = {};
  var _ref_mask_projects_mask_compo_src_compo_pipes = {};
  var _ref_mask_projects_mask_compo_src_deco_component_decorators = {};
  var _ref_mask_projects_mask_compo_src_exports = {};
  var _ref_mask_projects_mask_compo_src_jcompo_jCompo = {};
  var _ref_mask_projects_mask_compo_src_keyboard_CombHandler = {};
  var _ref_mask_projects_mask_compo_src_keyboard_Handler = {};
  var _ref_mask_projects_mask_compo_src_keyboard_Hotkey = {};
  var _ref_mask_projects_mask_compo_src_keyboard_IComb = {};
  var _ref_mask_projects_mask_compo_src_keyboard_Key = {};
  var _ref_mask_projects_mask_compo_src_keyboard_KeySequance = {};
  var _ref_mask_projects_mask_compo_src_keyboard_const = {};
  var _ref_mask_projects_mask_compo_src_keyboard_filters = {};
  var _ref_mask_projects_mask_compo_src_keyboard_utils = {};
  var _ref_mask_projects_mask_compo_src_scope_vars = {};
  var _ref_mask_projects_mask_compo_src_signal_attributes = {};
  var _ref_mask_projects_mask_compo_src_signal_compound = {};
  var _ref_mask_projects_mask_compo_src_signal_exports = {};
  var _ref_mask_projects_mask_compo_src_signal_toggle = {};
  var _ref_mask_projects_mask_compo_src_signal_utils = {};
  var _ref_mask_projects_mask_compo_src_touch_FastClick = {};
  var _ref_mask_projects_mask_compo_src_touch_Handler = {};
  var _ref_mask_projects_mask_compo_src_touch_Touch = {};
  var _ref_mask_projects_mask_compo_src_tween_Tween = {};
  var _ref_mask_projects_mask_compo_src_tween_TweenManager = {};
  var _ref_mask_projects_mask_compo_src_util_ani = {};
  var _ref_mask_projects_mask_compo_src_util_compo = {};
  var _ref_mask_projects_mask_compo_src_util_compo_ceateExt = {};
  var _ref_mask_projects_mask_compo_src_util_compo_create = {};
  var _ref_mask_projects_mask_compo_src_util_compo_meta = {};
  var _ref_mask_projects_mask_compo_src_util_dfr = {};
  var _ref_mask_projects_mask_compo_src_util_dom = {};
  var _ref_mask_projects_mask_compo_src_util_domLib = {};
  var _ref_mask_projects_mask_compo_src_util_event = {};
  var _ref_mask_projects_mask_compo_src_util_selector = {};
  var _ref_mask_projects_mask_compo_src_util_traverse = {};
  var _ref_mask_projects_mask_j_src_jmask_jMask = {};
  var _ref_mask_projects_mask_j_src_jmask_manip_attr = {};
  var _ref_mask_projects_mask_j_src_jmask_manip_class = {};
  var _ref_mask_projects_mask_j_src_jmask_manip_dom = {};
  var _ref_mask_projects_mask_j_src_jmask_proto = {};
  var _ref_mask_projects_mask_j_src_jmask_traverse = {};
  var _ref_mask_projects_mask_j_src_scope_vars = {};
  var _ref_mask_projects_mask_j_src_util_array = {};
  var _ref_mask_projects_mask_j_src_util_selector = {};
  var _ref_mask_projects_mask_j_src_util_utils = {};
  var _ref_mask_projects_observer_src_Mutators = {};
  var _ref_mask_projects_observer_src_exports = {};
  var _ref_mask_projects_observer_src_expression = {};
  var _ref_mask_projects_observer_src_expression_subscribe = {};
  var _ref_mask_projects_observer_src_notify = {};
  var _ref_mask_projects_observer_src_obj_crumbs = {};
  var _ref_mask_projects_observer_src_obj_mutators = {};
  var _ref_mask_projects_observer_src_obj_observe = {};
  var _ref_mask_projects_observer_src_obj_props = {};
  var _ref_mask_projects_observer_src_utils_expr = {};
  var _ref_mask_projects_observer_src_utils_obj = {};
  var _ref_mask_src_api_config = {};
  var _ref_mask_src_arch_Module = {};
  var _ref_mask_src_builder_BuilderData = {};
  var _ref_mask_src_builder_ctx = {};
  var _ref_mask_src_builder_delegate_build_decorators = {};
  var _ref_mask_src_builder_delegate_build_many = {};
  var _ref_mask_src_builder_delegate_build_node = {};
  var _ref_mask_src_builder_delegate_build_textNode = {};
  var _ref_mask_src_builder_delegate_exports = {};
  var _ref_mask_src_builder_dom_build = {};
  var _ref_mask_src_builder_exports = {};
  var _ref_mask_src_builder_resume = {};
  var _ref_mask_src_builder_svg_build = {};
  var _ref_mask_src_builder_util = {};
  var _ref_mask_src_custom_attribute = {};
  var _ref_mask_src_custom_exports = {};
  var _ref_mask_src_custom_optimize = {};
  var _ref_mask_src_custom_repositories = {};
  var _ref_mask_src_custom_statement = {};
  var _ref_mask_src_custom_tag = {};
  var _ref_mask_src_custom_util = {};
  var _ref_mask_src_dom_ComponentNode = {};
  var _ref_mask_src_dom_DecoratorNode = {};
  var _ref_mask_src_dom_Fragment = {};
  var _ref_mask_src_dom_Node = {};
  var _ref_mask_src_dom_NodeType = {};
  var _ref_mask_src_dom_TextNode = {};
  var _ref_mask_src_dom_exports = {};
  var _ref_mask_src_dom_utils = {};
  var _ref_mask_src_feature_Define = {};
  var _ref_mask_src_feature_Di = {};
  var _ref_mask_src_feature_TreeWalker = {};
  var _ref_mask_src_feature_decorators_exports = {};
  var _ref_mask_src_feature_decorators_store = {};
  var _ref_mask_src_feature_decorators_utils = {};
  var _ref_mask_src_feature_decorators_wrappers = {};
  var _ref_mask_src_feature_merge = {};
  var _ref_mask_src_feature_methods_define_methods = {};
  var _ref_mask_src_feature_methods_exports = {};
  var _ref_mask_src_feature_methods_handlers = {};
  var _ref_mask_src_feature_methods_node_method = {};
  var _ref_mask_src_feature_methods_parsers = {};
  var _ref_mask_src_feature_methods_scope_refs = {};
  var _ref_mask_src_feature_methods_source_url = {};
  var _ref_mask_src_feature_methods_utils = {};
  var _ref_mask_src_feature_modules_Import_Import = {};
  var _ref_mask_src_feature_modules_Import_ImportData = {};
  var _ref_mask_src_feature_modules_Import_ImportHtml = {};
  var _ref_mask_src_feature_modules_Import_ImportMask = {};
  var _ref_mask_src_feature_modules_Import_ImportScript = {};
  var _ref_mask_src_feature_modules_Import_ImportStyle = {};
  var _ref_mask_src_feature_modules_Import_ImportText = {};
  var _ref_mask_src_feature_modules_Import_ImportTypes = {};
  var _ref_mask_src_feature_modules_Import_exports = {};
  var _ref_mask_src_feature_modules_Import_utils = {};
  var _ref_mask_src_feature_modules_Module_Module = {};
  var _ref_mask_src_feature_modules_Module_ModuleData = {};
  var _ref_mask_src_feature_modules_Module_ModuleHtml = {};
  var _ref_mask_src_feature_modules_Module_ModuleMask = {};
  var _ref_mask_src_feature_modules_Module_ModuleScript = {};
  var _ref_mask_src_feature_modules_Module_ModuleStyle = {};
  var _ref_mask_src_feature_modules_Module_ModuleText = {};
  var _ref_mask_src_feature_modules_Module_ModuleTypes = {};
  var _ref_mask_src_feature_modules_Module_exports = {};
  var _ref_mask_src_feature_modules_Module_register = {};
  var _ref_mask_src_feature_modules_Module_utils = {};
  var _ref_mask_src_feature_modules_Opts = {};
  var _ref_mask_src_feature_modules_await = {};
  var _ref_mask_src_feature_modules_cache = {};
  var _ref_mask_src_feature_modules_class_Endpoint = {};
  var _ref_mask_src_feature_modules_components = {};
  var _ref_mask_src_feature_modules_config = {};
  var _ref_mask_src_feature_modules_exports = {};
  var _ref_mask_src_feature_modules_loaders = {};
  var _ref_mask_src_feature_modules_tools_build = {};
  var _ref_mask_src_feature_modules_tools_dependencies = {};
  var _ref_mask_src_feature_modules_types = {};
  var _ref_mask_src_feature_modules_utils = {};
  var _ref_mask_src_feature_modules_utils_mask_module = {};
  var _ref_mask_src_feature_optimize = {};
  var _ref_mask_src_feature_run = {};
  var _ref_mask_src_handlers_content = {};
  var _ref_mask_src_handlers_debug = {};
  var _ref_mask_src_handlers_define = {};
  var _ref_mask_src_handlers_exports = {};
  var _ref_mask_src_handlers_html = {};
  var _ref_mask_src_handlers_svg = {};
  var _ref_mask_src_handlers_template = {};
  var _ref_mask_src_handlers_var = {};
  var _ref_mask_src_mask = {};
  var _ref_mask_src_parser_Templates = {};
  var _ref_mask_src_parser_config = {};
  var _ref_mask_src_parser_const = {};
  var _ref_mask_src_parser_cursor = {};
  var _ref_mask_src_parser_exports = {};
  var _ref_mask_src_parser_html_parser = {};
  var _ref_mask_src_parser_interpolation = {};
  var _ref_mask_src_parser_mask_parser = {};
  var _ref_mask_src_parser_mask_partials_attributes = {};
  var _ref_mask_src_parser_mask_partials_literal = {};
  var _ref_mask_src_parser_mask_stringify = {};
  var _ref_mask_src_parser_object_ObjectLexer = {};
  var _ref_mask_src_parser_object_compile = {};
  var _ref_mask_src_parser_object_consume = {};
  var _ref_mask_src_parser_object_tokens = {};
  var _ref_mask_src_parser_parsers_content = {};
  var _ref_mask_src_parser_parsers_content_style = {};
  var _ref_mask_src_parser_parsers_define = {};
  var _ref_mask_src_parser_parsers_import = {};
  var _ref_mask_src_parser_parsers_var = {};
  var _ref_mask_src_parser_utils = {};
  var _ref_mask_src_renderer_exports = {};
  var _ref_mask_src_scope_vars = {};
  var _ref_mask_src_statements_each = {};
  var _ref_mask_src_statements_exports = {};
  var _ref_mask_src_statements_for = {};
  var _ref_mask_src_statements_if = {};
  var _ref_mask_src_statements_repeat = {};
  var _ref_mask_src_statements_switch = {};
  var _ref_mask_src_statements_utils = {};
  var _ref_mask_src_statements_visible = {};
  var _ref_mask_src_statements_with = {};
  var _ref_mask_src_util_attr = {};
  var _ref_mask_src_util_compo = {};
  var _ref_mask_src_util_css = {};
  var _ref_mask_src_util_dom = {};
  var _ref_mask_src_util_env_class = {};
  var _ref_mask_src_util_listeners = {};
  var _ref_mask_src_util_object = {};
  var _ref_mask_src_util_path = {};
  var _ref_mask_src_util_reporters = {};
  var _ref_mask_src_util_resource_file = {};
  var _ref_mask_src_util_resource_transports_json = {};
  var _ref_mask_src_util_resource_transports_script_node = {};
  var _ref_mask_src_util_resource_transports_style_node = {};
  var _ref_mask_src_util_resource_transports_xhr_base = {};
  var _ref_mask_src_util_resource_transports_xhr_node = {};
  var _ref_utils_src_arr = {};
  var _ref_utils_src_class = {};
  var _ref_utils_src_class_Dfr = {};
  var _ref_utils_src_class_EventEmitter = {};
  var _ref_utils_src_coll = {};
  var _ref_utils_src_error = {};
  var _ref_utils_src_fn = {};
  var _ref_utils_src_is = {};
  var _ref_utils_src_obj = {};
  var _ref_utils_src_refs = {};
  var _ref_utils_src_str = {};
  var _src_builder_ctx_CtxModels = {};
  var _src_builder_ctx_CtxModules = {};
  var _src_builder_delegate_build_component = {};
  var _src_builder_delegate_builder_buildFactory = {};
  var _src_builder_delegate_exports = {};
  var _src_builder_dom_build = {};
  var _src_cache_CompoCacheCollection = {};
  var _src_cache_exports = {};
  var _src_const = {};
  var _src_handlers_document = {};
  var _src_helper_Meta = {};
  var _src_helper_MetaParser = {};
  var _src_helper_MetaSerializer = {};
  var _src_html_dom_CommentNode = {};
  var _src_html_dom_ComponentNode = {};
  var _src_html_dom_DoctypeNodeInn = {};
  var _src_html_dom_DocumentFragmentInn = {};
  var _src_html_dom_DomB = {};
  var _src_html_dom_ElementNodeInn = {};
  var _src_html_dom_NodeBase = {};
  var _src_html_dom_ScriptElementInn = {};
  var _src_html_dom_StyleElementInn = {};
  var _src_html_dom_TextNodeInn = {};
  var _src_html_dom_UtilNodeInn = {};
  var _src_html_dom_documentInn = {};
  var _src_html_dom_exports = {};
  var _src_html_dom_jq_classList = {};
  var _src_html_dom_jq_util_selector = {};
  var _src_html_dom_tags = {};
  var _src_html_dom_util_HtmlStream = {};
  var _src_html_dom_util_html = {};
  var _src_html_dom_util_node = {};
  var _src_html_dom_util_stringify = {};
  var _src_html_dom_util_traverse = {};
  var _src_html_page_exports = {};
  var _src_html_page_scripts = {};
  var _src_html_page_transform = {};
  var _src_mock_attr_handler = {};
  var _src_mock_mock = {};
  var _src_mock_tag_handler = {};
  var _src_mock_util_handler = {};
  var _src_renderer_exports = {};
  var _src_util_compo = {};
  var _src_util_ctx = {};
  var _src_util_loaders = {};
  var _src_util_meta = {};
  var _src_util_node = {};
  // source ./ModuleSimplified.js
  var _ref_utils_src_refs;
  (function() {
    var exports = null != _ref_utils_src_refs ? _ref_utils_src_refs : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.setDocument = exports._document = exports._global = exports._Object_defineProperty = exports._Object_getOwnProp = exports._Object_hasOwnProp = exports._Array_indexOf = exports._Array_splice = exports._Array_slice = void 0;
    exports._Array_slice = Array.prototype.slice;
    exports._Array_splice = Array.prototype.splice;
    exports._Array_indexOf = Array.prototype.indexOf;
    exports._Object_hasOwnProp = Object.hasOwnProperty;
    exports._Object_getOwnProp = Object.getOwnPropertyDescriptor;
    exports._Object_defineProperty = Object.defineProperty;
    exports._global = 'undefined' !== typeof global ? global : window;
    exports._document = 'undefined' !== typeof window && null != window.document ? window.document : null;
    function setDocument(doc) {
      exports._document = doc;
    }
    exports.setDocument = setDocument;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_refs === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_refs) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_refs, module.exports);
    } else {
      _ref_utils_src_refs = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_utils_src_fn;
  (function() {
    var exports = null != _ref_utils_src_fn ? _ref_utils_src_fn : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.fn_createByPattern = exports.fn_doNothing = exports.fn_apply = exports.fn_proxy = void 0;
    function fn_proxy(fn, ctx) {
      return function() {
        var imax = arguments.length, args = new Array(imax), i = 0;
        for (;i < imax; i++) {
          args[i] = arguments[i];
        }
        return fn_apply(fn, ctx, args);
      };
    }
    exports.fn_proxy = fn_proxy;
    function fn_apply(fn, ctx, args) {
      var l = args.length;
      if (0 === l) {
        return fn.call(ctx);
      }
      if (1 === l) {
        return fn.call(ctx, args[0]);
      }
      if (2 === l) {
        return fn.call(ctx, args[0], args[1]);
      }
      if (3 === l) {
        return fn.call(ctx, args[0], args[1], args[2]);
      }
      if (4 === l) {
        return fn.call(ctx, args[0], args[1], args[2], args[3]);
      }
      return fn.apply(ctx, args);
    }
    exports.fn_apply = fn_apply;
    function fn_doNothing() {
      return false;
    }
    exports.fn_doNothing = fn_doNothing;
    function fn_createByPattern(definitions, ctx) {
      var imax = definitions.length;
      return function() {
        var def, l = arguments.length, i = -1;
        outer: while (++i < imax) {
          def = definitions[i];
          if (def.pattern.length !== l) {
            continue;
          }
          var j = -1;
          while (++j < l) {
            var fn = def.pattern[j];
            var val = arguments[j];
            if (false === fn(val)) {
              continue outer;
            }
          }
          return def.handler.apply(ctx, arguments);
        }
        console.error('InvalidArgumentException for a function', definitions, arguments);
        return null;
      };
    }
    exports.fn_createByPattern = fn_createByPattern;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_fn === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_fn) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_fn, module.exports);
    } else {
      _ref_utils_src_fn = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_utils_src_is;
  (function() {
    var exports = null != _ref_utils_src_is ? _ref_utils_src_is : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.is_NODE = exports.is_DOM = exports.is_Observable = exports.is_PromiseLike = exports.is_Date = exports.is_rawObject = exports.is_notEmptyString = exports.is_String = exports.is_ArrayLike = exports.is_Array = exports.is_Object = exports.is_Function = void 0;
    function is_Function(x) {
      return 'function' === typeof x;
    }
    exports.is_Function = is_Function;
    function is_Object(x) {
      return null != x && 'object' === typeof x;
    }
    exports.is_Object = is_Object;
    function is_Array(arr) {
      return null != arr && 'object' === typeof arr && 'number' === typeof arr.length && 'function' === typeof arr.slice;
    }
    exports.is_Array = is_Array;
    exports.is_ArrayLike = is_Array;
    function is_String(x) {
      return 'string' === typeof x;
    }
    exports.is_String = is_String;
    function is_notEmptyString(x) {
      return 'string' === typeof x && '' !== x;
    }
    exports.is_notEmptyString = is_notEmptyString;
    function is_rawObject(x) {
      return null != x && 'object' === typeof x && (x.constructor === Object || null == x.constructor);
    }
    exports.is_rawObject = is_rawObject;
    function is_Date(x) {
      if (null == x || 'object' !== typeof x) {
        return false;
      }
      if (null != x.getFullYear && false === isNaN(x)) {
        return true;
      }
      return false;
    }
    exports.is_Date = is_Date;
    function is_PromiseLike(x) {
      return null != x && 'object' === typeof x && 'function' === typeof x.then;
    }
    exports.is_PromiseLike = is_PromiseLike;
    function is_Observable(x) {
      return null != x && 'object' === typeof x && 'function' === typeof x.subscribe;
    }
    exports.is_Observable = is_Observable;
    exports.is_DOM = 'undefined' !== typeof window && null != window.navigator;
    exports.is_NODE = !exports.is_DOM;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_is === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_is) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_is, module.exports);
    } else {
      _ref_utils_src_is = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_utils_src_class_Dfr;
  (function() {
    var exports = null != _ref_utils_src_class_Dfr ? _ref_utils_src_class_Dfr : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.class_Dfr = void 0;
    var fn_1 = _ref_utils_src_fn;
    var is_1 = _ref_utils_src_is;
    var refs_1 = _ref_utils_src_refs;
    var class_Dfr = /** @class */ function() {
      function class_Dfr() {
        this._isAsync = true;
        this._done = null;
        this._fail = null;
        this._always = null;
        this._resolved = null;
        this._rejected = null;
      }
      class_Dfr.prototype.defer = function() {
        this._rejected = null;
        this._resolved = null;
        return this;
      };
      class_Dfr.prototype.isResolved = function() {
        return null != this._resolved;
      };
      class_Dfr.prototype.isRejected = function() {
        return null != this._rejected;
      };
      class_Dfr.prototype.isBusy = function() {
        return null == this._resolved && null == this._rejected;
      };
      class_Dfr.prototype.resolve = function(value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        var done = this._done, always = this._always;
        this._resolved = arguments;
        dfr_clearListeners(this);
        arr_callOnce(done, this, arguments);
        arr_callOnce(always, this, [ this ]);
        return this;
      };
      class_Dfr.prototype.reject = function(error) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        var fail = this._fail, always = this._always;
        this._rejected = arguments;
        dfr_clearListeners(this);
        arr_callOnce(fail, this, arguments);
        arr_callOnce(always, this, [ this ]);
        return this;
      };
      class_Dfr.prototype.then = function(filterSuccess, filterError) {
        var dfr = new class_Dfr();
        this.done(delegate(dfr, 'resolve', filterSuccess)).fail(delegate(dfr, 'reject', filterError));
        return dfr;
      };
      class_Dfr.prototype.done = function(callback) {
        if (null != this._rejected) {
          return this;
        }
        return dfr_bind(this, this._resolved, this._done || (this._done = []), callback);
      };
      class_Dfr.prototype.fail = function(callback) {
        if (null != this._resolved) {
          return this;
        }
        return dfr_bind(this, this._rejected, this._fail || (this._fail = []), callback);
      };
      class_Dfr.prototype.always = function(callback) {
        return dfr_bind(this, this._rejected || this._resolved, this._always || (this._always = []), callback);
      };
      class_Dfr.prototype.pipe = function(mix /* ..methods */) {
        var dfr;
        if ('function' === typeof mix) {
          dfr = new class_Dfr();
          var done_ = mix, fail_ = arguments.length > 1 ? arguments[1] : null;
          this.done(delegate(dfr, 'resolve', done_)).fail(delegate(dfr, 'reject', fail_));
          return dfr;
        }
        dfr = mix;
        var x, imax = arguments.length, done = 1 === imax, fail = 1 === imax, i = 0;
        while (++i < imax) {
          x = arguments[i];
          switch (x) {
           case 'done':
            done = true;
            break;

           case 'fail':
            fail = true;
            break;

           default:
            console.error('Unsupported pipe channel', arguments[i]);
            break;
          }
        }
        done && this.done(delegate(dfr, 'resolve'));
        fail && this.fail(delegate(dfr, 'reject'));
        return this;
      };
      class_Dfr.prototype.pipeCallback = function() {
        var self = this;
        return function(error) {
          if (null != error) {
            self.reject(error);
            return;
          }
          error = refs_1._Array_slice.call(arguments, 1);
          (0, fn_1.fn_apply)(self.resolve, self, error);
        };
      };
      class_Dfr.prototype.resolveDelegate = function() {
        return (0, fn_1.fn_proxy)(this.resolve, this);
      };
      class_Dfr.prototype.rejectDelegate = function() {
        return (0, fn_1.fn_proxy)(this.reject, this);
      };
      class_Dfr.prototype.catch = function(cb) {
        return this.fail(cb);
      };
      class_Dfr.prototype.finally = function(cb) {
        return this.always(cb);
      };
      class_Dfr.resolve = function(a, b, c) {
        var dfr = new class_Dfr();
        return dfr.resolve.apply(dfr, refs_1._Array_slice.call(arguments));
      };
      class_Dfr.reject = function(error) {
        var dfr = new class_Dfr();
        return dfr.reject(error);
      };
      class_Dfr.run = function(fn, ctx) {
        var dfr = new class_Dfr();
        if (null == ctx) {
          ctx = dfr;
        }
        fn.call(ctx, (0, fn_1.fn_proxy)(dfr.resolve, ctx), (0, fn_1.fn_proxy)(dfr.reject, dfr), dfr);
        return dfr;
      };
      class_Dfr.all = function(promises) {
        var dfr = new class_Dfr(), arr = new Array(promises.length), wait = promises.length, error = null;
        if (0 === wait) {
          return dfr.resolve(arr);
        }
        function tick(index) {
          if (null != error) {
            return;
          }
          var args = refs_1._Array_slice.call(arguments, 1);
          arr.splice.apply(arr, [ index, 0 ].concat(args));
          if (0 === --wait) {
            dfr.resolve(arr);
          }
        }
        function onReject(err) {
          dfr.reject(error = err);
        }
        var imax = promises.length, i = -1;
        while (++i < imax) {
          var x = promises[i];
          if (null == x || null == x.then) {
            tick(i);
            continue;
          }
          x.then(tick.bind(null, i), onReject);
        }
        return dfr;
      };
      return class_Dfr;
    }();
    exports.class_Dfr = class_Dfr;
    // PRIVATE
    function delegate(dfr, name, fn) {
      return function() {
        if (null != fn) {
          var override = fn.apply(this, arguments);
          if (null != override && override !== dfr) {
            if (isDeferred(override)) {
              override.then(delegate(dfr, 'resolve'), delegate(dfr, 'reject'));
              return;
            }
            dfr[name](override);
            return;
          }
        }
        dfr[name].apply(dfr, arguments);
      };
    }
    function dfr_bind(dfr, arguments_, listeners, callback) {
      if (null == callback) {
        return dfr;
      }
      if (null != arguments_) {
        (0, fn_1.fn_apply)(callback, dfr, arguments_);
      } else {
        listeners.push(callback);
      }
      return dfr;
    }
    function dfr_clearListeners(dfr) {
      dfr._done = null;
      dfr._fail = null;
      dfr._always = null;
    }
    function arr_callOnce(arr, ctx, args) {
      if (null == arr) {
        return;
      }
      var fn, imax = arr.length, i = -1;
      while (++i < imax) {
        fn = arr[i];
        if (fn) {
          (0, fn_1.fn_apply)(fn, ctx, args);
        }
      }
      arr.length = 0;
    }
    function isDeferred(x) {
      return null != x && 'object' === typeof x && (0, is_1.is_Function)(x.then);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_class_Dfr === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_class_Dfr) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_class_Dfr, module.exports);
    } else {
      _ref_utils_src_class_Dfr = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_utils_src_obj;
  (function() {
    // ensure AMD is not active for the model, so that any UMD exports as commonjs
    var define = null;
    var exports = null != _ref_utils_src_obj ? _ref_utils_src_obj : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.obj_extendDescriptorsDefaults = exports.obj_extendDescriptors = exports.obj_clean = exports.obj_defaults = exports.obj_create = exports._Object_create = exports.obj_toFastProps = exports.obj_extendMany = exports.obj_extendPropertiesDefaults = exports.obj_extendProperties = exports.obj_extendDefaults = exports.obj_extend = exports.obj_defineProperty = exports.obj_hasProperty = exports.obj_setProperty = exports.obj_getProperty = exports.obj_copyProperty = void 0;
    var is_1 = _ref_utils_src_is;
    var refs_1 = _ref_utils_src_refs;
    var getDescriptor = Object.getOwnPropertyDescriptor;
    var defineDescriptor = Object.defineProperty;
    var obj_copyProperty = null == getDescriptor ? function(target, source, key) {
      return target[key] = source[key];
    } : function(target, source, key) {
      var descr = getDescriptor(source, key);
      if (null == descr) {
        target[key] = source[key];
        return;
      }
      if (void 0 !== descr.value) {
        target[key] = descr.value;
        return;
      }
      defineDescriptor(target, key, descr);
    };
    exports.obj_copyProperty = obj_copyProperty;
    function obj_getProperty(obj_, path) {
      if (null == obj_) {
        return null;
      }
      if (-1 === path.indexOf('.')) {
        return obj_[path];
      }
      var obj = obj_, chain = path.split('.'), imax = chain.length, i = -1;
      while (null != obj && ++i < imax) {
        var key = chain[i];
        if (63 /*?*/ === key.charCodeAt(key.length - 1)) {
          key = key.slice(0, -1);
        }
        obj = obj[key];
      }
      return obj;
    }
    exports.obj_getProperty = obj_getProperty;
    function obj_setProperty(obj_, path, val) {
      if (-1 === path.indexOf('.')) {
        obj_[path] = val;
        return;
      }
      var key, obj = obj_, chain = path.split('.'), imax = chain.length - 1, i = -1;
      while (++i < imax) {
        key = chain[i];
        if (63 /*?*/ === key.charCodeAt(key.length - 1)) {
          key = key.slice(0, -1);
        }
        var x = obj[key];
        if (null == x) {
          x = obj[key] = {};
        }
        obj = x;
      }
      obj[chain[i]] = val;
    }
    exports.obj_setProperty = obj_setProperty;
    function obj_hasProperty(obj, path) {
      obj = obj_getProperty(obj, path);
      return void 0 !== obj;
    }
    exports.obj_hasProperty = obj_hasProperty;
    function obj_defineProperty(obj, path, dscr) {
      var key, x = obj, chain = path.split('.'), imax = chain.length - 1, i = -1;
      while (++i < imax) {
        key = chain[i];
        if (null == x[key]) {
          x[key] = {};
        }
        x = x[key];
      }
      key = chain[imax];
      if (refs_1._Object_defineProperty) {
        if (void 0 === dscr.writable) {
          dscr.writable = true;
        }
        if (void 0 === dscr.configurable) {
          dscr.configurable = true;
        }
        if (void 0 === dscr.enumerable) {
          dscr.enumerable = true;
        }
        (0, refs_1._Object_defineProperty)(x, key, dscr);
        return;
      }
      x[key] = void 0 === dscr.value ? dscr.value : dscr.get && dscr.get();
    }
    exports.obj_defineProperty = obj_defineProperty;
    function obj_extend(a, b) {
      if (null == b) {
        return a || {};
      }
      if (null == a) {
        return (0, exports.obj_create)(b);
      }
      for (var key in b) {
        a[key] = b[key];
      }
      return a;
    }
    exports.obj_extend = obj_extend;
    function obj_extendDefaults(a, b) {
      if (null == b) {
        return a || {};
      }
      if (null == a) {
        return (0, exports.obj_create)(b);
      }
      for (var key in b) {
        if (null == a[key]) {
          a[key] = b[key];
          continue;
        }
        if ('toString' === key && a[key] === Object.prototype.toString) {
          a[key] = b[key];
        }
      }
      return a;
    }
    exports.obj_extendDefaults = obj_extendDefaults;
    var extendPropertiesFactory = function(overwriteProps) {
      if (null == refs_1._Object_getOwnProp) {
        return overwriteProps ? obj_extend : obj_extendDefaults;
      }
      return function(a, b) {
        if (null == b) {
          return a || {};
        }
        if (null == a) {
          return (0, exports.obj_create)(b);
        }
        var key, descr, ownDescr;
        for (key in b) {
          descr = (0, refs_1._Object_getOwnProp)(b, key);
          if (null == descr) {
            continue;
          }
          if (true !== overwriteProps) {
            ownDescr = (0, refs_1._Object_getOwnProp)(a, key);
            if (null != ownDescr) {
              continue;
            }
          }
          if (descr.hasOwnProperty('value')) {
            a[key] = descr.value;
            continue;
          }
          (0, refs_1._Object_defineProperty)(a, key, descr);
        }
        return a;
      };
    };
    exports.obj_extendProperties = extendPropertiesFactory(true);
    exports.obj_extendPropertiesDefaults = extendPropertiesFactory(false);
    function obj_extendMany(a, arg1, arg2, arg3, arg4, arg5, arg6) {
      var imax = arguments.length, i = 1;
      for (;i < imax; i++) {
        a = obj_extend(a, arguments[i]);
      }
      return a;
    }
    exports.obj_extendMany = obj_extendMany;
    function obj_toFastProps(obj) {
      /*jshint -W027*/
      function F() {}
      F.prototype = obj;
      new F();
      return;
    }
    exports.obj_toFastProps = obj_toFastProps;
    exports._Object_create = Object.create || function(x) {
      var Ctor = function() {};
      Ctor.prototype = x;
      return new Ctor();
    };
    exports.obj_create = exports._Object_create;
    function obj_defaults(target, defaults) {
      for (var key in defaults) {
        if (null == target[key]) {
          target[key] = defaults[key];
        }
      }
      return target;
    }
    exports.obj_defaults = obj_defaults;
    /**
 * Remove all NULL properties, optionally also all falsy-ies
 */
    function obj_clean(json, opts) {
      var _a;
      if (void 0 === opts) {
        opts = {
          removePrivate: false,
          skipProperties: null,
          removeEmptyArrays: false,
          removeFalsy: false
        };
      }
      if (null == json || 'object' !== typeof json) {
        return json;
      }
      if ((0, is_1.is_ArrayLike)(json)) {
        var arr = json;
        var i = 0;
        var notNullIndex = -1;
        for (;i < arr.length; i++) {
          var val = arr[i];
          if (null != val) {
            notNullIndex = i;
          }
          obj_clean(val, opts);
        }
        // clean all last nullable values
        if (notNullIndex + 1 < arr.length) {
          arr.splice(notNullIndex + 1);
        }
        return json;
      }
      if ((0, is_1.is_Object)(json)) {
        for (var key in json) {
          if (null != opts.skipProperties && key in opts.skipProperties) {
            delete json[key];
            continue;
          }
          if (null != opts.ignoreProperties && key in opts.ignoreProperties) {
            continue;
          }
          if (true === opts.removePrivate && '_' === key[0]) {
            delete json[key];
            continue;
          }
          val = json[key];
          if (null === (_a = opts.shouldRemove) || void 0 === _a ? void 0 : _a.call(opts, key, val)) {
            delete json[key];
            continue;
          }
          if (isDefault(val, opts)) {
            if (null != opts.strictProperties && key in opts.strictProperties && null != val) {
              continue;
            }
            delete json[key];
            continue;
          }
          if (false !== opts.deep) {
            obj_clean(val, opts);
          }
          if (opts.removeEmptyArrays && (0, is_1.is_ArrayLike)(val) && 0 === val.length) {
            delete json[key];
          }
        }
        return json;
      }
      return json;
    }
    exports.obj_clean = obj_clean;
    function isDefault(x, opts) {
      if (null == x) {
        return true;
      }
      if (opts.removeFalsy && ('' === x || false === x)) {
        return true;
      }
      if (opts.removeEmptyArrays && (0, is_1.is_ArrayLike)(x) && 0 === x.length) {
        return true;
      }
      return false;
    }
    var obj_extendDescriptors;
    exports.obj_extendDescriptors = obj_extendDescriptors;
    var obj_extendDescriptorsDefaults;
    exports.obj_extendDescriptorsDefaults = obj_extendDescriptorsDefaults;
    (function() {
      if (null == getDescriptor) {
        exports.obj_extendDescriptors = obj_extendDescriptors = obj_extend;
        exports.obj_extendDescriptorsDefaults = obj_extendDescriptorsDefaults = obj_defaults;
        return;
      }
      exports.obj_extendDescriptors = obj_extendDescriptors = function(target, source) {
        return _extendDescriptors(target, source, false);
      };
      exports.obj_extendDescriptorsDefaults = obj_extendDescriptorsDefaults = function(target, source) {
        return _extendDescriptors(target, source, true);
      };
      function _extendDescriptors(target, source, defaultsOnly) {
        if (null == target) {
          return {};
        }
        if (null == source) {
          return source;
        }
        var descr, key;
        for (key in source) {
          if (true === defaultsOnly && null != target[key]) {
            continue;
          }
          descr = getDescriptor(source, key);
          if (null == descr) {
            obj_extendDescriptors(target, source['__proto__']);
            continue;
          }
          if (void 0 !== descr.value) {
            target[key] = descr.value;
            continue;
          }
          defineDescriptor(target, key, descr);
        }
        return target;
      }
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_obj === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_obj) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_obj, module.exports);
    } else {
      _ref_utils_src_obj = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_utils_src_str;
  (function() {
    var exports = null != _ref_utils_src_str ? _ref_utils_src_str : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.str_dedent = exports.str_format = void 0;
    var is_1 = _ref_utils_src_is;
    function str_format(str_, a, b, c, d) {
      var imax = arguments.length;
      var i = 0;
      while (++i < imax) {
        var x = arguments[i];
        if ((0, is_1.is_Object)(x) && x.toJSON) {
          x = x.toJSON();
        }
        str_ = str_.replace(rgxNum(i - 1), String(x));
      }
      return str_;
    }
    exports.str_format = str_format;
    function str_dedent(str) {
      var rgx = /^[\t ]*\S/gm, match = rgx.exec(str), count = -1;
      while (null != match) {
        var x = match[0].length;
        if (-1 === count || x < count) {
          count = x;
        }
        match = rgx.exec(str);
      }
      if (--count < 1) {
        return str;
      }
      var replacer = new RegExp('^[\\t ]{1,' + count + '}', 'gm');
      return str.replace(replacer, '').replace(/^[\t ]*\r?\n/, '').replace(/\r?\n[\t ]*$/, '');
    }
    exports.str_dedent = str_dedent;
    var rgxNum;
    (function() {
      rgxNum = function(num) {
        return cache_[num] || (cache_[num] = new RegExp('\\{' + num + '\\}', 'g'));
      };
      var cache_ = {};
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_str === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_str) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_str, module.exports);
    } else {
      _ref_utils_src_str = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_utils_src_class;
  (function() {
    var exports = null != _ref_utils_src_class ? _ref_utils_src_class : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.class_createEx = exports.class_create = void 0;
    var obj_1 = _ref_utils_src_obj;
    var refs_1 = _ref_utils_src_refs;
    /**
 * create([...Base], Proto)
 * Base: Function | Object
 * Proto: Object {
 *    constructor: ?Function
 *    ...
 */
    exports.class_create = createClassFactory(obj_1.obj_extendDefaults);
    // with property accessor functions support
    exports.class_createEx = createClassFactory(obj_1.obj_extendPropertiesDefaults);
    function createClassFactory(extendDefaultsFn) {
      return function(a, b, c, d, e, f, g, h) {
        var args = refs_1._Array_slice.call(arguments), Proto = args.pop();
        if (null == Proto) {
          Proto = {};
        }
        var Ctor;
        if (Proto.hasOwnProperty('constructor')) {
          Ctor = Proto.constructor;
          if (void 0 === Ctor.prototype) {
            var es6Method = Ctor;
            Ctor = function ClassCtor() {
              var imax = arguments.length, i = -1, args = new Array(imax);
              while (++i < imax) {
                args[i] = arguments[i];
              }
              return es6Method.apply(this, args);
            };
          }
        } else {
          Ctor = function ClassCtor() {};
        }
        var BaseCtor, x, i = args.length;
        while (--i > -1) {
          x = args[i];
          if ('function' === typeof x) {
            BaseCtor = wrapFn(x, BaseCtor);
            x = x.prototype;
          }
          extendDefaultsFn(Proto, x);
        }
        return createClass(wrapFn(BaseCtor, Ctor), Proto);
      };
    }
    function createClass(Ctor, Proto) {
      Proto.constructor = Ctor;
      Ctor.prototype = Proto;
      return Ctor;
    }
    function wrapFn(fnA, fnB) {
      if (null == fnA) {
        return fnB;
      }
      if (null == fnB) {
        return fnA;
      }
      return function() {
        var args = refs_1._Array_slice.call(arguments);
        var x = fnA.apply(this, args);
        if (void 0 !== x) {
          return x;
        }
        return fnB.apply(this, args);
      };
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_class === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_class) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_class, module.exports);
    } else {
      _ref_utils_src_class = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_utils_src_error;
  (function() {
    var exports = null != _ref_utils_src_error ? _ref_utils_src_error : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.error_formatCursor = exports.error_cursor = exports.error_formatSource = exports.error_createClass = void 0;
    var obj_1 = _ref_utils_src_obj;
    var str_1 = _ref_utils_src_str;
    function error_createClass(name, Proto, stackSliceFrom) {
      stackSliceFrom = _createCtor(Proto, stackSliceFrom);
      stackSliceFrom.prototype = new Error();
      Proto.constructor = Error;
      Proto.name = name;
      (0, obj_1.obj_extend)(stackSliceFrom.prototype, Proto);
      return stackSliceFrom;
    }
    exports.error_createClass = error_createClass;
    function error_formatSource(source, index, filename) {
      var source = error_cursor(source, index), index = source[0], lineNum = source[1], source = source[2], str = '';
      if (null != filename) {
        str += (0, str_1.str_format)(' at {0}:{1}:{2}\n', filename, lineNum, source);
      }
      return str + error_formatCursor(index, lineNum, source);
    }
    exports.error_formatSource = error_formatSource;
    /**
 * @returns [ lines, lineNum, rowNum ]
 */
    function error_cursor(str, index) {
      var lines = str.substring(0, index).split('\n'), line = lines.length, index = index + 1 - lines.slice(0, line - 1).join('\n').length;
      if (line > 1) {
        // remove trailing newline
        --index;
      }
      return [ str.split('\n'), line, index ];
    }
    exports.error_cursor = error_cursor;
    function error_formatCursor(lines, lineNum, rowNum) {
      var BEFORE = 3, AFTER = 2, i = lineNum - BEFORE, imax = i + BEFORE + AFTER, str = '';
      if (i < 0) {
        i = 0;
      }
      if (imax > lines.length) {
        imax = lines.length;
      }
      var lineNumber, lineNumberLength = String(imax).length;
      for (;i < imax; i++) {
        if (str) {
          str += '\n';
        }
        lineNumber = ensureLength(i + 1, lineNumberLength);
        str += lineNumber + '|' + lines[i];
        if (i + 1 === lineNum) {
          str += '\n' + repeat(' ', lineNumberLength + 1);
          str += lines[i].substring(0, rowNum - 1).replace(/[^\s]/g, ' ');
          str += '^';
        }
      }
      return str;
    }
    exports.error_formatCursor = error_formatCursor;
    function ensureLength(num, count) {
      var str = String(num);
      while (str.length < count) {
        str += ' ';
      }
      return str;
    }
    function repeat(char_, count) {
      var str = '';
      while (--count > -1) {
        str += char_;
      }
      return str;
    }
    function _createCtor(Proto, stackFrom) {
      var Ctor = Proto.hasOwnProperty('constructor') ? Proto.constructor : null;
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        (0, obj_1.obj_defineProperty)(this, 'stack', {
          value: _prepairStack(stackFrom || 3)
        });
        (0, obj_1.obj_defineProperty)(this, 'message', {
          value: str_1.str_format.apply(this, arguments)
        });
        if (null != Ctor) {
          Ctor.apply(this, arguments);
        }
      };
    }
    function _prepairStack(sliceFrom) {
      var stack = new Error().stack;
      return null == stack ? null : stack.split('\n').slice(sliceFrom).join('\n');
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_error === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_error) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_error, module.exports);
    } else {
      _ref_utils_src_error = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_utils_src_class_EventEmitter;
  (function() {
    var exports = null != _ref_utils_src_class_EventEmitter ? _ref_utils_src_class_EventEmitter : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
      if (pack || 2 === arguments.length) {
        for (var ar, i = 0, l = from.length; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) {
              ar = Array.prototype.slice.call(from, 0, i);
            }
            ar[i] = from[i];
          }
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.class_EventEmitter = void 0;
    var fn_1 = _ref_utils_src_fn;
    var refs_1 = _ref_utils_src_refs;
    var class_EventEmitter = /** @class */ function() {
      function class_EventEmitter() {
        this._listeners = {};
      }
      class_EventEmitter.prototype.on = function(event, fn) {
        if (null != fn) {
          (this._listeners[event] || (this._listeners[event] = [])).push(fn);
        }
        return this;
      };
      class_EventEmitter.prototype.once = function(event, fn) {
        if (null != fn) {
          fn._once = true;
          (this._listeners[event] || (this._listeners[event] = [])).push(fn);
        }
        return this;
      };
      class_EventEmitter.prototype.pipe = function(event) {
        var args, that = this;
        return function() {
          args = refs_1._Array_slice.call(arguments);
          args.unshift(event);
          (0, fn_1.fn_apply)(that.trigger, that, args);
        };
      };
      class_EventEmitter.prototype.emit = function(event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        var fns = this._listeners[event];
        if (null == fns) {
          return this;
        }
        for (var i = 0; i < fns.length; i++) {
          var fn = fns[i];
          (0, fn_1.fn_apply)(fn, this, args);
          if (fn !== fns[i]) {
            // the callback has removed itself
            i--;
            continue;
          }
          if (true === fn._once) {
            fns.splice(i, 1);
            i--;
          }
        }
        return this;
      };
      class_EventEmitter.prototype.trigger = function(event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        return this.emit.apply(this, __spreadArray([ event ], args, false));
      };
      class_EventEmitter.prototype.off = function(event, fn) {
        var listeners = this._listeners[event];
        if (null == listeners) {
          return this;
        }
        if (1 === arguments.length) {
          listeners.length = 0;
          return this;
        }
        var imax = listeners.length, i = -1;
        while (++i < imax) {
          if (listeners[i] === fn) {
            listeners.splice(i, 1);
            i--;
            imax--;
          }
        }
        return this;
      };
      return class_EventEmitter;
    }();
    exports.class_EventEmitter = class_EventEmitter;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_class_EventEmitter === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_class_EventEmitter) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_class_EventEmitter, module.exports);
    } else {
      _ref_utils_src_class_EventEmitter = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_utils_src_arr;
  (function() {
    var exports = null != _ref_utils_src_arr ? _ref_utils_src_arr : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.arr_distinct = exports.arr_pushMany = exports.arr_contains = exports.arr_indexOf = exports.arr_each = exports.arr_remove = void 0;
    var obj_1 = _ref_utils_src_obj;
    function arr_remove(array, x) {
      x = array.indexOf(x);
      if (-1 === x) {
        return false;
      }
      array.splice(x, 1);
      return true;
    }
    exports.arr_remove = arr_remove;
    function arr_each(arr, fn, ctx) {
      arr.forEach(fn, ctx);
    }
    exports.arr_each = arr_each;
    function arr_indexOf(arr, x) {
      return arr.indexOf(x);
    }
    exports.arr_indexOf = arr_indexOf;
    function arr_contains(arr, x) {
      return -1 !== arr.indexOf(x);
    }
    exports.arr_contains = arr_contains;
    function arr_pushMany(arr, arrSource) {
      if (null == arrSource || null == arr || arr === arrSource) {
        return;
      }
      var il = arr.length, jl = arrSource.length, j = -1;
      while (++j < jl) {
        arr[il + j] = arrSource[j];
      }
    }
    exports.arr_pushMany = arr_pushMany;
    function arr_distinct(arr, compareFn) {
      var out = [];
      var hash = null == compareFn ? (0, obj_1.obj_create)(null) : null;
      outer: for (var i = 0; i < arr.length; i++) {
        var x = arr[i];
        if (null == compareFn) {
          if (1 === hash[x]) {
            continue;
          }
          hash[x] = 1;
        } else {
          for (var j = i - 1; j > -1; j--) {
            var prev = arr[j];
            if (compareFn(x, prev)) {
              continue outer;
            }
          }
        }
        out.push(x);
      }
      return out;
    }
    exports.arr_distinct = arr_distinct;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_arr === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_arr) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_arr, module.exports);
    } else {
      _ref_utils_src_arr = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_listeners;
  (function() {
    var exports = null != _ref_mask_src_util_listeners ? _ref_mask_src_util_listeners : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.listeners_emit = exports.listeners_off = exports.listeners_on = void 0;
    var arr_1 = _ref_utils_src_arr;
    /**
 * Bind listeners to some system events:
 * - `error` Any parser or render error
 * - `compoCreated` Each time new component is created
 * - `config` Each time configuration is changed via `config` fn
 * @param {string} eveny
 * @param {function} cb
 * @memberOf mask
 * @method on
 */
    function listeners_on(event, fn) {
      (bin[event] || (bin[event] = [])).push(fn);
    }
    exports.listeners_on = listeners_on;
    /**
 * Unbind listener
 * - `error` Any parser or render error
 * - `compoCreated` Each time new component is created
 * @param {string} eveny
 * @param {function} [cb]
 * @memberOf mask
 * @method on
 */
    function listeners_off(event, fn) {
      if (null == fn) {
        bin[event] = [];
        return;
      }
      (0, arr_1.arr_remove)(bin[event], fn);
    }
    exports.listeners_off = listeners_off;
    function listeners_emit(event, v1, v2, v3, v4, v5) {
      var fns = bin[event];
      if (null == fns) {
        return false;
      }
      var imax = fns.length, i = -1;
      while (++i < imax) {
        fns[i](v1, v2, v3, v4, v5);
      }
      return 0 !== i;
    }
    exports.listeners_emit = listeners_emit;
    var bin = {
      compoCreated: null,
      error: null
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_listeners === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_listeners) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_listeners, module.exports);
    } else {
      _ref_mask_src_util_listeners = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_reporters;
  (function() {
    var exports = null != _ref_mask_src_util_reporters ? _ref_mask_src_util_reporters : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.reporter_deprecated = exports.reporter_getNodeStack = exports.reporter_createErrorNode = exports.parser_warn = exports.parser_error = exports.warn_withCompo = exports.warn_withNode = exports.warn_withSource = exports.warn_ = exports.error_withCompo = exports.error_withNode = exports.error_withSource = exports.error_ = exports.throw_ = exports.log_error = exports.log_warn = exports.log = void 0;
    var fn_1 = _ref_utils_src_fn;
    var error_1 = _ref_utils_src_error;
    var listeners_1 = _ref_mask_src_util_listeners;
    var is_1 = _ref_utils_src_is;
    var refs_1 = _ref_utils_src_refs;
    var noConsole = 'undefined' === typeof console;
    var bind = Function.prototype.bind;
    exports.log = noConsole ? fn_1.fn_doNothing : bind.call(console.warn, console);
    exports.log_warn = noConsole ? fn_1.fn_doNothing : bind.call(console.warn, console, 'MaskJS [Warn] :');
    exports.log_error = noConsole ? fn_1.fn_doNothing : bind.call(console.error, console, 'MaskJS [Error] :');
    noConsole = 4;
    fn_1 = (0, error_1.error_createClass)('MaskError', {}, noConsole);
    bind = (0, error_1.error_createClass)('MaskWarn', {}, noConsole);
    function throw_(error) {
      (0, exports.log_error)(error);
      (0, listeners_1.listeners_emit)('error', error);
    }
    exports.throw_ = throw_;
    exports.error_ = delegate_notify(fn_1, 'error');
    exports.error_withSource = delegate_withSource(fn_1, 'error');
    exports.error_withNode = delegate_withNode(fn_1, 'error');
    exports.error_withCompo = delegate_withCompo(exports.error_withNode);
    exports.warn_ = delegate_notify(bind, 'warn');
    exports.warn_withSource = delegate_withSource(bind, 'warn');
    exports.warn_withNode = delegate_withNode(bind, 'warn');
    exports.warn_withCompo = delegate_withCompo(exports.warn_withNode);
    exports.parser_error = delegate_parserReporter(fn_1, 'error');
    exports.parser_warn = delegate_parserReporter(bind, 'warn');
    function reporter_createErrorNode(message) {
      return {
        type: 1,
        tagName: 'div',
        attr: {
          class: '-mask-compo-errored',
          style: 'background:red; color:white;'
        },
        nodes: [ {
          type: 2,
          content: message
        } ]
      };
    }
    exports.reporter_createErrorNode = reporter_createErrorNode;
    function reporter_getNodeStack(node) {
      var stack = [ node ];
      var parent = node.parent;
      while (null != parent) {
        stack.unshift(parent);
        parent = parent.parent;
      }
      var str = '';
      var root = stack[0];
      if (root !== node && (0, is_1.is_String)(root.source) && node.sourceIndex > -1) {
        str += (0, error_1.error_formatSource)(root.source, node.sourceIndex, root.filename) + '\n';
      }
      str += '  at ' + stack.map(function(x) {
        return x.tagName || x.compoName;
      }).join(' > ');
      return str;
    }
    exports.reporter_getNodeStack = reporter_getNodeStack;
    function reporter_deprecated(id, message) {
      if (void 0 !== _notified[id]) {
        return;
      }
      _notified[id] = 1;
      (0, exports.log_warn)('[deprecated]', message);
    }
    exports.reporter_deprecated = reporter_deprecated;
    var _notified = {};
    function delegate_parserReporter(Ctor, type) {
      return function(str, source, index, token, state, file) {
        str = new Ctor(str);
        token = formatToken(token);
        if (token) {
          str.message += token;
        }
        token = formatState(state);
        if (token) {
          str.message += token;
        }
        state = (0, error_1.error_formatSource)(source, index, file);
        if (state) {
          str.message += '\n' + state;
        }
        report(str, 'error');
      };
    }
    function delegate_withSource(Ctor, type) {
      return function(mix, source, index, file) {
        var error = new Ctor(stringifyError);
        error.message = '\n' + (0, error_1.error_formatSource)(source, index, file);
        report(error, type);
      };
    }
    function delegate_notify(Ctor, type) {
      return function(arg1, arg2, arg3) {
        var str = refs_1._Array_slice.call(arguments).join(' ');
        report(new Ctor(str), type);
      };
    }
    function delegate_withNode(Ctor, type) {
      return function(mix, node) {
        mix = mix instanceof Error ? mix : new Ctor(stringifyError(mix));
        if (null != node) {
          mix.message += '\n' + reporter_getNodeStack(node);
        }
        report(mix, type);
      };
    }
    function delegate_withCompo(withNodeFn) {
      return function(mix, compo) {
        var node = compo.node, cursor = compo.parent;
        while (null != cursor && null == node) {
          node = cursor.node;
          cursor = cursor.parent;
        }
        withNodeFn(mix, node);
      };
    }
    function report(error, type) {
      if ((0, listeners_1.listeners_emit)(type, error)) {
        return;
      }
      type = 'error' === type ? exports.log_error : exports.log_warn;
      var stack = error.stack || '';
      type(error.message + '\n' + stack);
    }
    function stringifyError(mix) {
      if (null == mix) {
        return 'Uknown error';
      }
      if ('object' !== typeof mix) {
        return mix;
      }
      if (mix.toString !== Object.prototype.toString) {
        return String(mix);
      }
      return JSON.stringify(mix);
    }
    function formatToken(token) {
      if (null == token) {
        return '';
      }
      if ('number' === typeof token) {
        token = String.fromCharCode(token);
      }
      return ' Invalid token: `' + token + '`';
    }
    function formatState(state) {
      var states = {
        10: 'tag',
        3: 'tag',
        4: 'attribute key',
        12: 'attribute value',
        6: 'literal',
        var: 'VarStatement',
        expr: 'Expression'
      };
      if (null == state || null == states[state]) {
        return '';
      }
      return ' in `' + states[state] + '`';
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_reporters === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_reporters) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_reporters, module.exports);
    } else {
      _ref_mask_src_util_reporters = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_dom_NodeType;
  (function() {
    var exports = null != _ref_mask_src_dom_NodeType ? _ref_mask_src_dom_NodeType : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.dom_DECORATOR = exports.dom_STATEMENT = exports.dom_SET = exports.dom_CONTROLLER = exports.dom_COMPONENT = exports.dom_FRAGMENT = exports.dom_TEXTNODE = exports.dom_NODE = void 0;
    exports.dom_NODE = 1;
    exports.dom_TEXTNODE = 2;
    exports.dom_FRAGMENT = 3;
    exports.dom_COMPONENT = 4;
    exports.dom_CONTROLLER = 9;
    exports.dom_SET = 10;
    exports.dom_STATEMENT = 15;
    exports.dom_DECORATOR = 16;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_dom_NodeType === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_dom_NodeType) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_dom_NodeType, module.exports);
    } else {
      _ref_mask_src_dom_NodeType = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_dom_TextNode;
  (function() {
    var exports = null != _ref_mask_src_dom_TextNode ? _ref_mask_src_dom_TextNode : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.TextNode = void 0;
    var class_1 = _ref_utils_src_class;
    var NodeType_1 = _ref_mask_src_dom_NodeType;
    /**
 * @name TextNode
 * @type {class}
 * @property {type} [type=2]
 * @property {(string|function)} content
 * @property {IMaskNode} parent
 * @memberOf mask.Dom
 */
    exports.TextNode = (0, class_1.class_create)({
      constructor: function(text, parent) {
        this.content = text;
        this.parent = parent;
      },
      type: NodeType_1.dom_TEXTNODE,
      content: null,
      parent: null,
      sourceIndex: -1
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_dom_TextNode === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_dom_TextNode) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_dom_TextNode, module.exports);
    } else {
      _ref_mask_src_dom_TextNode = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_dom_utils;
  (function() {
    var exports = null != _ref_mask_src_dom_utils ? _ref_mask_src_dom_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._appendChild = void 0;
    function _appendChild(el) {
      el.parent = this;
      var nodes = this.nodes;
      if (null == nodes) {
        this.nodes = [ el ];
        return;
      }
      var length = nodes.length;
      if (0 !== length) {
        length = nodes[length - 1];
        if (null != length) {
          length.nextSibling = el;
        }
      }
      nodes.push(el);
    }
    exports._appendChild = _appendChild;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_dom_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_dom_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_dom_utils, module.exports);
    } else {
      _ref_mask_src_dom_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_dom_Fragment;
  (function() {
    var exports = null != _ref_mask_src_dom_Fragment ? _ref_mask_src_dom_Fragment : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.HtmlFragment = exports.Fragment = void 0;
    var class_1 = _ref_utils_src_class;
    var NodeType_1 = _ref_mask_src_dom_NodeType;
    var utils_1 = _ref_mask_src_dom_utils;
    exports.Fragment = (0, class_1.class_create)({
      type: NodeType_1.dom_FRAGMENT,
      nodes: null,
      appendChild: utils_1._appendChild,
      source: '',
      filename: '',
      syntax: 'mask',
      parent: null
    });
    exports.HtmlFragment = (0, class_1.class_create)(exports.Fragment, {
      syntax: 'html'
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_dom_Fragment === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_dom_Fragment) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_dom_Fragment, module.exports);
    } else {
      _ref_mask_src_dom_Fragment = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_dom_Node;
  (function() {
    var exports = null != _ref_mask_src_dom_Node ? _ref_mask_src_dom_Node : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Node = void 0;
    var class_1 = _ref_utils_src_class;
    var utils_1 = _ref_mask_src_dom_utils;
    var NodeType_1 = _ref_mask_src_dom_NodeType;
    /**
 * @name MaskNode
 * @type {class}
 * @property {type} [type=1]
 * @property {object} attr
 * @property {string} tagName
 * @property {Array.<IMaskNode>} nodes
 * @property {IMaskNode} parent
 * @property {string} [expression]
 * @property {function} appendChild
 * @memberOf mask.Dom
 */
    exports.Node = (0, class_1.class_create)({
      constructor: function Node(tagName, parent) {
        this.type = NodeType_1.dom_NODE;
        this.tagName = tagName;
        this.parent = parent;
        this.attr = {};
      },
      __single: null,
      appendChild: utils_1._appendChild,
      attr: null,
      props: null,
      expression: null,
      nodes: null,
      parent: null,
      sourceIndex: -1,
      stringify: null,
      tagName: null,
      type: NodeType_1.dom_NODE,
      decorators: null,
      nextSibling: null
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_dom_Node === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_dom_Node) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_dom_Node, module.exports);
    } else {
      _ref_mask_src_dom_Node = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_dom_DecoratorNode;
  (function() {
    var exports = null != _ref_mask_src_dom_DecoratorNode ? _ref_mask_src_dom_DecoratorNode : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.DecoratorNode = void 0;
    var class_1 = _ref_utils_src_class;
    var NodeType_1 = _ref_mask_src_dom_NodeType;
    exports.DecoratorNode = (0, class_1.class_create)({
      constructor: function DecoratorNode(expression, parent) {
        this.expression = expression;
        this.parent = parent;
      },
      __single: true,
      expression: null,
      parent: null,
      sourceIndex: -1,
      type: NodeType_1.dom_DECORATOR,
      stringify: function(stream) {
        stream.newline();
        stream.write('[' + this.expression + ']');
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_dom_DecoratorNode === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_dom_DecoratorNode) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_dom_DecoratorNode, module.exports);
    } else {
      _ref_mask_src_dom_DecoratorNode = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_dom_ComponentNode;
  (function() {
    var exports = null != _ref_mask_src_dom_ComponentNode ? _ref_mask_src_dom_ComponentNode : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ComponentNode = void 0;
    var NodeType_1 = _ref_mask_src_dom_NodeType;
    function ComponentNode(compoName, parent, controller) {
      this.tagName = compoName;
      this.parent = parent;
      this.controller = controller;
      this.attr = {};
    }
    exports.ComponentNode = ComponentNode;
    ComponentNode.prototype = {
      constructor: ComponentNode,
      type: NodeType_1.dom_COMPONENT,
      parent: null,
      attr: null,
      controller: null,
      nodes: null,
      components: null,
      model: null,
      modelRef: null
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_dom_ComponentNode === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_dom_ComponentNode) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_dom_ComponentNode, module.exports);
    } else {
      _ref_mask_src_dom_ComponentNode = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_dom_exports;
  (function() {
    var exports = null != _ref_mask_src_dom_exports ? _ref_mask_src_dom_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Dom = void 0;
    var NodeType_1 = _ref_mask_src_dom_NodeType;
    var TextNode_1 = _ref_mask_src_dom_TextNode;
    var Fragment_1 = _ref_mask_src_dom_Fragment;
    var Node_1 = _ref_mask_src_dom_Node;
    var DecoratorNode_1 = _ref_mask_src_dom_DecoratorNode;
    var ComponentNode_1 = _ref_mask_src_dom_ComponentNode;
    exports.Dom = {
      NODE: NodeType_1.dom_NODE,
      TEXTNODE: NodeType_1.dom_TEXTNODE,
      FRAGMENT: NodeType_1.dom_FRAGMENT,
      COMPONENT: NodeType_1.dom_COMPONENT,
      CONTROLLER: NodeType_1.dom_CONTROLLER,
      SET: NodeType_1.dom_SET,
      STATEMENT: NodeType_1.dom_STATEMENT,
      DECORATOR: NodeType_1.dom_DECORATOR,
      Node: Node_1.Node,
      TextNode: TextNode_1.TextNode,
      Fragment: Fragment_1.Fragment,
      HtmlFragment: Fragment_1.HtmlFragment,
      Component: ComponentNode_1.ComponentNode,
      DecoratorNode: DecoratorNode_1.DecoratorNode
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_dom_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_dom_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_dom_exports, module.exports);
    } else {
      _ref_mask_src_dom_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_custom_repositories;
  (function() {
    var exports = null != _ref_mask_src_custom_repositories ? _ref_mask_src_custom_repositories : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.custom_Tags_defs = exports.custom_Parsers_Transform = exports.custom_Parsers = exports.custom_Tags_global = exports.custom_Tags = exports.custom_Attributes = exports.custom_Statements = exports.custom_Optimizers = exports.custom_Utils = void 0;
    var obj_1 = _ref_utils_src_obj;
    var _HtmlTags = {
      /*
        * Most common html tags
        * http://jsperf.com/not-in-vs-null/3
        */
      a: null,
      abbr: null,
      article: null,
      aside: null,
      audio: null,
      b: null,
      big: null,
      blockquote: null,
      br: null,
      button: null,
      canvas: null,
      datalist: null,
      details: null,
      div: null,
      em: null,
      fieldset: null,
      footer: null,
      form: null,
      h1: null,
      h2: null,
      h3: null,
      h4: null,
      h5: null,
      h6: null,
      header: null,
      i: null,
      img: null,
      input: null,
      label: null,
      legend: null,
      li: null,
      menu: null,
      nav: null,
      ol: null,
      option: null,
      p: null,
      pre: null,
      section: null,
      select: null,
      small: null,
      span: null,
      strong: null,
      svg: null,
      table: null,
      tbody: null,
      td: null,
      textarea: null,
      tfoot: null,
      th: null,
      thead: null,
      tr: null,
      tt: null,
      ul: null,
      video: null
    };
    var _HtmlAttr = {
      class: null,
      id: null,
      style: null,
      name: null,
      type: null,
      value: null,
      required: null,
      disabled: null
    };
    exports.custom_Utils = (0, obj_1.obj_create)(null);
    exports.custom_Optimizers = (0, obj_1.obj_create)(null);
    exports.custom_Statements = (0, obj_1.obj_create)(null);
    exports.custom_Attributes = (0, obj_1.obj_extend)((0, obj_1.obj_create)(null), _HtmlAttr);
    exports.custom_Tags = (0, obj_1.obj_extend)((0, obj_1.obj_create)(null), _HtmlTags);
    exports.custom_Tags_global = (0, obj_1.obj_extend)((0, obj_1.obj_create)(null), _HtmlTags);
    exports.custom_Parsers = (0, obj_1.obj_extend)((0, obj_1.obj_create)(null), _HtmlTags);
    exports.custom_Parsers_Transform = (0, obj_1.obj_extend)((0, obj_1.obj_create)(null), _HtmlTags);
    // use on server to define reserved tags and its meta info
    exports.custom_Tags_defs = (0, obj_1.obj_create)(null);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_custom_repositories === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_custom_repositories) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_custom_repositories, module.exports);
    } else {
      _ref_mask_src_custom_repositories = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_custom_optimize;
  (function() {
    var exports = null != _ref_mask_src_custom_optimize ? _ref_mask_src_custom_optimize : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.custom_optimize = void 0;
    var obj_1 = _ref_utils_src_obj;
    var repositories_1 = _ref_mask_src_custom_repositories;
    function custom_optimize() {
      var i = _arr.length;
      while (--i > -1) {
        readProps(_arr[i]);
      }
      i = _arr.length;
      while (--i > -1) {
        defineProps(_arr[i]);
        (0, obj_1.obj_toFastProps)(_arr[i]);
      }
      (0, obj_1.obj_toFastProps)(repositories_1.custom_Attributes);
    }
    exports.custom_optimize = custom_optimize;
    var _arr = [ repositories_1.custom_Statements, repositories_1.custom_Tags, repositories_1.custom_Parsers, repositories_1.custom_Parsers_Transform ];
    var _props = {};
    function readProps(obj) {
      for (var key in obj) {
        _props[key] = null;
      }
    }
    function defineProps(obj) {
      for (var key in _props) {
        if (void 0 === obj[key]) {
          obj[key] = null;
        }
      }
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_custom_optimize === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_custom_optimize) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_custom_optimize, module.exports);
    } else {
      _ref_mask_src_custom_optimize = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_custom_attribute;
  (function() {
    var exports = null != _ref_mask_src_custom_attribute ? _ref_mask_src_custom_attribute : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.customAttr_get = exports.customAttr_createRegistrar = exports.customAttr_register = void 0;
    var is_1 = _ref_utils_src_is;
    var repositories_1 = _ref_mask_src_custom_repositories;
    var customAttr_register_inner = function(attrName, mix, Handler) {
      if ((0, is_1.is_Function)(mix)) {
        Handler = mix;
      }
      repositories_1.custom_Attributes[attrName] = Handler;
    };
    /**
 * Register an attribute handler. Any changes can be made to:
 * - maskNode's template
 * - current element value
 * - controller
 * - model
 * Note: Attribute wont be set to an element.
 * @param {string} name - Attribute name to handle
 * @param {string} [mode] - Render mode `client|server|both`
 * @param {AttributeHandler} handler
 * @returns {void}
 * @memberOf mask
 * @method registerAttrHandler
 */
    function customAttr_register(attrName, mix, Handler) {
      customAttr_register_inner(attrName, mix, Handler);
    }
    exports.customAttr_register = customAttr_register;
    function customAttr_createRegistrar(wrapper) {
      customAttr_register_inner = wrapper(customAttr_register_inner);
    }
    exports.customAttr_createRegistrar = customAttr_createRegistrar;
    /**
 * Get attribute  handler
 * @param {string} name
 * @returns {AttributeHandler}
 * @memberOf mask
 * @method getAttrHandler
 */
    function customAttr_get(attrName) {
      return null != attrName ? repositories_1.custom_Attributes[attrName] : repositories_1.custom_Attributes;
    }
    exports.customAttr_get = customAttr_get;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_custom_attribute === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_custom_attribute) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_custom_attribute, module.exports);
    } else {
      _ref_mask_src_custom_attribute = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_const;
  (function() {
    var exports = null != _src_const ? _src_const : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.mode_BOTH = exports.mode_CLIENT = exports.mode_SERVER_CHILDREN = exports.mode_SERVER_ALL = exports.mode_SERVER = void 0;
    exports.mode_SERVER = 'server';
    exports.mode_SERVER_ALL = 'server:all';
    exports.mode_SERVER_CHILDREN = 'server:children';
    exports.mode_CLIENT = 'client';
    exports.mode_BOTH = 'both';
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_const === module.exports) {
      // do nothing if
    } else if (__isObj(_src_const) && __isObj(module.exports)) {
      Object.assign(_src_const, module.exports);
    } else {
      _src_const = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_CommentNode;
  (function() {
    var exports = null != _src_html_dom_CommentNode ? _src_html_dom_CommentNode : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.CommentNode = void 0;
    var CommentNode = /** @class */ function() {
      function CommentNode(textContent) {
        this.nextSibling = null;
        this.parentNode = null;
        this.textContent = '';
        if (null == textContent) {
          return;
        }
        if (_isComment(textContent)) {
          textContent = _stripComment(textContent);
        }
        this.textContent = textContent.replace(/\-\->/g, '--&gt;');
      }
      CommentNode.prototype.toString = function() {
        if ('' === this.textContent) {
          return '';
        }
        return '\x3c!--' + this.textContent + '--\x3e';
      };
      return CommentNode;
    }();
    exports.CommentNode = CommentNode;
    function _isComment(txt) {
      if (60 /*<*/ !== txt.charCodeAt(0) && 33 /*!*/ !== txt.charCodeAt(1) && 45 /*-*/ !== txt.charCodeAt(1) && 45 /*-*/ !== txt.charCodeAt(2)) {
        return false;
      }
      var l = txt.length;
      if (62 /*>*/ !== txt.charCodeAt(--l) && 45 /*-*/ !== txt.charCodeAt(--l) && 45 /*-*/ !== txt.charCodeAt(--l)) {
        return false;
      }
      return true;
    }
    function _stripComment(txt) {
      return txt.slice(4, -3);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_CommentNode === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_CommentNode) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_CommentNode, module.exports);
    } else {
      _src_html_dom_CommentNode = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_helper_MetaSerializer;
  (function() {
    var exports = null != _src_helper_MetaSerializer ? _src_helper_MetaSerializer : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.AttributeSerializer = exports.ComponentSerializer = exports.Serializer = void 0;
    var is_1 = _ref_utils_src_is;
    var reporters_1 = _ref_mask_src_util_reporters;
    var seperator_CODE = 30;
    var seperator_CHAR = String.fromCharCode(seperator_CODE);
    var Serializer;
    (function(Serializer) {
      function resolve(info) {
        switch (info.type) {
         case 't':
          return ComponentSerializer;

         case 'a':
          return AttributeSerializer;

         default:
          return Serializer;
        }
      }
      Serializer.resolve = resolve;
      function serialize(json) {
        var string = '';
        for (var key in json) {
          if ('ID' === key) {
            continue;
          }
          var val = json[key];
          if (null == val) {
            continue;
          }
          string += key + ':' + JSON_stringify(json[key]) + seperator_CHAR + ' ';
        }
        return string;
      }
      Serializer.serialize = serialize;
      function deserializeSingleProp(json, str, i) {
        var colon = str.indexOf(':'), key = str.substring(0, colon), str = str.substring(colon + 1);
        if ('attr' === key || 'scope' === key) {
          str = JSON.parse(str);
        }
        json[key] = str;
      }
      Serializer.deserializeSingleProp = deserializeSingleProp;
      function serializeProps_(props, json) {
        var arr = new Array(props.count), keys = props.keys;
        for (var key in json) {
          if ('ID' === key) {
            continue;
          }
          var keyInfo = keys[key];
          if (void 0 === keyInfo) {
            (0, reporters_1.log_error)('Unsupported Meta key:', key);
            continue;
          }
          var val = json[key];
          arr[keyInfo.index] = stringifyValueByKeyInfo(val, keyInfo);
        }
        var imax = arr.length, i = -1, lastPos = 0;
        while (++i < imax) {
          val = arr[i];
          if (null == val) {
            val = arr[i] = '';
          }
          if ('' !== val) {
            lastPos = i;
          }
        }
        if (lastPos < arr.length - 1) {
          arr = arr.slice(0, lastPos + 1);
        }
        return arr.join(seperator_CHAR + ' ');
      }
      Serializer.serializeProps_ = serializeProps_;
      function deserializeSingleProp_(json, props, str, i) {
        props = props.keysArr;
        if (i >= props.length) {
          (0, reporters_1.log_error)('Keys count missmatch');
          return;
        }
        props = props[i];
        i = parseValueByKeyInfo(str, props);
        json[props.name] = i;
      }
      Serializer.deserializeSingleProp_ = deserializeSingleProp_;
      function prepairProps_(keys) {
        var props = {
          count: keys.length,
          keys: {},
          keysArr: keys
        }, imax = keys.length, i = -1;
        while (++i < imax) {
          var keyInfo = keys[i];
          keyInfo.index = i;
          props.keys[keyInfo.name] = keyInfo;
        }
        return props;
      }
      Serializer.prepairProps_ = prepairProps_;
      function parseValueByKeyInfo(str, keyInfo) {
        if (null == str || '' === str) {
          if (keyInfo.default) {
            return keyInfo.default();
          }
          return null;
        }
        switch (keyInfo.type) {
         case 'string':
         case 'mask':
          return str;

         case 'number':
          return +str;

         default:
          return JSON.parse(str);
        }
      }
      function stringifyValueByKeyInfo(val, keyInfo) {
        if (null == val) {
          return '';
        }
        val = JSON_stringify(val);
        if ('object' === keyInfo.type && '{}' === val) {
          return '';
        }
        if ('array' === keyInfo.type && '[]' === val) {
          return '';
        }
        return val;
      }
    })(Serializer = exports.Serializer || (exports.Serializer = {}));
    var ComponentSerializer;
    (function(ComponentSerializer) {
      var keys = [ {
        name: 'compoName',
        type: 'string'
      }, {
        name: 'attr',
        type: 'object',
        default: function() {
          return {};
        }
      }, {
        name: 'expression',
        type: 'string'
      }, {
        name: 'nodes',
        type: 'mask'
      }, {
        name: 'scope',
        type: 'object'
      }, {
        name: 'modelID',
        type: 'string'
      } ];
      var props = Serializer.prepairProps_(keys);
      function serialize(json, info) {
        return Serializer.serializeProps_(props, json);
      }
      ComponentSerializer.serialize = serialize;
      function deserialize(str) {
        return Serializer.deserializeProps_(props, str);
      }
      ComponentSerializer.deserialize = deserialize;
      function deserializeSingleProp(json, str, i) {
        return Serializer.deserializeSingleProp_(json, props, str, i);
      }
      ComponentSerializer.deserializeSingleProp = deserializeSingleProp;
      function defaultProperties(json, index) {
        var arr = props.keysArr, imax = arr.length, i = index - 1;
        while (++i < imax) {
          var keyInfo = arr[i];
          if (keyInfo.default) {
            json[keyInfo.name] = keyInfo.default();
          }
        }
      }
      ComponentSerializer.defaultProperties = defaultProperties;
    })(ComponentSerializer = exports.ComponentSerializer || (exports.ComponentSerializer = {}));
    var AttributeSerializer;
    (function(AttributeSerializer) {
      var keys = [ {
        name: 'name',
        type: 'string'
      }, {
        name: 'value',
        type: 'string'
      } ];
      var props = Serializer.prepairProps_(keys);
      function serialize(json, info) {
        return Serializer.serializeProps_(props, json);
      }
      AttributeSerializer.serialize = serialize;
      function deserialize(str) {
        return Serializer.deserializeProps_(props, str);
      }
      AttributeSerializer.deserialize = deserialize;
      function deserializeSingleProp(json, str, i) {
        return Serializer.deserializeSingleProp_(json, props, str, i);
      }
      AttributeSerializer.deserializeSingleProp = deserializeSingleProp;
    })(AttributeSerializer = exports.AttributeSerializer || (exports.AttributeSerializer = {}));
    function JSON_stringify(mix) {
      if (null == mix) {
        return 'null';
      }
      if ('object' !== typeof mix) {
        // string | number
        return mix;
      }
      if (false === (0, is_1.is_Array)(mix)) {
        // JSON.stringify does not handle the prototype chain
        mix = _obj_flatten(mix);
      }
      return JSON.stringify(mix);
    }
    function _obj_flatten(obj) {
      var result = Object.create(obj);
      for (var key in result) {
        result[key] = result[key];
      }
      return result;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_helper_MetaSerializer === module.exports) {
      // do nothing if
    } else if (__isObj(_src_helper_MetaSerializer) && __isObj(module.exports)) {
      Object.assign(_src_helper_MetaSerializer, module.exports);
    } else {
      _src_helper_MetaSerializer = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_helper_MetaParser;
  (function() {
    var exports = null != _src_helper_MetaParser ? _src_helper_MetaParser : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.MetaParser = void 0;
    var MetaSerializer_1 = _src_helper_MetaSerializer;
    var seperator_CODE = 30;
    var seperator_CHAR = String.fromCharCode(seperator_CODE);
    (function(MetaParser) {
      var _i, _imax, _str;
      function parse(str) {
        if (60 /* < */ === str.charCodeAt(0)) {
          // looks like a comment
          var end = str.length;
          if (62 /*'>'*/ === str.charCodeAt(end - 1)) {
            end -= 3;
          }
          str = str.substring(4, end);
        }
        _i = 0;
        _str = str;
        _imax = str.length;
        end = str.charCodeAt(_i);
        var isEnd = false;
        var isSingle = false;
        if (47 /* / */ === end) {
          isEnd = true;
          end = str.charCodeAt(++_i);
        }
        if (47 /* / */ === str.charCodeAt(_imax - 1)) {
          isSingle = true;
          _imax--;
        }
        var json = {
          mask: null,
          modelID: null,
          ID: null,
          model: null,
          ctx: null,
          end: isEnd,
          single: isSingle,
          type: str[_i]
        };
        end = str.charCodeAt(++_i);
        if (35 /*#*/ === end) {
          ++_i;
          json.ID = parseInt(consumeNext(), 10);
        }
        isEnd = MetaSerializer_1.Serializer.resolve(json);
        var propertyParserFn = isEnd.deserializeSingleProp;
        isSingle = isEnd.defaultProperties;
        var index = 0;
        while (_i < _imax) {
          var part = consumeNext();
          propertyParserFn(json, part, index++);
        }
        if (null != isSingle) {
          isSingle(json, index);
        }
        return json;
      }
      MetaParser.parse = parse;
      var seperator = seperator_CHAR + ' ', seperatorLength = seperator.length;
      function consumeNext() {
        var start = _i, end = _str.indexOf(seperator, start);
        if (-1 === end) {
          end = _imax;
        }
        _i = end + seperatorLength;
        return _str.substring(start, end);
      }
    })(exports.MetaParser || (exports.MetaParser = {}));
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_helper_MetaParser === module.exports) {
      // do nothing if
    } else if (__isObj(_src_helper_MetaParser) && __isObj(module.exports)) {
      Object.assign(_src_helper_MetaParser, module.exports);
    } else {
      _src_helper_MetaParser = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_helper_Meta;
  (function() {
    var exports = null != _src_helper_Meta ? _src_helper_Meta : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Meta = void 0;
    var const_1 = _src_const;
    var CommentNode_1 = _src_html_dom_CommentNode;
    var MetaParser_1 = _src_helper_MetaParser;
    var MetaSerializer_1 = _src_helper_MetaSerializer;
    var seperator_CODE = 30;
    var seperator_CHAR = String.fromCharCode(seperator_CODE);
    exports.Meta = {
      stringify: function(json, info) {
        switch (info.mode) {
         case const_1.mode_SERVER:
         case const_1.mode_SERVER_ALL:
          return '';
        }
        var type = info.type;
        var isSingle = info.single;
        if (json.ID) {
          type += '#' + json.ID;
        }
        type += seperator_CHAR + ' ';
        type += MetaSerializer_1.Serializer.resolve(info).serialize(json);
        if (isSingle) {
          type += '/';
        }
        return new CommentNode_1.CommentNode(type).toString();
      },
      close: function(json, info) {
        if (true === info.single) {
          return '';
        }
        switch (info.mode) {
         case const_1.mode_SERVER:
         case const_1.mode_SERVER_ALL:
          return '';
        }
        info = '/' + info.type + (json.ID ? '#' + json.ID : '');
        return new CommentNode_1.CommentNode(info).toString();
      },
      parse: function(str) {
        return MetaParser_1.MetaParser.parse(str);
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_helper_Meta === module.exports) {
      // do nothing if
    } else if (__isObj(_src_helper_Meta) && __isObj(module.exports)) {
      Object.assign(_src_helper_Meta, module.exports);
    } else {
      _src_helper_Meta = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_mock_attr_handler;
  (function() {
    var exports = null != _src_mock_attr_handler ? _src_mock_attr_handler : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_attribute;
    var exports_1 = _ref_mask_src_custom_exports;
    var Meta_1 = _src_helper_Meta;
    var Attr = /** @class */ function() {
      function Attr(attrName, attrValue, ID) {
        this.meta = {
          ID: ID,
          name: attrName,
          value: attrValue
        };
      }
      Attr.prototype.toString = function() {
        var json = this.meta, info = {
          type: 'a',
          single: true
        };
        return Meta_1.Meta.stringify(json, info);
      };
      return Attr;
    }();
    var mock_AttrHandler = {
      create: function(attrName, fn, mode) {
        return function(node, value, model, ctx, tag, ctr, container) {
          if ('server' !== mode) {
            container.insertBefore(new Attr(attrName, value, ++ctx._id), tag);
          }
          if ('client' !== mode) {
            return fn(node, value, model, ctx, tag, ctr, container);
          }
          return '';
        };
      }
    };
    (0, exports.customAttr_createRegistrar)(function(originalFn) {
      return function(attrName, mix, fn) {
        if (null == fn) {
          exports_1.custom_Attributes[attrName] = mix;
          return;
        }
        // obsolete - change args in all callers
        if ('string' === typeof fn) {
          var swap = mix;
          mix = fn;
          fn = swap;
        }
        swap = mock_AttrHandler.create(attrName, fn, mix);
        exports_1.custom_Attributes[attrName] = swap;
      };
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_mock_attr_handler === module.exports) {
      // do nothing if
    } else if (__isObj(_src_mock_attr_handler) && __isObj(module.exports)) {
      Object.assign(_src_mock_attr_handler, module.exports);
    } else {
      _src_mock_attr_handler = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_utils_src_coll;
  (function() {
    var exports = null != _ref_utils_src_coll ? _ref_utils_src_coll : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.coll_find = exports.coll_map = exports.coll_remove = exports.coll_indexOf = exports.coll_each = void 0;
    function coll_each(coll, fn, ctx) {
      if (null == ctx) {
        ctx = coll;
      }
      if (null == coll) {
        return coll;
      }
      var imax = coll.length, i = 0;
      for (;i < imax; i++) {
        fn.call(ctx, coll[i], i);
      }
      return ctx;
    }
    exports.coll_each = coll_each;
    function coll_indexOf(coll, x) {
      if (null == coll) {
        return -1;
      }
      var imax = coll.length, i = 0;
      for (;i < imax; i++) {
        if (coll[i] === x) {
          return i;
        }
      }
      return -1;
    }
    exports.coll_indexOf = coll_indexOf;
    function coll_remove(coll, x) {
      x = coll_indexOf(coll, x);
      if (-1 === x) {
        return false;
      }
      coll.splice(x, 1);
      return true;
    }
    exports.coll_remove = coll_remove;
    function coll_map(coll, fn, ctx) {
      var arr = new Array(coll.length);
      coll_each(coll, function(x, i) {
        arr[i] = fn.call(this, x, i);
      }, ctx);
      return arr;
    }
    exports.coll_map = coll_map;
    function coll_find(coll, fn, ctx) {
      var imax = coll.length, i = 0;
      for (;i < imax; i++) {
        if (fn.call(ctx || coll, coll[i], i)) {
          return true;
        }
      }
      return false;
    }
    exports.coll_find = coll_find;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_utils_src_coll === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_utils_src_coll) && __isObj(module.exports)) {
      Object.assign(_ref_utils_src_coll, module.exports);
    } else {
      _ref_utils_src_coll = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_scope_vars;
  (function() {
    var exports = null != _ref_mask_src_scope_vars ? _ref_mask_src_scope_vars : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.__rgxEscapedChar = void 0;
    exports.__rgxEscapedChar = {
      '\'': /\\'/g,
      '"': /\\"/g,
      '{': /\\\{/g,
      '>': /\\>/g,
      ';': /\\>/g
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_scope_vars === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_scope_vars) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_scope_vars, module.exports);
    } else {
      _ref_mask_src_scope_vars = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_cursor;
  (function() {
    var exports = null != _ref_mask_src_parser_cursor ? _ref_mask_src_parser_cursor : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.cursor_goToWhitespace = exports.cursor_skipWhitespaceBack = exports.cursor_skipWhitespace = exports.cursor_quoteEnd = exports.cursor_tokenEnd = exports.cursor_refEnd = exports.cursor_groupEnd = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    function cursor_groupEnd(str, i, imax, startCode, endCode) {
      var c, count = 0, start = i;
      for (;i < imax; i++) {
        c = str.charCodeAt(i);
        if (34 === c || 39 === c) {
          // "|'
          i = cursor_quoteEnd(str, i + 1, imax, 34 === c ? '"' : '\'');
          continue;
        }
        if (c === startCode) {
          count++;
          continue;
        }
        if (c === endCode) {
          if (-1 === --count) {
            return i;
          }
        }
      }
      (0, reporters_1.parser_warn)('Group was not closed', str, start);
      return imax;
    }
    exports.cursor_groupEnd = cursor_groupEnd;
    function cursor_refEnd(str, i, imax) {
      var c;
      while (i < imax) {
        c = str.charCodeAt(i);
        if (36 === c || 95 === c) {
          // $ _
          i++;
          continue;
        }
        if (48 <= c && c <= 57 || // 0-9
        65 <= c && c <= 90 || // A-Z
        97 <= c && c <= 122) {
          // a-z
          i++;
          continue;
        }
        break;
      }
      return i;
    }
    exports.cursor_refEnd = cursor_refEnd;
    function cursor_tokenEnd(str, i, imax) {
      var c;
      while (i < imax) {
        c = str.charCodeAt(i);
        if (36 === c || 95 === c || 58 === c) {
          // $ _ :
          i++;
          continue;
        }
        if (48 <= c && c <= 57 || // 0-9
        65 <= c && c <= 90 || // A-Z
        97 <= c && c <= 122) {
          // a-z
          i++;
          continue;
        }
        break;
      }
      return i;
    }
    exports.cursor_tokenEnd = cursor_tokenEnd;
    function cursor_quoteEnd(str, i, imax, char_) {
      var start = i;
      while (-1 !== (i = str.indexOf(char_, i))) {
        if (92 /*\*/ !== str.charCodeAt(i - 1)) {
          return i;
        }
        i++;
      }
      (0, reporters_1.parser_warn)('Quote was not closed', str, start - 1);
      return imax;
    }
    exports.cursor_quoteEnd = cursor_quoteEnd;
    function cursor_skipWhitespace(str, i_, imax) {
      for (var i = i_; i < imax; i++) {
        if (str.charCodeAt(i) > 32) {
          return i;
        }
      }
      return i;
    }
    exports.cursor_skipWhitespace = cursor_skipWhitespace;
    function cursor_skipWhitespaceBack(str, i) {
      for (;i > 0; i--) {
        if (str.charCodeAt(i) > 32) {
          return i;
        }
      }
      return i;
    }
    exports.cursor_skipWhitespaceBack = cursor_skipWhitespaceBack;
    function cursor_goToWhitespace(str, i, imax) {
      for (;i < imax; i++) {
        if (str.charCodeAt(i) < 33) {
          return i;
        }
      }
      return i;
    }
    exports.cursor_goToWhitespace = cursor_goToWhitespace;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_cursor === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_cursor) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_cursor, module.exports);
    } else {
      _ref_mask_src_parser_cursor = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_const;
  (function() {
    var exports = null != _ref_mask_src_parser_const ? _ref_mask_src_parser_const : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.parser_setInterpolationQuotes = exports.state_literal = exports.state_prop = exports.state_attr = exports.state_tag = exports.go_attrHeadVal = exports.go_propVal = exports.go_attrVal = exports.go_up = exports.go_tag = exports.interp_code_CLOSE = exports.interp_code_OPEN = exports.interp_code_START = exports.interp_CLOSE = exports.interp_OPEN = exports.interp_START = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    exports.interp_START = '~';
    exports.interp_OPEN = '[';
    exports.interp_CLOSE = ']';
    // ~
    exports.interp_code_START = 126;
    // [
    exports.interp_code_OPEN = 91;
    // ]
    exports.interp_code_CLOSE = 93;
    exports.go_tag = 10;
    exports.go_up = 11;
    exports.go_attrVal = 12;
    exports.go_propVal = 13;
    exports.go_attrHeadVal = 14;
    exports.state_tag = 3;
    exports.state_attr = 4;
    exports.state_prop = 5;
    exports.state_literal = 6;
    function parser_setInterpolationQuotes(start, end) {
      if (!start || 2 !== start.length) {
        (0, reporters_1.log_error)('Interpolation Start must contain 2 Characters');
        return;
      }
      if (!end || 1 !== end.length) {
        (0, reporters_1.log_error)('Interpolation End must be of 1 Character');
        return;
      }
      exports.interp_code_START = start.charCodeAt(0);
      exports.interp_code_OPEN = start.charCodeAt(1);
      exports.interp_code_CLOSE = end.charCodeAt(0);
      exports.interp_START = start[0];
      exports.interp_OPEN = start[1];
      exports.interp_CLOSE = end;
    }
    exports.parser_setInterpolationQuotes = parser_setInterpolationQuotes;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_const === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_const) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_const, module.exports);
    } else {
      _ref_mask_src_parser_const = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_config;
  (function() {
    var exports = null != _ref_mask_src_parser_config ? _ref_mask_src_parser_config : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.parser_defineContentTag = exports.parser_cfg_ContentTags = void 0;
    exports.parser_cfg_ContentTags = {
      script: 1,
      style: 1,
      template: 1,
      markdown: 1
    };
    function parser_defineContentTag(name) {
      exports.parser_cfg_ContentTags[name] = 1;
    }
    exports.parser_defineContentTag = parser_defineContentTag;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_config === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_config) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_config, module.exports);
    } else {
      _ref_mask_src_parser_config = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_mask_partials_attributes;
  (function() {
    var exports = null != _ref_mask_src_parser_mask_partials_attributes ? _ref_mask_src_parser_mask_partials_attributes : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.parser_parseAttrObject = exports.parser_parseAttr = void 0;
    var cursor_1 = _ref_mask_src_parser_cursor;
    function parser_parseAttr(str, start, end) {
      var key, c, attr = {}, i = start;
      while (i < end) {
        i = (0, cursor_1.cursor_skipWhitespace)(str, i, end);
        if (i === end) {
          break;
        }
        start = i;
        for (;i < end; i++) {
          c = str.charCodeAt(i);
          if (61 === c || c < 33) {
            break;
          }
        }
        key = str.substring(start, i);
        i = (0, cursor_1.cursor_skipWhitespace)(str, i, end);
        if (i === end) {
          attr[key] = key;
          break;
        }
        if (61 /*=*/ !== str.charCodeAt(i)) {
          attr[key] = key;
          continue;
        }
        i = start = (0, cursor_1.cursor_skipWhitespace)(str, i + 1, end);
        c = str.charCodeAt(i);
        if (34 === c || 39 === c) {
          // "|'
          i = (0, cursor_1.cursor_quoteEnd)(str, i + 1, end, 39 === c ? '\'' : '"');
          attr[key] = str.substring(start + 1, i);
          i++;
          continue;
        }
        i = (0, cursor_1.cursor_goToWhitespace)(str, i, end);
        attr[key] = str.substring(start, i);
      }
      return attr;
    }
    exports.parser_parseAttr = parser_parseAttr;
    function parser_parseAttrObject(str, i, imax, attr) {
      var token, index, key, c, state_KEY = 1, state_VAL = 2, state_END = 3, state = state_KEY;
      while (i < imax) {
        i = (0, cursor_1.cursor_skipWhitespace)(str, i, imax);
        if (i === imax) {
          break;
        }
        index = i;
        c = str.charCodeAt(i);
        switch (c) {
         case 61 /* = */:
          i++;
          state = state_VAL;
          continue;

         case 123:
         case 59:
         case 62:
         case 47:
          // {;>/
          state = state_END;
          break;

         case 40:
          //()
          i = (0, cursor_1.cursor_groupEnd)(str, ++index, imax, 40, 41);
          if (null != key) {
            attr[key] = key;
          }
          key = 'expression';
          token = str.substring(index, i);
          i++;
          state = state_VAL;
          break;

         case 39:
         case 34:
          //'"
          i = (0, cursor_1.cursor_quoteEnd)(str, ++index, imax, 39 === c ? '\'' : '"');
          token = str.substring(index, i);
          i++;
          break;

         default:
          i++;
          for (;i < imax; i++) {
            c = str.charCodeAt(i);
            if (c < 33 || 61 === c || 123 === c || 59 === c || 62 === c || 47 === c) {
              // ={;>/
              break;
            }
          }
          token = str.substring(index, i);
          break;
        }
        if (state === state_VAL) {
          attr[key] = token;
          state = state_KEY;
          key = null;
          continue;
        }
        if (null != key) {
          attr[key] = key;
          key = null;
        }
        if (state === state_END) {
          break;
        }
        key = token;
      }
      return i;
    }
    exports.parser_parseAttrObject = parser_parseAttrObject;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_mask_partials_attributes === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_mask_partials_attributes) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_mask_partials_attributes, module.exports);
    } else {
      _ref_mask_src_parser_mask_partials_attributes = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_object;
  (function() {
    var exports = null != _ref_mask_src_util_object ? _ref_mask_src_util_object : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.obj_toDictionary = exports.obj_getPropertyEx = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var refs_1 = _ref_utils_src_refs;
    var exports_1 = _ref_mask_src_custom_exports;
    function obj_getPropertyEx(path, model, ctx, ctr) {
      if ('.' === path) {
        return model;
      }
      path = path.split('.');
      var imax = path.length;
      var key = path[0];
      if ('$c' === key || '$' === key) {
        (0, reporters_1.reporter_deprecated)('accessor.compo', 'Use `this` instead of `$c` or `$`');
        key = '$';
      }
      if ('$u' === key) {
        (0, reporters_1.reporter_deprecated)('accessor.util', 'Use `_` instead of `$u`');
        key = '_';
      }
      if ('this' === key) {
        return getFromCompo_(ctr, path, 1, imax);
      }
      if ('$a' === key) {
        return getProperty_(ctr && ctr.attr, path, 1, imax);
      }
      if ('_' === key) {
        return getProperty_(exports_1.customUtil_$utils, path, 1, imax);
      }
      if ('$ctx' === key) {
        return getProperty_(ctx, path, 1, imax);
      }
      if ('$scope' === key) {
        return getFromScope_(ctr, path, 1, imax);
      }
      if ('global' === key) {
        return getProperty_(refs_1._global, path, 0, imax);
      }
      ctx = getProperty_(model, path, 0, imax);
      if (null != ctx) {
        return ctx;
      }
      return getFromScope_(ctr, path, 0, imax);
    }
    exports.obj_getPropertyEx = obj_getPropertyEx;
    function obj_toDictionary(obj) {
      var key, array = [], i = 0;
      for (key in obj) {
        array[i++] = {
          key: key,
          value: obj[key]
        };
      }
      return array;
    }
    exports.obj_toDictionary = obj_toDictionary;
    // = private
    function getProperty_(obj, props, startIndex, imax) {
      var i = startIndex, val = obj;
      while (i < imax && null != val) {
        val = val[props[i]];
        i++;
      }
      return val;
    }
    function getFromScope_(ctr_, props, startIndex, imax) {
      var ctr = ctr_;
      while (null != ctr) {
        var scope = ctr.scope;
        if (null != scope) {
          scope = getProperty_(scope, props, startIndex, imax);
          if (void 0 !== scope) {
            return scope;
          }
        }
        ctr = ctr.parent;
      }
      return null;
    }
    function getFromCompo_(ctr_, props, startIndex, imax) {
      var ctr = ctr_;
      while (null != ctr) {
        var x = getProperty_(ctr, props, startIndex, imax);
        if (void 0 !== x) {
          return x;
        }
        ctr = ctr.parent;
      }
      return null;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_object === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_object) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_object, module.exports);
    } else {
      _ref_mask_src_util_object = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_interpolation;
  (function() {
    var exports = null != _ref_mask_src_parser_interpolation ? _ref_mask_src_parser_interpolation : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.parser_ensureTemplateFunction = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_src_custom_exports;
    var object_1 = _ref_mask_src_util_object;
    var const_1 = _ref_mask_src_parser_const;
    var cursor_1 = _ref_mask_src_parser_cursor;
    function parser_ensureTemplateFunction(template) {
      var mix = _split(template);
      if (null == mix) {
        return template;
      }
      if ('string' === typeof mix) {
        return mix;
      }
      var array = mix;
      return function(type, model, ctx, element, ctr, name, node) {
        if (void 0 === type) {
          return template;
        }
        return _interpolate(array, type, model, ctx, element, ctr, name, node);
      };
    }
    exports.parser_ensureTemplateFunction = parser_ensureTemplateFunction;
    function _split(template) {
      var index = -1, wasEscaped = false;
      /*
     * - single char indexOf is much faster then '~[' search
     * - function is divided in 2 parts: interpolation start lookup + interpolation parse
     * for better performance
     */
      while (-1 !== (index = template.indexOf(const_1.interp_START, index))) {
        var nextC = template.charCodeAt(index + 1);
        var escaped = _char_isEscaped(template, index);
        if (true === escaped) {
          wasEscaped = true;
        }
        if (false === escaped) {
          if (nextC === const_1.interp_code_OPEN) {
            break;
          }
          if (_char_isSimpleInterp(nextC)) {
            break;
          }
        }
        index++;
      }
      if (-1 === index) {
        if (true === wasEscaped) {
          return _escape(template);
        }
        return null;
      }
      var end, length = template.length, array = [], lastIndex = 0, i = 0;
      while (true) {
        array[i++] = lastIndex === index ? '' : _slice(template, lastIndex, index);
        var nextI = index + 1;
        nextC = template.charCodeAt(nextI);
        if (nextC === const_1.interp_code_OPEN) {
          false;
          end = (0, cursor_1.cursor_groupEnd)(template, nextI + 1, length, const_1.interp_code_OPEN, const_1.interp_code_CLOSE);
          var str = template.substring(index + 2, end);
          array[i++] = new InterpolationModel(null, str);
          lastIndex = index = end + 1;
        } else if (_char_isSimpleInterp(nextC)) {
          true;
          end = _cursor_propertyAccessorEnd(template, nextI, length);
          str = template.substring(index + 1, end);
          array[i++] = new InterpolationModel(str, null);
          lastIndex = index = end;
        } else {
          array[i] += template[nextI];
          lastIndex = nextI;
        }
        while (-1 !== (index = template.indexOf(const_1.interp_START, index))) {
          nextC = template.charCodeAt(index + 1);
          escaped = _char_isEscaped(template, index);
          if (true === escaped) {
            wasEscaped = true;
          }
          if (false === escaped) {
            if (nextC === const_1.interp_code_OPEN) {
              break;
            }
            if (_char_isSimpleInterp(nextC)) {
              break;
            }
          }
          index++;
        }
        if (-1 === index) {
          break;
        }
      }
      if (lastIndex < length) {
        array[i] = true === wasEscaped ? _slice(template, lastIndex, length) : template.substring(lastIndex);
      }
      return array;
    }
    function _char_isSimpleInterp(c) {
      //A-z$_
      return c >= 65 && c <= 122 || 36 === c || 95 === c;
    }
    function _char_isEscaped(str, i) {
      if (0 === i) {
        return false;
      }
      i = str.charCodeAt(--i);
      if (92 === i) {
        if (_char_isEscaped(str, i)) {
          return false;
        }
        return true;
      }
      return false;
    }
    function _slice(string, start, end) {
      string = string.substring(start, end);
      start = string.indexOf(const_1.interp_START);
      if (-1 === start) {
        return string;
      }
      return _escape(string);
    }
    function _escape(str) {
      return str.replace(/\\~/g, '~');
    }
    function InterpolationModel(prop, expr) {
      this.prop = prop;
      this.expr = expr;
    }
    InterpolationModel.prototype.process = function(model, ctx, el, ctr, name, type, node) {
      if (null != this.prop) {
        return (0, object_1.obj_getPropertyEx)(this.prop, model, ctx, ctr);
      }
      var util, expr = this.expr, index = expr.indexOf(':');
      if (-1 !== index) {
        if (0 === index) {
          expr = expr.substring(index + 1);
        } else {
          var match = rgx_UTIL.exec(expr);
          if (null != match) {
            util = match[1];
            expr = expr.substring(index + 1);
          }
        }
      }
      if (null == util || '' === util) {
        util = 'expression';
      }
      match = exports_1.custom_Utils[util];
      if (null == match) {
        (0, reporters_1.log_error)('Undefined custom util:', util);
        return null;
      }
      return match(expr, model, ctx, el, ctr, name, type, node);
    };
    /**
 * If we rendere interpolation in a TextNode, then custom util can return not only string values,
 * but also any HTMLElement, then TextNode will be splitted and HTMLElements will be inserted within.
 * So in that case we return array where we hold strings and that HTMLElements.
 *
 * If we interpolate the string in a components attribute and we have only one expression,
 * then return raw value
 *
 * If custom utils returns only strings, then String will be returned by this function
 * @returns {(array|string)}
 */
    function _interpolate(arr, type, model, ctx, el, ctr, name, node) {
      if (('compo-attr' === type || 'compo-prop' === type) && 2 === arr.length && '' === arr[0]) {
        return arr[1].process(model, ctx, el, ctr, name, type);
      }
      var imax = arr.length, i = -1, array = null, string = '', even = true;
      while (++i < imax) {
        if (true === even) {
          if (null == array) {
            string += arr[i];
          } else {
            array.push(arr[i]);
          }
        } else {
          var interp = arr[i], interp = interp.process(model, ctx, el, ctr, name, type, node);
          if (null != interp) {
            if ('object' === typeof interp && null == array) {
              array = [ string ];
            }
            if (null == array) {
              string += interp;
            } else {
              array.push(interp);
            }
          }
        }
        even = !even;
      }
      return null == array ? string : array;
    }
    function _cursor_propertyAccessorEnd(str, i, imax) {
      var c;
      while (i < imax) {
        c = str.charCodeAt(i);
        if (36 === c || 95 === c || 46 === c) {
          // $ _ .
          i++;
          continue;
        }
        if (48 <= c && c <= 57 || // 0-9
        65 <= c && c <= 90 || // A-Z
        97 <= c && c <= 122) {
          // a-z
          i++;
          continue;
        }
        break;
      }
      return i;
    }
    var rgx_UTIL = /^\s*(\w+):/;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_interpolation === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_interpolation) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_interpolation, module.exports);
    } else {
      _ref_mask_src_parser_interpolation = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_html_parser;
  (function() {
    var exports = null != _ref_mask_src_parser_html_parser ? _ref_mask_src_parser_html_parser : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.parser_parseHtmlPartial = exports.parser_parseHtml = void 0;
    var const_1 = _ref_mask_src_parser_const;
    var exports_1 = _ref_mask_src_dom_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var cursor_1 = _ref_mask_src_parser_cursor;
    var config_1 = _ref_mask_src_parser_config;
    var attributes_1 = _ref_mask_src_parser_mask_partials_attributes;
    var parser_1 = _ref_mask_src_parser_mask_parser;
    var interpolation_1 = _ref_mask_src_parser_interpolation;
    var state_closeTag = 21;
    var CDATA = '[CDATA[';
    var DOCTYPE = 'DOCTYPE';
    /**
 * Parse **Html** template to the AST tree
 * @param {string} template - Html Template
 * @returns {MaskNode}
 * @memberOf mask
 * @method parseHtml
 */
    function parser_parseHtml(str) {
      str = parser_parseHtmlPartial(str, 0, false);
      return str[0];
    }
    exports.parser_parseHtml = parser_parseHtml;
    function parser_parseHtmlPartial(str, index, exitEarly) {
      var current = new exports_1.Dom.HtmlFragment();
      var fragment = current;
      var state = const_1.go_tag;
      var i = index;
      var imax = str.length;
      var token;
      var c; // charCode
      var start;
      while (i <= imax) {
        if (state === const_1.state_literal && current === fragment && true === exitEarly) {
          return [ fragment, i, 0 ];
        }
        if (state === const_1.state_attr) {
          i = (0, attributes_1.parser_parseAttrObject)(str, i, imax, current.attr);
          if (i === imax) {
            break;
          }
          handleNodeAttributes(current);
          switch (char_(str, i)) {
           case 47:
            // /
            current = current.parent;
            i = until_(str, i, imax, 62);
            break;

           case 62:
            // >
            if (1 === SINGLE_TAGS[current.tagName.toLowerCase()]) {
              current = current.parent;
            }
            break;
          }
          i++;
          var tagName = current.tagName;
          if ('mask' === tagName || 1 === config_1.parser_cfg_ContentTags[tagName]) {
            var _a = HtmlTagExtract.getContent(str, i, tagName), txtContent = _a[0], _a = _a[1];
            i = _a;
            if ('mask' === tagName) {
              current.parent.nodes.pop();
              current = current.parent;
              _a = (0, parser_1.parser_parse)(txtContent);
              if (_a.type !== exports_1.Dom.FRAGMENT) {
                tagName = new exports_1.Dom.Fragment();
                tagName.appendChild(_a);
                _a = tagName;
              }
              current.appendChild(_a);
            } else {
              current.appendChild(new exports_1.Dom.TextNode(txtContent));
              current = current.parent;
            }
          }
          state = const_1.state_literal;
          continue;
        }
        c = char_(str, i);
        if (60 === c) {
          //<
          c = char_(str, ++i);
          if (33 /*!*/ === c) {
            if (45 === char_(str, i + 1) && 45 === char_(str, i + 2)) {
              //-- COMMENT
              i = str.indexOf('--\x3e', i + 3) + 3;
              if (2 === i) {
                i = imax;
              }
              state = const_1.state_literal;
              continue;
            }
            if (str.substring(i + 1, i + 1 + CDATA.length).toUpperCase() === CDATA) {
              // CDATA
              start = i + 1 + CDATA.length;
              i = str.indexOf(']]>', start);
              if (-1 === i) {
                i = imax;
              }
              current.appendChild(new exports_1.Dom.TextNode(str.substring(start, i)));
              i += 3;
              state = const_1.state_literal;
              continue;
            }
            if (str.substring(i + 1, i + 1 + DOCTYPE.length).toUpperCase() === DOCTYPE) {
              // DOCTYPE
              tagName = new exports_1.Dom.Node('!' + DOCTYPE, current);
              tagName.attr.html = 'html';
              current.appendChild(tagName);
              i = until_(str, i, imax, 62) + 1;
              state = const_1.state_literal;
              continue;
            }
          }
          if (36 === c || 95 === c || 58 === c || 43 === c || 47 === c || 65 <= c && c <= 90 || 97 <= c && c <= 122) {
            // $_:+/ A-Z a-z
            if (47 /*/*/ === c) {
              state = state_closeTag;
              i++;
              i = (0, cursor_1.cursor_skipWhitespace)(str, i, imax);
            }
            start = i;
            i = (0, cursor_1.cursor_tokenEnd)(str, i + 1, imax);
            token = str.substring(start, i);
            if (state === state_closeTag) {
              current = tag_Close(current, token.toLowerCase());
              state = const_1.state_literal;
              i = until_(str, i, imax, 62 /*>*/);
              i++;
              continue;
            }
            // open tag
            current = tag_Open(token, current);
            state = const_1.state_attr;
            continue;
          }
          i--;
        }
        // LITERAL
        start = i;
        token = '';
        while (i <= imax) {
          c = char_(str, i);
          if (60 /*<*/ === c) {
            // MAYBE NODE
            c = char_(str, i + 1);
            if (36 === c || 95 === c || 58 === c || 43 === c || 47 === c || 33 === c) {
              // $_:+/!
              break;
            }
            if (65 <= c && c <= 90 || // A-Z
            97 <= c && c <= 122) {
              // a-z
              break;
            }
          }
          if (38 /*&*/ === c) {
            // ENTITY
            var Char = null;
            var ent = null;
            ent = unicode_(str, i + 1, imax);
            if (null != ent) {
              Char = unicode_toChar(ent);
            } else {
              ent = entity_(str, i + 1, imax);
              if (null != ent) {
                Char = entity_toChar(ent);
              }
            }
            if (null != Char) {
              token += str.substring(start, i) + Char;
              i = i + ent.length + 1 /*;*/;
              start = i + 1;
            }
          }
          i++;
        }
        token += str.substring(start, i);
        if ('' !== token) {
          _a = (0, interpolation_1.parser_ensureTemplateFunction)(token);
          current.appendChild(new exports_1.Dom.TextNode(_a, current));
        }
      }
      index = fragment.nodes;
      index = null != index && 1 === index.length ? index[0] : fragment;
      return [ index, imax, 0 ];
    }
    exports.parser_parseHtmlPartial = parser_parseHtmlPartial;
    function char_(str, i) {
      return str.charCodeAt(i);
    }
    function until_(str, i, imax, c) {
      for (;i < imax; i++) {
        if (c === char_(str, i)) {
          return i;
        }
      }
      return i;
    }
    function unicode_(str, i, imax) {
      var lim = 7, c = char_(str, i);
      if (35 /*#*/ !== c) {
        return null;
      }
      var start = i + 1;
      while (++i < imax) {
        if (0 === --lim) {
          return null;
        }
        c = char_(str, i);
        if (48 <= c && c <= 57 /*0-9*/) {
          continue;
        }
        if (65 <= c && c <= 70 /*A-F*/) {
          continue;
        }
        if (120 /*x*/ === c) {
          continue;
        }
        if (59 /*;*/ === c) {
          return str.substring(start, i);
        }
        break;
      }
      return null;
    }
    function unicode_toChar(unicode) {
      var num = Number('0' + unicode);
      if (num !== num) {
        (0, reporters_1.parser_warn)('Invalid Unicode Char', unicode);
        return '';
      }
      return String.fromCharCode(num);
    }
    function entity_(str, i, imax) {
      var lim = 10, start = i;
      for (;i < imax; i++, lim--) {
        if (0 === lim) {
          return null;
        }
        var c = char_(str, i);
        if (59 /*;*/ === c) {
          break;
        }
        if (48 <= c && c <= 57 || // 0-9
        65 <= c && c <= 90 || // A-Z
        97 <= c && c <= 122) {
          // a-z
          i++;
          continue;
        }
        return null;
      }
      return str.substring(start, i);
    }
    var entity_toChar = function() {
      //#if (NODE)
      var HtmlEntities;
      return function(ent) {
        if (null == HtmlEntities) {
          HtmlEntities = require('./html_entities.js');
        }
        return HtmlEntities[ent];
      };
      //#endif
    }();
    var SINGLE_TAGS = {
      area: 1,
      base: 1,
      br: 1,
      col: 1,
      embed: 1,
      hr: 1,
      img: 1,
      input: 1,
      keygen: 1,
      link: 1,
      menuitem: 1,
      meta: 1,
      param: 1,
      source: 1,
      track: 1,
      wbr: 1,
      '!doctype': 1
    };
    var IMPLIES_CLOSE;
    (function() {
      var formTags = {
        input: 1,
        option: 1,
        optgroup: 1,
        select: 1,
        button: 1,
        datalist: 1,
        textarea: 1
      };
      IMPLIES_CLOSE = {
        tr: {
          tr: 1,
          th: 1,
          td: 1
        },
        th: {
          th: 1
        },
        td: {
          thead: 1,
          td: 1
        },
        body: {
          head: 1,
          link: 1,
          script: 1
        },
        li: {
          li: 1
        },
        p: {
          p: 1
        },
        h1: {
          p: 1
        },
        h2: {
          p: 1
        },
        h3: {
          p: 1
        },
        h4: {
          p: 1
        },
        h5: {
          p: 1
        },
        h6: {
          p: 1
        },
        select: formTags,
        input: formTags,
        output: formTags,
        button: formTags,
        datalist: formTags,
        textarea: formTags,
        option: {
          option: 1
        },
        optgroup: {
          optgroup: 1
        }
      };
    })();
    function tag_Close(current, name) {
      if (1 === SINGLE_TAGS[name]) {
        // Wenn parsing the start of a single tag we do not create a leaf,
        // sothat all nodes after the single node are added as siblings, not children. (HTML spec!)
        // In case we found a closing tag for a single node
        // move the nodes inside that single node.
        var nodes = current.nodes;
        if ((null === nodes || void 0 === nodes ? void 0 : nodes.length) > 0) {
          var i = nodes.length;
          while (--i > -1) {
            if (nodes[i].tagName !== name) {
              continue;
            }
            nodes[i].nodes = nodes.splice(i + 1);
            break;
          }
        }
        // donothing
        return current;
      }
      var x = current;
      while (null != x) {
        if (null != x.tagName && x.tagName.toLowerCase() === name) {
          break;
        }
        x = x.parent;
      }
      if (null == x) {
        (0, reporters_1.parser_warn)('Unmatched closing tag', name);
        return current;
      }
      return x.parent || x;
    }
    function tag_Open(name, current) {
      var node = current;
      var TAGS = IMPLIES_CLOSE[name];
      if (null != TAGS) {
        while (null != node && null != node.tagName && 1 === TAGS[node.tagName.toLowerCase()]) {
          node = node.parent;
        }
      }
      current = new exports_1.Dom.Node(name, node);
      node.appendChild(current);
      return current;
    }
    function handleNodeAttributes(node) {
      var key, val, obj = node.attr;
      for (key in obj) {
        val = obj[key];
        if (null != val && val !== key) {
          obj[key] = (0, interpolation_1.parser_ensureTemplateFunction)(val);
        }
      }
      if (null != obj.expression) {
        node.expression = obj.expression;
        node.type = exports_1.Dom.STATEMENT;
      }
    }
    // function _appendMany(node, nodes) {
    //     arr_each(nodes, function(x){
    //         node.appendChild(x)
    //     });
    // }
    var HtmlTagExtract;
    (function(HtmlTagExtract) {
      function getContent(str, i, name) {
        var start = i, end = i;
        name = rgxGet(name, i).exec(str);
        if (null == name) {
          end = i = str.length;
        } else {
          end = name.index;
          i = end + name[0].length;
        }
        return [ str.substring(start, end), i ];
      }
      HtmlTagExtract.getContent = getContent;
      var rgx = {};
      var rgxGet = function(name, i) {
        var r = rgx[name];
        if (null == r) {
          r = rgx[name] = new RegExp('<\\s*/' + name + '[^>]*>', 'gi');
        }
        r.lastIndex = i;
        return r;
      };
    })(HtmlTagExtract = HtmlTagExtract || {});
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_html_parser === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_html_parser) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_html_parser, module.exports);
    } else {
      _ref_mask_src_parser_html_parser = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_mask_parser;
  (function() {
    var exports = null != _ref_mask_src_parser_mask_parser ? _ref_mask_src_parser_mask_parser : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.parser_parse = void 0;
    var scope_vars_1 = _ref_mask_src_scope_vars;
    var exports_1 = _ref_mask_src_dom_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_2 = _ref_mask_src_custom_exports;
    var cursor_1 = _ref_mask_src_parser_cursor;
    var parser_1 = _ref_mask_src_parser_html_parser;
    var const_1 = _ref_mask_src_parser_const;
    var interpolation_1 = _ref_mask_src_parser_interpolation;
    /**
 * Parse **Mask** template to the AST tree
 * @param {string} template - Mask Template
 * @returns {MaskNode}
 * @memberOf mask
 * @method parse
 */
    function parser_parse(template, filename) {
      var classNames, token, tokenIndex, key, value, c, // charCode
      start, sourceIndex, current = new exports_1.Dom.Fragment(), fragment = current, state = const_1.go_tag, last = const_1.state_tag, index = 0, length = template.length;
      fragment.source = template;
      fragment.filename = filename;
      outer: while (true) {
        while (index < length && (c = template.charCodeAt(index)) < 33) {
          index++;
        }
        // COMMENTS
        if (47 === c) {
          // /
          nextC = template.charCodeAt(index + 1);
          if (47 === nextC) {
            // inline (/)
            index++;
            while (10 !== c && 13 !== c && index < length) {
              // goto newline
              c = template.charCodeAt(++index);
            }
            continue;
          }
          if (42 === nextC) {
            // block (*)
            index = template.indexOf('*/', index + 2) + 2;
            if (1 === index) {
              // if DEBUG
              (0, reporters_1.parser_warn)('Block comment has no ending', template, index);
              // endif
              index = length;
            }
            continue;
          }
        }
        if (last === const_1.state_attr) {
          if (null != classNames) {
            current.attr['class'] = (0, interpolation_1.parser_ensureTemplateFunction)(classNames);
            classNames = null;
          }
          if (null != key) {
            current.attr[key] = key;
            key = null;
            token = null;
          }
        }
        if (null != token) {
          if (state === const_1.state_attr) {
            if (null == key) {
              key = token;
            } else {
              value = token;
            }
            if (null != key && null != value) {
              if ('class' !== key) {
                current.attr[key] = value;
              } else {
                classNames = null == classNames ? value : classNames + ' ' + value;
              }
              key = null;
              value = null;
            }
          } else if (state === const_1.go_propVal) {
            if (null == key || null == token) {
              (0, reporters_1.parser_warn)('Unexpected property value state', template, index, c, state);
            }
            if (null == current.props) {
              current.props = {};
            }
            current.props[key] = token;
            state = const_1.state_attr;
            last = const_1.go_propVal;
            token = null;
            key = null;
            continue;
          } else if (last === const_1.state_tag) {
            //next = custom_Tags[token] != null
            //	? new Component(token, current, custom_Tags[token])
            //	: new Node(token, current);
            var parser = exports_2.custom_Parsers[token];
            if (null != parser) {
              // Parser should return: [ parsedNode, nextIndex, nextState ]
              var tuple = parser(template, index, length, current);
              var node = tuple[0], parser = tuple[2];
              index = tuple[1];
              state = 0 === parser ? const_1.go_tag : parser;
              if (null != node) {
                node.sourceIndex = tokenIndex;
                var transform = exports_2.custom_Parsers_Transform[token];
                if (null != transform) {
                  var transform = transform(current, node);
                  if (null != transform) {
                    // make the current node single, to exit this and the transformed node on close
                    current.__single = true;
                    current = transform;
                  }
                }
                current.appendChild(node);
                if (0 !== parser) {
                  current = node;
                } else if (true === current.__single) {
                  do {
                    current = current.parent;
                  } while (null != current && null != current.__single);
                }
              }
              token = null;
              continue;
            }
            transform = new exports_1.Dom.Node(token, current);
            transform.sourceIndex = tokenIndex;
            current.appendChild(transform);
            current = transform;
            state = const_1.state_attr;
          } else if (last === const_1.state_literal) {
            transform = new exports_1.Dom.TextNode(token, current);
            transform.sourceIndex = sourceIndex;
            current.appendChild(transform);
            if (true === current.__single) {
              do {
                current = current.parent;
              } while (null != current && null != current.__single);
            }
            state = const_1.go_tag;
          }
          token = null;
        }
        if (index >= length) {
          if (state === const_1.state_attr) {
            if (null != classNames) {
              current.attr['class'] = (0, interpolation_1.parser_ensureTemplateFunction)(classNames);
            }
            if (null != key) {
              current.attr[key] = key;
            }
          }
          c = null;
          break;
        }
        if (state === const_1.go_up) {
          current = current.parent;
          while (null != current && null != current.__single) {
            current = current.parent;
          }
          if (null == current) {
            current = fragment;
            (0, reporters_1.parser_warn)('Unexpected tag closing', template, (0, 
            cursor_1.cursor_skipWhitespaceBack)(template, index - 1));
          }
          state = const_1.go_tag;
        }
        switch (c) {
         case 60 /*<*/:
          if (state !== const_1.go_tag) {
            break;
          }
          tuple = (0, parser_1.parser_parseHtmlPartial)(template, index, true);
          node = tuple[0];
          node.sourceIndex = index;
          index = tuple[1];
          state = const_1.go_tag;
          token = null;
          current.appendChild(node);
          if (true === current.__single) {
            do {
              current = current.parent;
            } while (null != current && null != current.__single);
          }
          continue;

         case 123:
          // {
          last = state;
          state = const_1.go_tag;
          index++;
          continue;

         case 62:
          // >
          last = state;
          state = const_1.go_tag;
          index++;
          current.__single = true;
          continue;

         case 59:
          // ;
          if (null != current.nodes) {
            // skip ; , when node is not a single tag (else goto 125)
            index++;
            continue;
          }
          /* falls through */

         case 125:
          // ;}
          if (125 === c && (state === const_1.state_tag || state === const_1.state_attr)) {
            // single tag was not closed with `;` but closing parent
            index--;
          }
          index++;
          last = state;
          state = const_1.go_up;
          continue;

         case 39:
         case 34:
          // '"
          // Literal - could be as textnode or attribute value
          if (state === const_1.go_attrVal) {
            state = const_1.state_attr;
          } else if (state !== const_1.go_propVal) {
            last = state = const_1.state_literal;
          }
          index++;
          var isEscaped = false, isUnescapedBlock = false, _char = 39 === c ? '\'' : '"';
          sourceIndex = start = index;
          while ((index = template.indexOf(_char, index)) > -1) {
            if (92 /*'\\'*/ !== template.charCodeAt(index - 1)) {
              break;
            }
            isEscaped = true;
            index++;
          }
          if (-1 === index) {
            (0, reporters_1.parser_warn)('Literal has no ending', template, start - 1);
            index = length;
          }
          if (index === start) {
            nextC = template.charCodeAt(index + 1);
            if (124 === nextC || nextC === c) {
              // | (obsolete) or triple quote
              isUnescapedBlock = true;
              start = index + 2;
              index = template.indexOf((124 === nextC ? '|' : _char) + _char + _char, start);
              if (-1 === index) {
                index = length;
              }
            }
          }
          tokenIndex = start;
          token = template.substring(start, index);
          if (true === isEscaped) {
            token = token.replace(scope_vars_1.__rgxEscapedChar[_char], _char);
          }
          if (state !== const_1.state_attr || 'class' !== key) {
            token = (0, interpolation_1.parser_ensureTemplateFunction)(token);
          }
          index += isUnescapedBlock ? 3 : 1;
          continue;
        }
        if (state === const_1.go_tag) {
          last = const_1.state_tag;
          state = const_1.state_tag;
          if (46 /* . */ === c || 35 /* # */ === c) {
            tokenIndex = index;
            token = 'div';
            continue;
          }
          if (91 /*[*/ === c) {
            start = index + 1;
            index = (0, cursor_1.cursor_groupEnd)(template, start, length, c, 93 /* ] */);
            if (0 === index) {
              (0, reporters_1.parser_warn)('Attribute not closed', template, start - 1);
              index = length;
              continue;
            }
            parser = template.substring(start, index);
            var deco = new exports_1.Dom.DecoratorNode(parser, current);
            deco.sourceIndex = start;
            current.appendChild(deco);
            index = (0, cursor_1.cursor_skipWhitespace)(template, index + 1, length);
            if (index !== length) {
              c = template.charCodeAt(index);
              if (46 === c || 35 === c || 91 === c || c >= 65 && c <= 122 || 36 === c || 95 === c) {
                // .#[A-z$_
                last = state = const_1.go_tag;
                continue;
              }
              (0, reporters_1.parser_error)('Unexpected char after decorator. Tag is expected', template, index, c, state);
              break;
            }
          }
        } else if (state === const_1.state_attr) {
          if (46 === c) {
            // .
            index++;
            key = 'class';
            state = const_1.go_attrHeadVal;
          } else if (35 === c) {
            // #
            index++;
            key = 'id';
            state = const_1.go_attrHeadVal;
          } else if (61 === c) {
            // =;
            index++;
            state = const_1.go_attrVal;
            if (last === const_1.state_tag && null == key) {
              (0, reporters_1.parser_warn)('Unexpected tag assignment', template, index, c, state);
            }
            continue;
          } else if (40 === c) {
            // (
            start = 1 + index;
            index = 1 + (0, cursor_1.cursor_groupEnd)(template, start, length, c, 41 /* ) */);
            current.expression = template.substring(start, index - 1);
            current.type = exports_1.Dom.STATEMENT;
            continue;
          } else if (91 /*[*/ === c) {
            ++index;
            key = token = null;
            state = const_1.state_prop;
            continue;
          } else if (null != key) {
            tokenIndex = index;
            token = key;
            continue;
          }
        }
        if (state === const_1.go_attrVal || state === const_1.go_attrHeadVal) {
          last = state;
          state = const_1.state_attr;
        }
        /* TOKEN */
        if (state === const_1.state_prop) {
          tokenIndex = start = index;
          while (index < length) {
            index = (0, cursor_1.cursor_refEnd)(template, index, length);
            if (index === start) {
              (0, reporters_1.parser_error)('Invalid char in property', template, index, c, state);
              break outer;
            }
            c = template.charCodeAt(index);
            if (46 /*.*/ === c) {
              start = ++index;
              continue;
            }
            key = template.substring(tokenIndex, index);
            if (c <= 32) {
              index = (0, cursor_1.cursor_skipWhitespace)(template, index, length);
              c = template.charCodeAt(index);
            }
            if (93 /*]*/ !== c) {
              (0, reporters_1.parser_error)('Property not closed', template, index, c, state);
              break outer;
            }
            c = template.charCodeAt(++index);
            if (c <= 32) {
              index = (0, cursor_1.cursor_skipWhitespace)(template, index, length);
              c = template.charCodeAt(index);
            }
            if (61 /*=*/ !== c) {
              (0, reporters_1.parser_error)('Property should have assign char', template, index, c, state);
              break outer;
            }
            index++;
            state = const_1.go_propVal;
            continue outer;
          }
        }
        var isInterpolated = false;
        start = index;
        while (index < length) {
          c = template.charCodeAt(index);
          if (c === const_1.interp_code_START) {
            var nextC = template.charCodeAt(index + 1);
            if (nextC === const_1.interp_code_OPEN) {
              isInterpolated = true;
              index = 1 + (0, cursor_1.cursor_groupEnd)(template, index + 2, length, const_1.interp_code_OPEN, const_1.interp_code_CLOSE);
              c = template.charCodeAt(index);
            } else if (nextC >= 65 && nextC <= 122 || 36 === nextC || 95 === nextC) {
              //A-z$_
              isInterpolated = true;
            }
          }
          if (64 === c && 91 === template.charCodeAt(index + 1)) {
            //@[
            index = (0, cursor_1.cursor_groupEnd)(template, index + 2, length, 91, 93) + 1;
            c = template.charCodeAt(index);
          }
          // if DEBUG
          if (39 === c || 34 === c || 47 === c || 60 === c || 44 === c) {
            // '"/<,
            (0, reporters_1.parser_error)('Unexpected char', template, index, c, state);
            break outer;
          }
          // endif
          if (last !== const_1.go_attrVal && (46 === c || 35 === c)) {
            // .#
            // break on .# only if parsing attribute head values
            break;
          }
          if (c < 33 || 61 === c || 62 === c || 59 === c || 40 === c || 123 === c || 125 === c) {
            // =>;({}
            break;
          }
          index++;
        }
        token = template.substring(start, index);
        tokenIndex = start;
        if ('' === token) {
          (0, reporters_1.parser_warn)('String expected', template, index, c, state);
          break;
        }
        if (true === isInterpolated) {
          if (state === const_1.state_tag) {
            (0, reporters_1.parser_warn)('Invalid interpolation (in tag name)', template, index, token, state);
            break;
          }
          if (state === const_1.state_attr) {
            if ('id' === key || last === const_1.go_attrVal) {
              token = (0, interpolation_1.parser_ensureTemplateFunction)(token);
            } else if ('class' !== key) {
              // interpolate class later
              (0, reporters_1.parser_warn)('Invalid interpolation (in attr name)', template, index, token, state);
              break;
            }
          }
        }
      }
      if (c !== c) {
        (0, reporters_1.parser_warn)('IndexOverflow', template, index, c, state);
      }
      // if DEBUG
      filename = current.parent;
      if (null != filename && filename !== fragment && true !== filename.__single && null != current.nodes && 'imports' !== filename.tagName) {
        (0, reporters_1.parser_warn)('Tag was not closed: ' + current.tagName, template);
      }
      // endif
      filename = fragment.nodes;
      return null != filename && 1 === filename.length ? filename[0] : fragment;
    }
    exports.parser_parse = parser_parse;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_mask_parser === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_mask_parser) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_mask_parser, module.exports);
    } else {
      _ref_mask_src_parser_mask_parser = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_mask_partials_literal;
  (function() {
    var exports = null != _ref_mask_src_parser_mask_partials_literal ? _ref_mask_src_parser_mask_partials_literal : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.parser_parseLiteral = void 0;
    var cursor_1 = _ref_mask_src_parser_cursor;
    var reporters_1 = _ref_mask_src_util_reporters;
    var scope_vars_1 = _ref_mask_src_scope_vars;
    function parser_parseLiteral(str, start, imax) {
      var i = (0, cursor_1.cursor_skipWhitespace)(str, start, imax);
      var c = str.charCodeAt(i);
      if (34 !== c && 39 !== c) {
        // "'
        (0, reporters_1.parser_error)('A quote is expected', str, i);
        return null;
      }
      var isEscaped = false, isUnescapedBlock = false, _char = 39 === c ? '\'' : '"';
      start = ++i;
      while ((i = str.indexOf(_char, i)) > -1) {
        if (92 /*'\\'*/ !== str.charCodeAt(i - 1)) {
          break;
        }
        isEscaped = true;
        i++;
      }
      if (-1 === i) {
        (0, reporters_1.parser_warn)('Literal has no ending', str, start - 1);
        i = imax;
      }
      if (i === start) {
        var nextC = str.charCodeAt(i + 1);
        if (nextC === c) {
          isUnescapedBlock = true;
          start = i + 2;
          i = str.indexOf(_char + _char + _char, start);
          if (-1 === i) {
            i = imax;
          }
        }
      }
      nextC = str.substring(start, i);
      if (true === isEscaped) {
        nextC = nextC.replace(scope_vars_1.__rgxEscapedChar[_char], _char);
      }
      i += isUnescapedBlock ? 3 : 1;
      return [ nextC, i ];
    }
    exports.parser_parseLiteral = parser_parseLiteral;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_mask_partials_literal === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_mask_partials_literal) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_mask_partials_literal, module.exports);
    } else {
      _ref_mask_src_parser_mask_partials_literal = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_utils;
  (function() {
    var exports = null != _ref_mask_src_parser_utils ? _ref_mask_src_parser_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.parser_cleanObject = void 0;
    var is_1 = _ref_utils_src_is;
    function parser_cleanObject(mix) {
      if ((0, is_1.is_Array)(mix)) {
        for (var i = 0; i < mix.length; i++) {
          parser_cleanObject(mix[i]);
        }
        return mix;
      }
      delete mix.parent;
      delete mix.__single;
      if (null != mix.nodes) {
        parser_cleanObject(mix.nodes);
      }
      return mix;
    }
    exports.parser_cleanObject = parser_cleanObject;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_utils, module.exports);
    } else {
      _ref_mask_src_parser_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_object_consume;
  (function() {
    var exports = null != _ref_mask_src_parser_object_consume ? _ref_mask_src_parser_object_consume : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._consume = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    function _consume(tokens, str, index, length, out, isOptional) {
      var index_ = index;
      var token, imax = tokens.length, i = 0;
      for (;i < imax; i++) {
        token = tokens[i];
        start = index;
        index = token.consume(str, index, length, out);
        if (index === start) {
          if (true === token.optional) {
            continue;
          }
          if (true === isOptional) {
            return index_;
          }
          // global require is also not optional: throw error
          var start = 'Token of type `' + token.name + '`';
          if (token.token) {
            start += ' Did you mean: `' + token.token + '`?';
          }
          (0, reporters_1.parser_error)(start, str, index);
          return index_;
        }
      }
      return index;
    }
    exports._consume = _consume;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_object_consume === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_object_consume) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_object_consume, module.exports);
    } else {
      _ref_mask_src_parser_object_consume = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_object_tokens;
  (function() {
    var exports = null != _ref_mask_src_parser_object_tokens ? _ref_mask_src_parser_object_tokens : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.token_OrGroup = exports.token_Group = exports.token_Punctuation = exports.token_Array = exports.token_String = exports.token_CustomParser = exports.token_CustomVar = exports.token_ExtendedVar = exports.token_Var = exports.token_Const = exports.token_Whitespace = void 0;
    var cursor_1 = _ref_mask_src_parser_cursor;
    var consume_1 = _ref_mask_src_parser_object_consume;
    var class_1 = _ref_utils_src_class;
    exports.token_Whitespace = create('Whitespace', {
      constructor: function(optional) {
        this.optional = optional;
      },
      consume: cursor_1.cursor_skipWhitespace
    });
    // To match the string and continue, otherwise stops current consumer
    // foo
    exports.token_Const = create('Const', {
      constructor: function(str) {
        this.token = str;
      },
      consume: function(str, i, imax) {
        var end = i + this.token.length;
        str = str.substring(i, end);
        return str === this.token ? end : i;
      }
    });
    // consume string (JS syntax) to the variable
    // $foo
    exports.token_Var = create('Var', {
      constructor: function(name) {
        this.token = name;
        this.setter = generateSetter(name);
      },
      consume: function(str, i, imax, out) {
        imax = (0, cursor_1.cursor_tokenEnd)(str, i, imax);
        if (imax === i) {
          return i;
        }
        this.setter(out, str.substring(i, imax));
        return imax;
      }
    });
    /* consume string to the variable
 * - by Regexp
 *     $$foo(\w+)
 * - rest of the string
 *     $$foo(*)
 * - inside a group of chars `()` `[]` `""` `''`, etc
 *     $$foo(*())
 */
    exports.token_ExtendedVar = create('ExtendedVar', {
      constructor: function(name, rgx) {
        this.token = rgx;
        this.setter = generateSetter(name);
        if (42 === rgx.charCodeAt(0)) {
          // *
          if ('*' === rgx) {
            this.consume = this.consumeAll;
            return;
          }
          if (3 === rgx.length) {
            this.consume = this.consumeGroup;
            return;
          }
          throw Error('`*` consumer expected group chars to parse');
        }
        this.rgx = new RegExp(rgx, 'g');
      },
      consumeAll: function(str, i, imax, out) {
        this.setter(out, str.substring(i));
        return imax;
      },
      consumeGroup: function(str, i, imax, out) {
        var start = this.token.charCodeAt(1), end = this.token.charCodeAt(2);
        if (str.charCodeAt(i) !== start) {
          return exports.token_Var.prototype.consume.call(this, str, i, imax, out);
        }
        end = (0, cursor_1.cursor_groupEnd)(str, ++i, imax, start, end);
        if (end === i) {
          return i;
        }
        this.setter(out, str.substring(i, end));
        return end + 1;
      },
      consume: function(str, i, imax, out) {
        this.rgx.lastIndex = i;
        // @TODO: use sticky
        str = this.rgx.exec(str);
        if (null == str || str.index !== i) {
          return i;
        }
        str = str[0];
        this.setter(out, str);
        return i + str.length;
      }
    });
    // Consume string with custom Stop/Continue Function to the variable
    exports.token_CustomVar = create('CustomVar', {
      constructor: function(name, consumer) {
        this.fn = Consumers[consumer];
        this.token = name;
        this.setter = generateSetter(name);
      },
      consume: function(str, i, imax, out) {
        var start = i;
        for (;i < imax; i++) {
          if (false === this.fn(str.charCodeAt(i))) {
            break;
          }
        }
        if (i === start) {
          return i;
        }
        this.setter(out, str.substring(start, i));
        return i;
      }
    });
    var Consumers = {
      accessor: function(c) {
        if (true === Consumers.token(c)) {
          return true;
        }
        if (58 === c || 46 === c) {
          // : .
          return true;
        }
        return false;
      },
      token: function(c) {
        if (36 === c || 95 === c) {
          // $ _
          return true;
        }
        if (48 <= c && c <= 57 || // 0-9
        65 <= c && c <= 90 || // A-Z
        97 <= c && c <= 122) {
          // a-z
          return true;
        }
        return false;
      }
    };
    // Consume string with custom Stop/Continue Function to the variable
    exports.token_CustomParser = create('CustomParser', {
      constructor: function(name, param) {
        return new Parsers[name](param);
      }
    });
    var Parsers = {
      flags: (0, class_1.class_create)({
        name: 'Flags',
        token: '',
        // Index Map { key: Array<Min,Max> }
        flags: null,
        optional: true,
        constructor: function(param, isOptional) {
          this.optional = isOptional;
          this.flags = {};
          var parts = param.replace(/\s+/g, '').split(';'), imax = parts.length, i = -1;
          while (++i < imax) {
            var flag = parts[i], index = flag.indexOf(':'), name = flag.substring(0, index), flag = flag.substring(index + 1);
            index = '|' + flag + '|';
            flag = this.token.length;
            this.flags[name] = [ flag, flag + index.length ];
            this.token += index;
          }
        },
        consume: function(str, i_, imax, out) {
          var hasFlag = false;
          var i = i_;
          while (i < imax) {
            i = (0, cursor_1.cursor_skipWhitespace)(str, i, imax);
            var end = (0, cursor_1.cursor_tokenEnd)(str, i, imax);
            if (end === i) {
              break;
            }
            var token = str.substring(i, end);
            var idx = this.token.indexOf('|' + token + '|') + 1;
            if (0 === idx) {
              break;
            }
            for (var key in this.flags) {
              var range = this.flags[key];
              var min = range[0];
              if (min > idx) {
                continue;
              }
              min = range[1];
              if (min < idx) {
                continue;
              }
              out[key] = token;
              hasFlag = true;
              break;
            }
            i = end;
          }
          return hasFlag ? i : i_;
        }
      })
    };
    exports.token_String = create('String', {
      constructor: function(tokens) {
        this.tokens = tokens;
      },
      consume: function(str, i, imax, out) {
        var c = str.charCodeAt(i);
        if (34 !== c && 39 !== c) {
          return i;
        }
        imax = (0, cursor_1.cursor_quoteEnd)(str, i + 1, imax, 34 === c ? '"' : '\'');
        if (1 === this.tokens.length) {
          c = this.tokens[0];
          out[c.token] = str.substring(i + 1, imax);
        } else {
          throw Error('Not implemented');
        }
        return ++imax;
      }
    });
    exports.token_Array = create('Array', {
      constructor: function(name, tokens, delim, optional) {
        this.token = name;
        this.delim = delim;
        this.tokens = tokens;
        this.optional = optional;
      },
      consume: function(str, i, imax, out) {
        var obj, end, arr;
        while (true) {
          obj = {};
          end = (0, consume_1._consume)(this.tokens, str, i, imax, obj, this.optional);
          if (i === end) {
            if (null == arr) {
              return i;
            }
            throw Error('Next item expected');
          }
          if (null == arr) {
            arr = [];
          }
          arr.push(obj);
          i = end;
          end = this.delim.consume(str, i, imax);
          if (i === end) {
            break;
          }
          i = end;
        }
        out[this.token] = arr;
        return i;
      }
    });
    exports.token_Punctuation = create('Punc', {
      constructor: function(str) {
        this.before = new exports.token_Whitespace(true);
        this.delim = new exports.token_Const(str);
        this.after = new exports.token_Whitespace(true);
        this.token = str;
      },
      consume: function(str, i, imax) {
        var start = this.before.consume(str, i, imax);
        var end = this.delim.consume(str, start, imax);
        if (start === end) {
          return i;
        }
        return this.after.consume(str, end, imax);
      }
    });
    exports.token_Group = create('Group', {
      constructor: function(tokens, optional) {
        this.optional = optional;
        this.tokens = tokens;
      },
      consume: function(str, i, imax, out) {
        var start = (0, cursor_1.cursor_skipWhitespace)(str, i, imax);
        str = (0, consume_1._consume)(this.tokens, str, start, imax, out, this.optional);
        return start === str ? i : str;
      }
    });
    exports.token_OrGroup = create('OrGroup', {
      constructor: function(groups) {
        this.groups = groups, this.length = groups.length;
      },
      consume: function(str, i, imax, out) {
        var start = i, j = 0;
        for (;j < this.length; j++) {
          i = this.groups[j].consume(str, i, imax, out);
          if (i !== start) {
            return i;
          }
        }
        return i;
      }
    });
    function generateSetter(name) {
      return new Function('obj', 'val', 'obj.' + name + '= val;');
    }
    function create(name, Proto) {
      var Ctor = Proto.constructor;
      Proto.name = name;
      Proto.optional = false;
      Proto.token = null;
      Ctor.prototype = Proto;
      return Ctor;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_object_tokens === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_object_tokens) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_object_tokens, module.exports);
    } else {
      _ref_mask_src_parser_object_tokens = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_object_compile;
  (function() {
    var exports = null != _ref_mask_src_parser_object_compile ? _ref_mask_src_parser_object_compile : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._compile = void 0;
    var tokens_1 = _ref_mask_src_parser_object_tokens;
    var cursor_1 = _ref_mask_src_parser_cursor;
    function _compile(str, i, imax) {
      if (void 0 === i) {
        i = 0;
        imax = str.length;
      }
      var c, optional, conditional, start, tokens = [];
      outer: for (;i < imax; i++) {
        start = i;
        c = str.charCodeAt(i);
        optional = conditional = false;
        if (63 === c /* ? */) {
          optional = true;
          start = ++i;
          c = str.charCodeAt(i);
        }
        if (124 === c /* | */) {
          conditional = true;
          start = ++i;
          c = str.charCodeAt(i);
        }
        switch (c) {
         case 32 /* */:
          tokens.push(new tokens_1.token_Whitespace(optional, i));
          continue;

         case 34:
         case 39 /*'"*/:
          i = (0, cursor_1.cursor_quoteEnd)(str, i + 1, imax, 34 === c ? '"' : '\'');
          tokens.push(new tokens_1.token_String(_compile(str, start + 1, i)));
          continue;

         case 36 /*$*/:
          start = ++i;
          var isExtended = false;
          if (c === str.charCodeAt(i)) {
            isExtended = true;
            start = ++i;
          }
          i = (0, cursor_1.cursor_tokenEnd)(str, i, imax);
          var name = str.substring(start, i);
          if (false === optional && false === isExtended) {
            tokens.push(new tokens_1.token_Var(name));
            i--;
            continue;
          }
          c = str.charCodeAt(i);
          if (91 /*[*/ === c) {
            i = compileArray(name, tokens, str, i, imax, optional);
            continue;
          }
          if (40 /*(*/ === c) {
            i = compileExtendedVar(name, tokens, str, i, imax);
            continue;
          }
          if (60 /*<*/ === c) {
            i = compileCustomVar(name, tokens, str, i, imax);
            continue;
          }
          if (123 /*{*/ === c) {
            i = compileCustomParser(name, tokens, str, i, imax);
            continue;
          }
          throw_('Unexpected extended type');
          continue;

         case 40 /*(*/:
          if (true === optional || true === conditional) {
            i = compileGroup(optional, conditional, tokens, str, i, imax);
            continue;
          }
          /* fall through */

         case 44 /*,*/:
         case 41 /*)*/:
         case 91 /*[*/:
         case 93 /*]*/:
         case 123 /*{*/:
         case 125 /*}*/:
          tokens.push(new tokens_1.token_Punctuation(String.fromCharCode(c)));
          continue;
        }
        while (i < imax) {
          c = str.charCodeAt(++i);
          if (c > 32 && 34 !== c && 39 !== c && 36 !== c && 44 !== c && 63 !== c && i !== imax) {
            continue;
          }
          tokens.push(new tokens_1.token_Const(str.substring(start, i)));
          --i;
          continue outer;
        }
      }
      var x, jmax = tokens.length, j = -1, orGroup = jmax > 1;
      while (true === orGroup && ++j < jmax) {
        x = tokens[j];
        if (x instanceof tokens_1.token_Group === false || true !== x.optional) {
          orGroup = false;
        }
      }
      if (0) {
        tokens = [ new tokens_1.token_OrGroup(tokens) ];
      }
      return tokens;
    }
    exports._compile = _compile;
    function compileArray(name, tokens, str, i, imax, optional) {
      var start = ++i;
      i = (0, cursor_1.cursor_groupEnd)(str, i, imax, 91, 93);
      var innerTokens = _compile(str, start, i);
      i++;
      if (40 /*(*/ !== str.charCodeAt(i)) {
        throw_('Punctuation group expected');
      }
      start = ++i;
      i = (0, cursor_1.cursor_groupEnd)(str, i, imax, 40, 41);
      imax = str.substring(start, i);
      tokens.push(new tokens_1.token_Array(name, innerTokens, new tokens_1.token_Punctuation(imax), optional));
      return i;
    }
    function compileExtendedVar(name, tokens, str, i, imax) {
      var start = ++i;
      i = (0, cursor_1.cursor_groupEnd)(str, i, imax, 40, 41);
      tokens.push(new tokens_1.token_ExtendedVar(name, str.substring(start, i)));
      return i;
    }
    function compileCustomVar(name, tokens, str, i, imax) {
      var start = ++i;
      i = (0, cursor_1.cursor_tokenEnd)(str, i, imax);
      tokens.push(new tokens_1.token_CustomVar(name, str.substring(start, i)));
      return i;
    }
    function compileCustomParser(name, tokens, str, i, imax) {
      var start = ++i;
      i = (0, cursor_1.cursor_groupEnd)(str, i, imax, 123, 125);
      tokens.push(new tokens_1.token_CustomParser(name, str.substring(start, i)));
      return i;
    }
    function compileGroup(optional, conditional, tokens, str, i, imax) {
      var start = ++i;
      conditional = conditional ? tokens_1.token_OrGroup : tokens_1.token_Group;
      i = (0, cursor_1.cursor_groupEnd)(str, start, imax, 40, 41);
      tokens.push(new conditional(_compile(str, start, i), optional));
      return i;
    }
    function throw_(msg) {
      throw Error('Lexer pattern: ' + msg);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_object_compile === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_object_compile) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_object_compile, module.exports);
    } else {
      _ref_mask_src_parser_object_compile = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_object_ObjectLexer;
  (function() {
    var exports = null != _ref_mask_src_parser_object_ObjectLexer ? _ref_mask_src_parser_object_ObjectLexer : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.parser_ObjectLexer = void 0;
    var compile_1 = _ref_mask_src_parser_object_compile;
    var consume_1 = _ref_mask_src_parser_object_consume;
    function parser_ObjectLexer(pattern, a, b, c, d, f) {
      if (1 === arguments.length && 'string' === typeof pattern) {
        return ObjectLexer_single(pattern);
      }
      return ObjectLexer_sequance(Array.prototype.slice.call(arguments));
    }
    exports.parser_ObjectLexer = parser_ObjectLexer;
    function ObjectLexer_single(pattern) {
      var tokens = (0, compile_1._compile)(pattern);
      return function(str, i, imax, out, optional) {
        return (0, consume_1._consume)(tokens, str, i, imax, out, optional);
      };
    }
    var ObjectLexer_sequance;
    (function() {
      ObjectLexer_sequance = function ObjectLexer_sequance(args) {
        var jmax = args.length, j = -1;
        while (++j < jmax) {
          args[j] = __createConsumer(args[j]);
        }
        return function(str, i_, imax, out, optional) {
          var j = -1, i = i_;
          while (++j < jmax) {
            var start = i, x = args[j];
            i = __consume(x, str, i, imax, out, optional || x.optional);
            if (i === start && true !== x.optional) {
              return start;
            }
          }
          return i;
        };
      };
      function __consume(x, str, i, imax, out, optional) {
        switch (x.type) {
         case 'single':
          return x.consumer(str, i, imax, out, optional);

         case 'any':
          return __consumeOptionals(x.consumer, str, i, imax, out, optional);

         default:
          throw Error('Unknown sequence consumer type: ' + x.type);
        }
      }
      function __consumeOptionals(arr, str, i, imax, out, optional) {
        var start = i, jmax = arr.length, j = -1;
        while (++j < jmax) {
          i = arr[j](str, i, imax, out, true);
          if (start !== i) {
            return i;
          }
        }
        if (true !== optional) {
          // notify
          arr[0](str, start, imax, out, optional);
        }
        return start;
      }
      function __createConsumer(mix) {
        if ('string' === typeof mix) {
          return {
            type: 'single',
            optional: '?' === mix[0],
            consumer: ObjectLexer_single(mix)
          };
        }
        // else Array<string>
        var i = mix.length;
        while (--i > -1) {
          mix[i] = ObjectLexer_single(mix[i]);
        }
        return {
          type: 'any',
          consumer: mix,
          optional: false
        };
      }
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_object_ObjectLexer === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_object_ObjectLexer) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_object_ObjectLexer, module.exports);
    } else {
      _ref_mask_src_parser_object_ObjectLexer = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_mask_stringify;
  (function() {
    var exports = null != _ref_mask_src_parser_mask_stringify ? _ref_mask_src_parser_mask_stringify : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.format_Classes = exports.mask_stringifyAttr = exports.mask_stringify = void 0;
    var exports_1 = _ref_mask_src_dom_exports;
    var cursor_1 = _ref_mask_src_parser_cursor;
    var obj_1 = _ref_utils_src_obj;
    var class_1 = _ref_utils_src_class;
    var is_1 = _ref_utils_src_is;
    var parser_1 = _ref_mask_src_parser_mask_parser;
    var defaultOptions = {
      minify: true,
      indent: 4,
      indentChar: ' '
    };
    /**
 * Serialize Mask AST to the Mask string (@analog to `JSON.stringify`)
 * @param {MaskNode} node - MaskNode
 * @param {(object|number)} [opts] - Indent count option or an object with options
 * @param {number} [opts.indent=0] - Indent count, `0` for minimization
 * @param {bool} [opts.minify=true]
 * @param {bool} [opts.minimizeAttributes=true] - Remove quotes when possible
 * @returns {string}
 * @memberOf mask
 * @method stringify
 */
    function mask_stringify(input, opts) {
      if (null == input) {
        return '';
      }
      if ('string' === typeof input) {
        input = (0, parser_1.parser_parse)(input);
      }
      if (null == opts) {
        opts = (0, obj_1.obj_create)(defaultOptions);
      } else if ('number' === typeof opts) {
        var indent = opts;
        opts = (0, obj_1.obj_create)(defaultOptions);
        opts.indent = indent;
        opts.minify = 0 === indent;
      } else {
        opts = (0, obj_1.obj_extendDefaults)(opts, defaultOptions);
        if (opts.indent > 0) {
          opts.minify = false;
        }
        if (true === opts.minify) {
          opts.indent = 0;
        }
      }
      return new Stream(input, opts).toString();
    }
    exports.mask_stringify = mask_stringify;
    function mask_stringifyAttr(attr) {
      var str = '';
      for (var key in attr) {
        if (0 !== str.length) {
          str += ' ';
        }
        str += key;
        var x = getString(attr[key]);
        if (x !== key) {
          str += '=' + wrapString(x);
        }
      }
      return str;
    }
    exports.mask_stringifyAttr = mask_stringifyAttr;
    var Stream = (0, class_1.class_create)({
      string: '',
      indent: 0,
      indentStr: '',
      minify: false,
      opts: null,
      ast: null,
      constructor: function(ast, opts) {
        this.opts = opts;
        this.ast = ast;
        this.minify = opts.minify;
        this.indentStr = doindent(opts.indent, opts.indentChar);
      },
      toString: function() {
        this.process(this.ast, this);
        return this.string;
      },
      process: function(mix) {
        if (mix.type === exports_1.Dom.FRAGMENT) {
          if ('html' === mix.syntax) {
            // indent current
            this.write('');
            new HtmlStreamWriter(this).process(mix.nodes);
            return;
          }
          mix = mix.nodes;
        }
        if ((0, is_1.is_ArrayLike)(mix)) {
          var imax = mix.length, i = -1;
          while (++i < imax) {
            if (0 !== i) {
              this.newline();
            }
            this.processNode(mix[i]);
          }
          return;
        }
        this.processNode(mix);
      },
      processNode: function(node) {
        var stream = this;
        if ((0, is_1.is_Function)(node.stringify)) {
          var str = node.stringify(stream);
          if (null != str) {
            stream.write(str);
          }
          return;
        }
        if ((0, is_1.is_String)(node.content)) {
          stream.write(wrapString(node.content));
          return;
        }
        if ((0, is_1.is_Function)(node.content)) {
          stream.write(wrapString(node.content()));
          return;
        }
        if (node.type === exports_1.Dom.FRAGMENT) {
          this.process(node);
          return;
        }
        this.processHead(node);
        if (isEmpty(node)) {
          stream.print(';');
          return;
        }
        if (isSingle(node)) {
          stream.openBlock('>');
          stream.processNode(getSingle(node));
          stream.closeBlock(null);
          return;
        }
        stream.openBlock('{');
        stream.process(node.nodes);
        stream.closeBlock('}');
      },
      processHead: function(node) {
        var id, cls, stream = this, str = '';
        var attr = node.attr;
        if (null != attr) {
          id = getString(attr['id']);
          cls = getString(attr['class']);
          if (null != id && -1 !== id.indexOf(' ')) {
            id = null;
          }
          if (null != id) {
            str += '#' + id;
          }
          if (null != cls) {
            str += format_Classes(cls);
          }
          for (var key in attr) {
            if ('id' === key && null != id) {
              continue;
            }
            if ('class' === key && null != cls) {
              continue;
            }
            var val = attr[key];
            if (null == val) {
              continue;
            }
            str += ' ' + key;
            if (val === key) {
              continue;
            }
            if ((0, is_1.is_Function)(val)) {
              val = val();
            }
            if ((0, is_1.is_String)(val)) {
              if (false === stream.minify || '' === val || /[^\w_$\-\.]/.test(val)) {
                val = wrapString(val);
              }
            }
            str += '=' + val;
          }
        }
        var props = node.props;
        if (null != props) {
          for (var key in props) {
            val = props[key];
            if (null == val) {
              continue;
            }
            str += ' [' + key;
            if ((0, is_1.is_Function)(val)) {
              val = val();
            }
            if ((0, is_1.is_String)(val)) {
              if (false === stream.minify || /[^\w_$\-\.]/.test(val)) {
                val = wrapString(val);
              }
            }
            str += '] = ' + val;
          }
        }
        if (false === isTagNameOptional(node, id, cls)) {
          str = node.tagName + str;
        }
        node = node.expression;
        if (null != node) {
          if ('function' === typeof node) {
            node = node();
          }
          if (false === stream.minify) {
            str += ' ';
          }
          str += '(' + node + ')';
        }
        if (false === this.minify) {
          str = doindent(this.indent, this.indentStr) + str;
        }
        stream.print(str);
      },
      newline: function() {
        this.format('\n');
      },
      openBlock: function(c) {
        this.indent++;
        if (false === this.minify) {
          this.string += ' ' + c + '\n';
          return;
        }
        this.string += c;
      },
      closeBlock: function(c) {
        this.indent--;
        if (null != c) {
          this.newline();
          this.write(c);
        }
      },
      write: function(str) {
        if (true === this.minify) {
          this.string += str;
          return;
        }
        var prfx = doindent(this.indent, this.indentStr);
        this.string += str.replace(/^/gm, prfx);
      },
      print: function(str) {
        this.string += str;
      },
      format: function(str) {
        if (false === this.minify) {
          this.string += str;
        }
      },
      printArgs: function(args) {
        if (null == args || 0 === args.length) {
          return;
        }
        var imax = args.length, i = -1;
        while (++i < imax) {
          if (i > 0) {
            this.print(',');
            this.format(' ');
          }
          var arg = args[i];
          this.print(arg.prop);
          if (null != arg.type) {
            this.print(':');
            this.format(' ');
            this.print(arg.type);
          }
        }
      }
    });
    var HtmlStreamWriter = (0, class_1.class_create)({
      stream: null,
      constructor: function(stream) {
        this.stream = stream;
      },
      process: function(mix) {
        if (mix.type === exports_1.Dom.FRAGMENT) {
          if ('html' !== mix.syntax) {
            var count = 0, p = mix;
            while (null != p) {
              if (p.type !== exports_1.Dom.FRAGMENT) {
                count++;
              }
              p = p.parent;
            }
            var stream = this.stream;
            stream.indent++;
            stream.print('<mask>\n');
            stream.indent += count;
            stream.process(mix);
            stream.print('\n');
            stream.indent--;
            stream.write('</mask>');
            stream.indent -= count;
            return;
          }
          mix = mix.nodes;
        }
        if ((0, is_1.is_ArrayLike)(mix)) {
          var imax = mix.length, i = -1;
          while (++i < imax) {
            this.processNode(mix[i]);
          }
          return;
        }
        this.processNode(mix);
      },
      processNode: function(node) {
        var stream = this.stream;
        if ((0, is_1.is_Function)(node.stringify)) {
          var str = node.stringify(stream);
          if (null != str) {
            stream.print('<mask>');
            stream.write(str);
            stream.print('</mask>');
          }
          return;
        }
        if ((0, is_1.is_String)(node.content)) {
          stream.print(node.content);
          return;
        }
        if ((0, is_1.is_Function)(node.content)) {
          stream.print(node.content());
          return;
        }
        if (node.type === exports_1.Dom.FRAGMENT) {
          this.process(node);
          return;
        }
        stream.print('<' + node.tagName);
        this.processAttr(node);
        if (isEmpty(node)) {
          if (html_isVoid(node)) {
            stream.print('>');
            return;
          }
          if (html_isSemiVoid(node)) {
            stream.print('/>');
            return;
          }
          stream.print('></' + node.tagName + '>');
          return;
        }
        stream.print('>');
        this.process(node.nodes);
        stream.print('</' + node.tagName + '>');
      },
      processAttr: function(node) {
        var stream = this.stream, str = '';
        var attr = node.attr;
        if (null != attr) {
          for (var key in attr) {
            var val = attr[key];
            if (null == val) {
              continue;
            }
            str += ' ' + key;
            if (val === key) {
              continue;
            }
            if ((0, is_1.is_Function)(val)) {
              val = val();
            }
            if ((0, is_1.is_String)(val)) {
              if (false === stream.minify || /[^\w_$\-\.]/.test(val)) {
                val = wrapString(val);
              }
            }
            str += '=' + val;
          }
        }
        node = node.expression;
        if (null != node) {
          if ('function' === typeof node) {
            node = node();
          }
          str += ' expression=' + wrapString(node);
        }
        if ('' === str) {
          return;
        }
        stream.print(str);
      }
    });
    function doindent(count, c) {
      var output = '';
      while (count--) {
        output += c;
      }
      return output;
    }
    function isEmpty(node) {
      return null == node.nodes || (0, is_1.is_ArrayLike)(node.nodes) && 0 === node.nodes.length;
    }
    function isSingle(node) {
      node = node.nodes;
      if (null == node) {
        return true;
      }
      var isArray = 'number' === typeof node.length;
      if (isArray && node.length > 1) {
        return false;
      }
      isArray = isArray ? node[0] : node;
      return null == isArray.stringify && isArray.type !== exports_1.Dom.FRAGMENT;
    }
    function isTagNameOptional(node, id, cls) {
      if (null == id && null == cls) {
        return false;
      }
      id = node.tagName;
      if ('div' === id) {
        return true;
      }
      return false;
    }
    function getSingle(node) {
      if ((0, is_1.is_ArrayLike)(node.nodes)) {
        return node.nodes[0];
      }
      return node.nodes;
    }
    function wrapString(str) {
      if (-1 === str.indexOf('\'')) {
        return '\'' + str + '\'';
      }
      if (-1 === str.indexOf('"')) {
        return '"' + str + '"';
      }
      return '"' + str.replace(/"/g, '\\"') + '"';
    }
    function getString(mix) {
      return null == mix ? null : (0, is_1.is_Function)(mix) ? mix() : mix;
    }
    function format_Classes(cls) {
      if (-1 === cls.indexOf('[')) {
        return raw(cls);
      }
      var str = '', imax = cls.length, i = -1;
      while (++i < imax) {
        var start = i = (0, cursor_1.cursor_skipWhitespace)(cls, i, imax);
        for (;i < imax; i++) {
          var c = cls.charCodeAt(i);
          if (91 === c) {
            i = (0, cursor_1.cursor_groupEnd)(cls, i + 1, imax, 91 /*[*/, 93 /*]*/);
          }
          if (cls.charCodeAt(i) < 33) {
            break;
          }
        }
        str += '.' + cls.substring(start, i);
      }
      return str;
    }
    exports.format_Classes = format_Classes;
    function raw(str) {
      return '.' + str.trim().replace(/\s+/g, '.');
    }
    var html_isVoid, html_isSemiVoid;
    (function() {
      var _void = /^(!doctype)$/i, _semiVoid = /^(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;
      html_isVoid = function(node) {
        return _void.test(node.tagName);
      };
      html_isSemiVoid = function(node) {
        return _semiVoid.test(node.tagName);
      };
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_mask_stringify === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_mask_stringify) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_mask_stringify, module.exports);
    } else {
      _ref_mask_src_parser_mask_stringify = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_Templates;
  (function() {
    var exports = null != _ref_mask_src_parser_Templates ? _ref_mask_src_parser_Templates : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Templates = void 0;
    var refs_1 = _ref_utils_src_refs;
    var parser_1 = _ref_mask_src_parser_mask_parser;
    exports.Templates = {
      ensure: function(mix, ctx) {
        if ('string' !== typeof mix) {
          return mix;
        }
        if (refs_1._Object_hasOwnProp.call(_cache, mix)) {
          /* if Object doesnt contains property that check is faster
            then "!=null" http://jsperf.com/not-in-vs-null/2 */
          return _cache[mix];
        }
        return _cache[mix] = (0, parser_1.parser_parse)(mix, ctx.filename);
      }
    };
    var _cache = {};
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_Templates === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_Templates) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_Templates, module.exports);
    } else {
      _ref_mask_src_parser_Templates = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_api_config;
  (function() {
    var exports = null != _ref_mask_src_api_config ? _ref_mask_src_api_config : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.mask_config = exports.__cfg = void 0;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var listeners_1 = _ref_mask_src_util_listeners;
    var reporters_1 = _ref_mask_src_util_reporters;
    /**
 * Configuration Options
 * @type {object}
 * @typedef Configuration
 */
    exports.__cfg = {
      /**
     * Relevant for NodeJS only. Disable/Enable compo caching.
     * @default true
     */
      allowCache: true,
      /**
     * Style and Script preprocessors
     * @type {object}
     * @memberOf Configuration
     */
      preprocessor: {
        /**
         * Transform style before using in `style` tag
         * @type {function}
         * @param {string} style
         * @returns {string}
         * @memberOf Configuration
         */
        style: null,
        /**
         * Transform script before using in `function,script,event,slot` tags
         * @type {function}
         * @param {string} source
         * @returns {string}
         * @memberOf Configuration
         */
        script: null
      },
      /**
     * Base path for modules
     * @default null
     * @memberOf Configuration
     */
      base: null,
      modules: 'default',
      /**
     * Define custom function for getting files content by path
     * @param {string} path
     * @returns {Promise}
     * @memberOf Configuration
     */
      getFile: null,
      /**
     * Define custom function for getting script
     * @param {string} path
     * @returns {Promise} Fulfill with exports
     * @memberOf Configuration
     */
      getScript: null,
      /**
     * Define custom function for getting styles
     * @param {string} path
     * @returns {Promise} Fulfill with exports
     * @memberOf Configuration
     */
      getStyle: null,
      /**
     * Define custom function for getting jsons
     * @param {string} path
     * @returns {Promise} Fulfill with exports
     * @memberOf Configuration
     */
      getData: null,
      getJson: null,
      /**
     * Define custom function to build/combine styles
     * @param {string} path
     * @param {object} options
     * @returns {Promise} Fulfill with {string} content
     * @memberOf Configuration
     */
      buildStyle: null,
      /**
     * Define custom function to build/combine scripts
     * @param {string} path
     * @param {object} options
     * @returns {Promise} Fulfill with {string} content
     * @memberOf Configuration
     */
      buildScript: null,
      /**
     * Define custom function to build/combine jsons
     * @param {string} path
     * @param {object} options
     * @returns {Promise} Fulfill with {string} content
     * @memberOf Configuration
     */
      buildData: null
    };
    /**
 * Get or Set configuration settings
 * - 1 `(name)`
 * - 2 `(name, value)`
 * - 3 `(object)`
 * @see @{link MaskOptions} for all options
 * @memberOf mask
 * @method config
 */
    function mask_config(a, b, c) {
      var args = arguments, length = args.length;
      if (0 === length) {
        return exports.__cfg;
      }
      if (1 === length) {
        var x = args[0];
        if ((0, is_1.is_Object)(x)) {
          (0, obj_1.obj_extend)(exports.__cfg, x);
          (0, listeners_1.listeners_emit)('config', x);
          return;
        }
        if ((0, is_1.is_String)(x)) {
          return (0, obj_1.obj_getProperty)(exports.__cfg, x);
        }
      }
      if (2 === length) {
        length = args[0];
        if (false === (0, obj_1.obj_hasProperty)(exports.__cfg, length)) {
          (0, reporters_1.log_warn)('Unknown configuration property', length);
        }
        x = {};
        (0, obj_1.obj_setProperty)(x, length, args[1]);
        (0, obj_1.obj_setProperty)(exports.__cfg, length, args[1]);
        (0, listeners_1.listeners_emit)('config', x);
        return;
      }
    }
    exports.mask_config = mask_config;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_api_config === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_api_config) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_api_config, module.exports);
    } else {
      _ref_mask_src_api_config = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_exports;
  (function() {
    var exports = null != _ref_mask_src_parser_exports ? _ref_mask_src_parser_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.cursor_groupEnd = exports.Templates = exports.mask_stringifyAttr = exports.mask_stringify = exports.parser_defineContentTag = exports.parser_ObjectLexer = exports.parser_cleanObject = exports.parser_ensureTemplateFunction = exports.parser_setInterpolationQuotes = exports.parser_parseLiteral = exports.parser_parseAttrObject = exports.parser_parseAttr = exports.parser_parseHtml = exports.parser_parse = void 0;
    var parser_1 = _ref_mask_src_parser_mask_parser;
    Object.defineProperty(exports, 'parser_parse', {
      enumerable: true,
      get: function() {
        return parser_1.parser_parse;
      }
    });
    var parser_2 = _ref_mask_src_parser_html_parser;
    Object.defineProperty(exports, 'parser_parseHtml', {
      enumerable: true,
      get: function() {
        return parser_2.parser_parseHtml;
      }
    });
    var attributes_1 = _ref_mask_src_parser_mask_partials_attributes;
    Object.defineProperty(exports, 'parser_parseAttr', {
      enumerable: true,
      get: function() {
        return attributes_1.parser_parseAttr;
      }
    });
    Object.defineProperty(exports, 'parser_parseAttrObject', {
      enumerable: true,
      get: function() {
        return attributes_1.parser_parseAttrObject;
      }
    });
    var literal_1 = _ref_mask_src_parser_mask_partials_literal;
    Object.defineProperty(exports, 'parser_parseLiteral', {
      enumerable: true,
      get: function() {
        return literal_1.parser_parseLiteral;
      }
    });
    var const_1 = _ref_mask_src_parser_const;
    Object.defineProperty(exports, 'parser_setInterpolationQuotes', {
      enumerable: true,
      get: function() {
        return const_1.parser_setInterpolationQuotes;
      }
    });
    var interpolation_1 = _ref_mask_src_parser_interpolation;
    Object.defineProperty(exports, 'parser_ensureTemplateFunction', {
      enumerable: true,
      get: function() {
        return interpolation_1.parser_ensureTemplateFunction;
      }
    });
    var utils_1 = _ref_mask_src_parser_utils;
    Object.defineProperty(exports, 'parser_cleanObject', {
      enumerable: true,
      get: function() {
        return utils_1.parser_cleanObject;
      }
    });
    var ObjectLexer_1 = _ref_mask_src_parser_object_ObjectLexer;
    Object.defineProperty(exports, 'parser_ObjectLexer', {
      enumerable: true,
      get: function() {
        return ObjectLexer_1.parser_ObjectLexer;
      }
    });
    var config_1 = _ref_mask_src_parser_config;
    Object.defineProperty(exports, 'parser_defineContentTag', {
      enumerable: true,
      get: function() {
        return config_1.parser_defineContentTag;
      }
    });
    var stringify_1 = _ref_mask_src_parser_mask_stringify;
    Object.defineProperty(exports, 'mask_stringify', {
      enumerable: true,
      get: function() {
        return stringify_1.mask_stringify;
      }
    });
    Object.defineProperty(exports, 'mask_stringifyAttr', {
      enumerable: true,
      get: function() {
        return stringify_1.mask_stringifyAttr;
      }
    });
    var Templates_1 = _ref_mask_src_parser_Templates;
    Object.defineProperty(exports, 'Templates', {
      enumerable: true,
      get: function() {
        return Templates_1.Templates;
      }
    });
    var cursor_1 = _ref_mask_src_parser_cursor;
    Object.defineProperty(exports, 'cursor_groupEnd', {
      enumerable: true,
      get: function() {
        return cursor_1.cursor_groupEnd;
      }
    });
    _ref_mask_src_parser_parsers_content;
    _ref_mask_src_parser_parsers_define;
    _ref_mask_src_parser_parsers_import;
    _ref_mask_src_parser_parsers_var;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_exports, module.exports);
    } else {
      _ref_mask_src_parser_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_j_src_util_array;
  (function() {
    var exports = null != _ref_mask_projects_mask_j_src_util_array ? _ref_mask_projects_mask_j_src_util_array : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.arr_unique = exports.arr_eachAny = void 0;
    var is_1 = _ref_utils_src_is;
    function arr_eachAny(mix, fn) {
      if (false === (0, is_1.is_ArrayLike)(mix)) {
        fn(mix);
        return;
      }
      var imax = mix.length, i = -1;
      while (++i < imax) {
        fn(mix[i], i);
      }
    }
    exports.arr_eachAny = arr_eachAny;
    function arr_unique(array) {
      hasDuplicate_ = false;
      array.sort(sort);
      if (false === hasDuplicate_) {
        return array;
      }
      var duplicates = [], i = 0, j = 0, imax = array.length - 1;
      while (i < imax) {
        if (array[i++] === array[i]) {
          duplicates[j++] = i;
        }
      }
      while (j--) {
        array.splice(duplicates[j], 1);
      }
      return array;
    }
    exports.arr_unique = arr_unique;
    var hasDuplicate_ = false;
    function sort(a, b) {
      if (a === b) {
        hasDuplicate_ = true;
        return 0;
      }
      return 1;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_j_src_util_array === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_j_src_util_array) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_j_src_util_array, module.exports);
    } else {
      _ref_mask_projects_mask_j_src_util_array = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_j_src_util_selector;
  (function() {
    var exports = null != _ref_mask_projects_mask_j_src_util_selector ? _ref_mask_projects_mask_j_src_util_selector : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.selector_getNextKey = exports.selector_match = exports.selector_parse = void 0;
    var exports_1 = _ref_mask_src_dom_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    function selector_parse(selector, type, direction) {
      if (null == selector) {
        (0, reporters_1.log_error)('selector is null for the type', type);
      }
      var _type = typeof selector;
      if ('object' === _type || 'function' === _type) {
        return selector;
      }
      var nextKey, _key, _prop, _selector;
      var c, end, matcher, root, current, index = 0, length = selector.length;
      if ('up' === direction) {
        nextKey = sel_key_UP;
      } else {
        nextKey = type === exports_1.Dom.SET ? sel_key_MASK : sel_key_COMPOS;
      }
      while (index < length) {
        c = selector.charCodeAt(index);
        if (c < 33) {
          index++;
          continue;
        }
        if (62 /* > */ === c) {
          if (null == matcher) {
            root = matcher = {
              selector: '__scope__',
              nextKey: nextKey,
              filters: null,
              next: {
                type: 'children',
                matcher: null
              }
            };
          } else {
            matcher.next = {
              type: 'children',
              matcher: null
            };
          }
          current = matcher;
          matcher = null;
          index++;
          continue;
        }
        end = selector_moveToBreak(selector, index + 1, length);
        if (46 /*.*/ === c) {
          _key = 'class';
          _prop = sel_key_ATTR;
          _selector = sel_hasClassDelegate(selector.substring(index + 1, end));
        } else if (35 /*#*/ === c) {
          _key = 'id';
          _prop = sel_key_ATTR;
          _selector = selector.substring(index + 1, end);
        } else if (91 /*[*/ === c) {
          eq = selector.indexOf('=', index);
          //if DEBUG
          -1 === eq && console.error('Attribute Selector: should contain "="');
          // endif
          _prop = sel_key_ATTR;
          _key = selector.substring(index + 1, eq);
          //slice out quotes if any
          c = selector.charCodeAt(eq + 1);
          slicer = 34 === c || 39 === c ? 2 : 1;
          _selector = selector.substring(eq + slicer, end - slicer + 1);
          // increment, as cursor is on closed ']'
          end++;
        } else if (58 /*:*/ === c && 58 === selector.charCodeAt(index + 1)) {
          index += 2;
          var slicer, expr, eq = index;
          do {
            c = selector.charCodeAt(index);
          } while (c >= 97 /*a*/ && c <= 122 /*z*/ && ++index < length);
          slicer = selector.substring(eq, index);
          if (40 /*(*/ === c) {
            eq = ++index;
            do {
              c = selector.charCodeAt(index);
            } while (41 /*)*/ !== c && ++index < length);
            expr = selector.substring(eq, index);
            index++;
          }
          var pseudo = PseudoSelectors(slicer, expr);
          if (null == matcher) {
            matcher = {
              selector: '*',
              nextKey: nextKey
            };
          }
          if (null == root) {
            root = matcher;
          }
          if (null == matcher.filters) {
            matcher.filters = [];
          }
          matcher.filters.push(pseudo);
          continue;
        } else {
          if (null != matcher) {
            matcher.next = {
              type: 'any',
              matcher: null
            };
            current = matcher;
            matcher = null;
          }
          _prop = null;
          _key = type === exports_1.Dom.SET ? 'tagName' : 'compoName';
          _selector = selector.substring(index, end);
        }
        index = end;
        if (null == matcher) {
          matcher = {
            key: _key,
            prop: _prop,
            selector: _selector,
            nextKey: nextKey,
            filters: null
          };
          if (null == root) {
            root = matcher;
          }
          if (null != current) {
            current.next.matcher = matcher;
          }
          continue;
        }
        if (null == matcher.filters) {
          matcher.filters = [];
        }
        matcher.filters.push({
          key: _key,
          selector: _selector,
          prop: _prop
        });
      }
      if (current && current.next) {
        current.next.matcher = matcher;
      }
      return root;
    }
    exports.selector_parse = selector_parse;
    function selector_match(node, selector, type) {
      if ('string' === typeof selector) {
        if (null == type) {
          type = exports_1.Dom[node.compoName ? 'CONTROLLER' : 'SET'];
        }
        selector = selector_parse(selector, type);
      }
      if ('function' === typeof selector) {
        return selector(node);
      }
      var obj = selector.prop ? node[selector.prop] : node, matched = false;
      if (null == obj) {
        return false;
      }
      if ('*' === selector.selector) {
        matched = true;
      } else if ('function' === typeof selector.selector) {
        matched = selector.selector(obj[selector.key]);
      } else if (null != selector.selector.test) {
        if (selector.selector.test(obj[selector.key])) {
          matched = true;
        }
      } else if (obj[selector.key] === selector.selector) {
        matched = true;
      }
      if (true === matched && null != selector.filters) {
        for (var x, i = 0, imax = selector.filters.length; i < imax; i++) {
          x = selector.filters[i];
          if ('function' === typeof x) {
            matched = x(node, type);
            if (false === matched) {
              return false;
            }
            continue;
          }
          if (false === selector_match(node, x, type)) {
            return false;
          }
        }
      }
      return matched;
    }
    exports.selector_match = selector_match;
    function selector_getNextKey(set) {
      return set.type === exports_1.Dom.SET ? sel_key_MASK : sel_key_COMPOS;
    }
    exports.selector_getNextKey = selector_getNextKey;
    // ==== private
    var sel_key_UP = 'parent', sel_key_MASK = 'nodes', sel_key_COMPOS = 'components', sel_key_ATTR = 'attr';
    function sel_hasClassDelegate(matchClass) {
      return function(className) {
        return sel_hasClass(className, matchClass);
      };
    }
    // [perf] http://jsperf.com/match-classname-indexof-vs-regexp/2
    function sel_hasClass(className, matchClass, index) {
      if ('string' !== typeof className) {
        return false;
      }
      if (null == index) {
        index = 0;
      }
      index = className.indexOf(matchClass, index);
      if (-1 === index) {
        return false;
      }
      if (index > 0 && className.charCodeAt(index - 1) > 32) {
        return sel_hasClass(className, matchClass, index + 1);
      }
      var class_Length = className.length, match_Length = matchClass.length;
      if (index < class_Length - match_Length && className.charCodeAt(index + match_Length) > 32) {
        return sel_hasClass(className, matchClass, index + 1);
      }
      return true;
    }
    function selector_moveToBreak(selector, index, length) {
      var c, isInQuote = false, isEscaped = false;
      while (index < length) {
        c = selector.charCodeAt(index);
        if (34 === c || 39 === c) {
          // '"
          isInQuote = !isInQuote;
        }
        if (92 === c) {
          // [\]
          isEscaped = !isEscaped;
        }
        if (46 === c || 35 === c || 91 === c || 93 === c || 62 === c || c < 33) {
          // .#[]>
          if (true !== isInQuote && true !== isEscaped) {
            break;
          }
        }
        index++;
      }
      return index;
    }
    var PseudoSelectors;
    (function() {
      PseudoSelectors = function(name, expr) {
        var fn = Fns[name];
        if (void 0 !== fn) {
          return fn;
        }
        fn = Workers[name];
        if (void 0 !== fn) {
          return fn(expr);
        }
        throw new Error('Uknown pseudo selector:' + name);
      };
      var Fns = {
        text: function(node) {
          return node.type === exports_1.Dom.TEXTNODE;
        },
        node: function(node) {
          return node.type === exports_1.Dom.NODE;
        }
      };
      var Workers = {
        not: function(expr) {
          return function(node, type) {
            return !selector_match(node, expr, type);
          };
        }
      };
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_j_src_util_selector === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_j_src_util_selector) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_j_src_util_selector, module.exports);
    } else {
      _ref_mask_projects_mask_j_src_util_selector = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_j_src_util_utils;
  (function() {
    var exports = null != _ref_mask_projects_mask_j_src_util_utils ? _ref_mask_projects_mask_j_src_util_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.jmask_getText = exports.jmask_deepest = exports.jmask_clone = exports.jmask_find = exports.jmask_filter = void 0;
    var array_1 = _ref_mask_projects_mask_j_src_util_array;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var exports_1 = _ref_mask_src_dom_exports;
    var selector_1 = _ref_mask_projects_mask_j_src_util_selector;
    function jmask_filter(mix, matcher) {
      if (null == matcher) {
        return mix;
      }
      var result = [];
      (0, array_1.arr_eachAny)(mix, function(node, i) {
        if ((0, selector_1.selector_match)(node, matcher)) {
          result.push(node);
        }
      });
      return result;
    }
    exports.jmask_filter = jmask_filter;
    /**
 * - mix (Node | Array[Node])
 */
    function jmask_find(mix, matcher, output, deep) {
      if (null == mix) {
        return output;
      }
      if (null == output) {
        output = [];
      }
      if (null == deep) {
        // is root and matchling like `> div` (childs only)
        if ('__scope__' === matcher.selector) {
          deep = false;
          matcher = matcher.next.matcher;
        } else {
          deep = true;
        }
      }
      (0, array_1.arr_eachAny)(mix, function(node) {
        if (false === (0, selector_1.selector_match)(node, matcher)) {
          if (null == matcher.next && false !== deep) {
            jmask_find(node[matcher.nextKey], matcher, output, deep);
          }
          return;
        }
        if (null == matcher.next) {
          output.push(node);
          if (true === deep) {
            jmask_find(node[matcher.nextKey], matcher, output, deep);
          }
          return;
        }
        var next = matcher.next;
        deep = 'children' !== next.type;
        jmask_find(node[matcher.nextKey], next.matcher, output, deep);
      });
      return output;
    }
    exports.jmask_find = jmask_find;
    function jmask_clone(node, parent) {
      var clone = (0, obj_1.obj_create)(node);
      var attr = node.attr;
      if (null != attr) {
        clone.attr = (0, obj_1.obj_create)(attr);
      }
      var nodes = node.nodes;
      if (null != nodes) {
        if (false === (0, is_1.is_ArrayLike)(nodes)) {
          clone.nodes = [ jmask_clone(nodes, clone) ];
        } else {
          clone.nodes = [];
          var imax = nodes.length, i = 0;
          for (;i < imax; i++) {
            clone.nodes[i] = jmask_clone(nodes[i], clone);
          }
        }
      }
      return clone;
    }
    exports.jmask_clone = jmask_clone;
    function jmask_deepest(node) {
      var prev, current = node;
      while (null != current) {
        prev = current;
        current = current.nodes && current.nodes[0];
      }
      return prev;
    }
    exports.jmask_deepest = jmask_deepest;
    function jmask_getText(node, model, ctx, controller) {
      if (exports_1.Dom.TEXTNODE === node.type) {
        if ((0, is_1.is_Function)(node.content)) {
          return node.content('node', model, ctx, null, controller);
        }
        return node.content;
      }
      var output = '';
      if (null != node.nodes) {
        for (var x, i = 0, imax = node.nodes.length; i < imax; i++) {
          x = node.nodes[i];
          output += jmask_getText(x, model, ctx, controller);
        }
      }
      return output;
    }
    exports.jmask_getText = jmask_getText;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_j_src_util_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_j_src_util_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_j_src_util_utils, module.exports);
    } else {
      _ref_mask_projects_mask_j_src_util_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_ctx;
  (function() {
    var exports = null != _ref_mask_src_builder_ctx ? _ref_mask_src_builder_ctx : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_Ctx = void 0;
    var obj_1 = _ref_utils_src_obj;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    Dfr_1 = /** @class */ function(_super) {
      __extends(builder_Ctx, _super);
      function builder_Ctx(data) {
        var _this = _super.call(this) || this;
        // Is true, if some of the components in a ctx is async
        _this.async = false;
        // List of busy components
        _this.defers = null; /*Array*/
        // NodeJS
        // Track components ID
        _this._id = 0;
        // ModelsBuilder for HTML serialization
        _this._models = null;
        // ModulesBuilder fot HTML serialization
        _this._modules = null;
        _this._redirect = null;
        _this._rewrite = null;
        if (null != data) {
          (0, obj_1.obj_extend)(_this, data);
        }
        return _this;
      }
      builder_Ctx.clone = function(ctx) {
        var data = {};
        for (var key in ctx) {
          if (key in PRIVATE === false) {
            data[key] = ctx[key];
          }
        }
        return new builder_Ctx(data);
      };
      return builder_Ctx;
    }(Dfr_1.class_Dfr);
    exports.builder_Ctx = Dfr_1;
    var PRIVATE = {
      async: 1,
      defers: 1,
      _id: 0,
      _models: 1,
      _modules: 1,
      _redirect: 1,
      _rewrite: 1
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_ctx === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_ctx) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_ctx, module.exports);
    } else {
      _ref_mask_src_builder_ctx = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_BuilderData;
  (function() {
    var exports = null != _ref_mask_src_builder_BuilderData ? _ref_mask_src_builder_BuilderData : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.BuilderData = void 0;
    exports.BuilderData = {
      id: 1,
      document: 'undefined' === typeof document ? null : document
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_BuilderData === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_BuilderData) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_BuilderData, module.exports);
    } else {
      _ref_mask_src_builder_BuilderData = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_DomB;
  (function() {
    var exports = null != _src_html_dom_DomB ? _src_html_dom_DomB : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.DomB = void 0;
    var exports_1 = _ref_mask_src_dom_exports;
    var obj_1 = _ref_utils_src_obj;
    exports.DomB = (0, obj_1.obj_extend)(exports_1.Dom, {
      DOCTYPE: 11,
      UTILNODE: 12
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_DomB === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_DomB) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_DomB, module.exports);
    } else {
      _src_html_dom_DomB = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_util_meta;
  (function() {
    var exports = null != _src_util_meta ? _src_util_meta : {};
    var module = {
      exports: exports
    };
    'use strict';
    var _a;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.meta_setVal = exports.meta_getVal = exports.meta_resolveModelMode = exports.meta_resolveRenderMode = exports.meta_get = exports.meta_getModelMode = exports.meta_getRenderMode = void 0;
    var const_1 = _src_const;
    var reporters_1 = _ref_mask_src_util_reporters;
    var obj_1 = _ref_utils_src_obj;
    var class_1 = _ref_utils_src_class;
    _a = {}, _a[const_1.mode_SERVER] = 1, _a[const_1.mode_SERVER_CHILDREN] = 1, 
    _a[const_1.mode_SERVER_ALL] = 1, _a[const_1.mode_CLIENT] = 1, _a[const_1.mode_BOTH] = 1;
    var mods = _a;
    function meta_getRenderMode(compo) {
      compo = meta_resolveRenderMode(compo);
      return new Mode(compo);
    }
    exports.meta_getRenderMode = meta_getRenderMode;
    function meta_getModelMode(compo) {
      var mode = meta_getRenderMode(compo);
      if (mode.isServer()) {
        return mode;
      }
      mode = meta_resolveModelMode(compo);
      return new Mode(mode);
    }
    exports.meta_getModelMode = meta_getModelMode;
    function meta_get(compo) {
      if (null == compo) {
        return CompoMeta.create();
      }
      compo = 'function' === typeof compo ? compo.prototype : compo;
      return CompoMeta.create(compo);
    }
    exports.meta_get = meta_get;
    function meta_resolveRenderMode(compo) {
      var mode = getMetaVal(compo, 'mode', 'x-render-mode');
      if (null == mode) {
        mode = getMetaVal(compo.parent, 'mode', 'x-render-mode');
        if (null == mode) {
          mode = const_1.mode_BOTH;
          meta_setVal(mode, 'mode', mode);
        }
        if (mode === const_1.mode_SERVER_ALL || mode === const_1.mode_SERVER_CHILDREN) {
          meta_setVal(compo, 'mode', const_1.mode_SERVER_ALL);
        }
      }
      if (mode in mods === false) {
        (0, reporters_1.log_error)('Unknown render mode: ' + mode);
        return const_1.mode_BOTH;
      }
      return mode;
    }
    exports.meta_resolveRenderMode = meta_resolveRenderMode;
    function meta_resolveModelMode(compo) {
      var mode = getMetaVal(compo, 'modelMode', 'x-model-mode') || ((0, reporters_1.log_warn)('modeModel is deprecated'), 
      getMetaVal(compo, 'modeModel'));
      if (null == mode) {
        mode = getMetaVal(compo.parent, 'mode', 'x-model-mode');
        if (null == mode) {
          mode = const_1.mode_BOTH;
          meta_setVal(mode, 'modelMode', mode);
        }
        if (mode === const_1.mode_SERVER_ALL || mode === const_1.mode_SERVER_CHILDREN) {
          meta_setVal(compo, 'modelMode', const_1.mode_SERVER_ALL);
        }
      }
      if (mode in mods === false) {
        (0, reporters_1.log_error)('Unknown model mode: ' + mode);
        return const_1.mode_BOTH;
      }
      return mode;
    }
    exports.meta_resolveModelMode = meta_resolveModelMode;
    function meta_getVal(compo, prop) {
      return getMetaVal(compo, prop);
    }
    exports.meta_getVal = meta_getVal;
    function meta_setVal(compo, prop, val) {
      compo = 'function' === typeof compo ? compo.prototype : compo;
      compo.meta = null == compo.meta ? CompoMeta.create() : (0, obj_1.obj_create)(compo.meta);
      compo.meta[prop] = val;
    }
    exports.meta_setVal = meta_setVal;
    // Private
    function getMetaVal(compo, prop, attrProp) {
      if (null == compo) {
        return null;
      }
      var proto = 'function' === typeof compo ? compo.prototype : compo;
      var meta = proto.meta;
      if (null != meta) {
        if (meta[prop]) {
          return meta[prop];
        }
      }
      if (attrProp) {
        meta = proto.attr;
        if (meta && meta[attrProp]) {
          proto = meta[attrProp];
          meta_setVal(compo, prop, proto);
          return proto;
        }
      }
      meta = META_DEFAULT[prop];
      if (void 0 === meta) {
        (0, reporters_1.log_error)('Unknown meta property: ', prop);
      } else {
        meta_setVal(compo, prop, meta);
      }
      return meta;
    }
    var CompoMeta = /** @class */ function() {
      function CompoMeta() {}
      CompoMeta.create = function(ctr) {
        var _a = null !== (_a = null === ctr || void 0 === ctr ? void 0 : ctr.meta) && void 0 !== _a ? _a : null === ctr || void 0 === ctr ? void 0 : ctr.$meta;
        if (_a) {
          return _a;
        }
        return Object.create(META_DEFAULT);
      };
      return CompoMeta;
    }();
    var META_DEFAULT = {
      mode: const_1.mode_BOTH,
      modelMode: const_1.mode_BOTH,
      attributes: null,
      cache: false
    };
    var Mode = (0, class_1.class_create)({
      mode: null,
      constructor: function(mode) {
        this.mode = mode;
      },
      isServer: function() {
        return this.mode === const_1.mode_SERVER_ALL || this.mode === const_1.mode_SERVER;
      },
      isClient: function() {
        return this.mode === const_1.mode_CLIENT;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_util_meta === module.exports) {
      // do nothing if
    } else if (__isObj(_src_util_meta) && __isObj(module.exports)) {
      Object.assign(_src_util_meta, module.exports);
    } else {
      _src_util_meta = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_builder_ctx_CtxModels;
  (function() {
    var exports = null != _src_builder_ctx_CtxModels ? _src_builder_ctx_CtxModels : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_CtxModels = void 0;
    var meta_1 = _src_util_meta;
    var is_1 = _ref_utils_src_is;
    var class_1 = _ref_utils_src_class;
    exports.builder_CtxModels = (0, class_1.class_create)({
      constructor: function(model, startIndex) {
        this._models = null;
        this._id = startIndex || 0;
        this.append(model);
      },
      append: function(model) {
        return add(this, model);
      },
      tryAppend: function(ctr) {
        if ((0, meta_1.meta_getModelMode)(ctr).isServer()) {
          return -1;
        }
        if (null == ctr.modelRef) {
          return add(this, ctr.model);
        }
        var parent = ctr.parent;
        while (null != parent) {
          if ((0, meta_1.meta_getModelMode)(parent).isServer()) {
            return -1;
          }
          parent = parent.parent;
        }
        ctr = '$ref:' + ctr.modelRef;
        return add(this, ctr);
      },
      stringify: function() {
        return stringify(this._models);
      }
    });
    // private
    function add(modelBuilder, model) {
      if (null == model) {
        return -1;
      }
      if (null == modelBuilder._models) {
        modelBuilder._models = {};
      }
      var id = 'm' + ++modelBuilder._id;
      modelBuilder._models[id] = model;
      return id;
    }
    var stringify;
    (function() {
      var fn = 'undefined' !== typeof Class && (0, is_1.is_Function)(Class.stringify) ? Class.stringify : JSON.stringify;
      stringify = function(models) {
        return null == models ? null : fn(models);
      };
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_builder_ctx_CtxModels === module.exports) {
      // do nothing if
    } else if (__isObj(_src_builder_ctx_CtxModels) && __isObj(module.exports)) {
      Object.assign(_src_builder_ctx_CtxModels, module.exports);
    } else {
      _src_builder_ctx_CtxModels = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_path;
  (function() {
    var exports = null != _ref_mask_src_util_path ? _ref_mask_src_util_path : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.path_toLocalFile = exports.path_combine = exports.path_toRelative = exports.path_isRelative = exports.path_resolveUrl = exports.path_normalize = exports.path_resolveRoot = exports.path_resolveCurrent = exports.path_appendQuery = exports.path_fromPrfx = exports.path_getExtension = exports.path_getFile = exports.path_getDir = void 0;
    var config_1 = _ref_mask_src_api_config;
    function path_getDir(path) {
      return path.substring(0, path.lastIndexOf('/') + 1);
    }
    exports.path_getDir = path_getDir;
    function path_getFile(path) {
      path = path.replace('file://', '').replace(/\\/g, '/').replace(/\?[^\n]+$/, '');
      if (/^\/\w+:\/[^\/]/i.test(path)) {
        // win32 drive
        return path.substring(1);
      }
      return path;
    }
    exports.path_getFile = path_getFile;
    function path_getExtension(path) {
      var query = path.indexOf('?');
      if (-1 !== query) {
        path = path.substring(0, query);
      }
      query = rgx_EXT.exec(path);
      return null == query ? '' : query[1];
    }
    exports.path_getExtension = path_getExtension;
    function path_fromPrfx(path, prefixes) {
      var i = path.indexOf('/');
      if (-1 === i) {
        i = path.length;
      }
      var prfx = path.substring(1, i);
      path = path.substring(i + 1);
      prefixes = prefixes[prfx];
      if (null == prefixes) {
        return null;
      }
      if (1 === prefixes.indexOf('{')) {
        return path_combine(prefixes, path);
      }
      var routeArr = prefixes.split('{'), sfxArr = path.split('/'), sfxArrL = sfxArr.length, imax = routeArr.length, i = 0;
      while (++i < imax) {
        var x = routeArr[i];
        var end = x.indexOf('}');
        var num = 0 | x.substring(0, end);
        num = num < sfxArrL ? sfxArr[num] : sfxArr[sfxArrL - 1];
        if (i === imax - 1 && i < sfxArr.length) {
          num = path_combine(num, sfxArr.slice(i).join('/'));
        }
        routeArr[i] = (num || '') + x.substring(end + 1);
      }
      return path_combine.apply(null, routeArr);
    }
    exports.path_fromPrfx = path_fromPrfx;
    function path_appendQuery(path, key, val) {
      var conjunctor = -1 === path.indexOf('?') ? '?' : '&';
      return path + conjunctor + key + '=' + val;
    }
    exports.path_appendQuery = path_appendQuery;
    exports.path_resolveCurrent = function() {
      var current_;
      //#if (NODE)
      return function() {
        if (null != current_) {
          return current_;
        }
        return current_ = path_win32Normalize(process.cwd());
      };
      //#endif
    }();
    exports.path_resolveRoot = function() {}();
    function path_normalize(path) {
      path = path.replace(/\\/g, '/').replace(/([^:\/])\/{2,}/g, '$1/').replace(/^\.\//, '').replace(/\/\.\//g, '/');
      return path_collapse(path);
    }
    exports.path_normalize = path_normalize;
    function path_resolveUrl(path, base) {
      path = path_normalize(path);
      if (path_isRelative(path)) {
        return path_normalize(path_combine(base || (0, exports.path_resolveCurrent)(), path));
      }
      if (rgx_PROTOCOL.test(path)) {
        return path;
      }
      if (47 /*/*/ === path.charCodeAt(0)) {
        if (config_1.__cfg.base) {
          return path_combine(config_1.__cfg.base, path);
        }
      }
      return path;
    }
    exports.path_resolveUrl = path_resolveUrl;
    function path_isRelative(path) {
      var c = path.charCodeAt(0);
      switch (c) {
       case 46:
        /* . */
        return true;

       case 47:
        /* / */
        return false;
      }
      return false === rgx_PROTOCOL.test(path);
    }
    exports.path_isRelative = path_isRelative;
    function path_toRelative(path, anchor, base) {
      var path_ = path_resolveUrl(path_normalize(path), base), anchor = path_resolveUrl(path_normalize(anchor), base);
      if ('' !== path_getExtension(anchor)) {
        anchor = path_getDir(anchor);
      }
      anchor = path_combine(anchor, '/');
      if (0 === path_.toUpperCase().indexOf(anchor.toUpperCase())) {
        return path_.substring(anchor.length);
      }
      return path;
    }
    exports.path_toRelative = path_toRelative;
    function path_combine(a, b, c, d, e) {
      var x, out = '', imax = arguments.length, i = -1;
      while (++i < imax) {
        x = arguments[i];
        if (!x) {
          continue;
        }
        x = path_normalize(x);
        if ('' === out) {
          out = x;
          continue;
        }
        if ('/' !== out[out.length - 1]) {
          out += '/';
        }
        if ('/' === x[0]) {
          x = x.substring(1);
        }
        out += x;
      }
      return path_collapse(out);
    }
    exports.path_combine = path_combine;
    //#if (NODE)
    exports.path_toLocalFile = function() {
      var _cwd;
      function cwd() {
        return _cwd = _cwd || path_normalize(process.cwd());
      }
      return function(path) {
        path = path_normalize(path);
        if (path_isRelative(path)) {
          path = '/' + path;
        }
        if (47 /*/*/ === path.charCodeAt(0)) {
          return path_combine(cwd(), path);
        }
        if (0 === path.indexOf('file://')) {
          path = path.replace('file://', '');
        }
        if (/^\/\w+:\//.test(path)) {
          path = path.substring(1);
        }
        return path;
      };
    }();
    //#endif
    var rgx_PROTOCOL = /^[\w\-]{2,}:\/\//i, rgx_SUB_DIR = /[^\/\.]+\/\.\.\//, rgx_EXT = /\.(\w+)$/;
    function path_win32Normalize(path) {
      path = path_normalize(path);
      if ('file:' === path.substring(0, 5)) {
        return path;
      }
      return 'file://' + path;
    }
    function path_collapse(url_) {
      var url = url_;
      while (rgx_SUB_DIR.test(url)) {
        url = url.replace(rgx_SUB_DIR, '');
      }
      return url;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_path === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_path) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_path, module.exports);
    } else {
      _ref_mask_src_util_path = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_builder_ctx_CtxModules;
  (function() {
    var exports = null != _src_builder_ctx_CtxModules ? _src_builder_ctx_CtxModules : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_CtxModules = void 0;
    var class_1 = _ref_utils_src_class;
    var path_1 = _ref_mask_src_util_path;
    var exports_1 = _ref_mask_src_parser_exports;
    exports.builder_CtxModules = (0, class_1.class_create)({
      constructor: function() {
        this._modules = [];
      },
      add: function(module, owner) {
        if (null == module || null != module.error) {
          return;
        }
        this.push(module, owner);
        var imports = module.imports;
        if (null == imports) {
          return;
        }
        var imax = imports.length, i = -1;
        while (++i < imax) {
          this.add(imports[i].module, module);
        }
      },
      push: function(module, owner) {
        var arr = this._modules;
        var i = arr.indexOf(module);
        if (-1 !== i) {
          if (null != owner) {
            owner = arr.indexOf(owner);
            if (i > owner) {
              // move close to parent
              arr.splice(i, 1);
              arr.splice(owner, 0, module);
            }
          }
          return;
        }
        arr.unshift(module);
      },
      stringify: function(opts) {
        var x, modules = this._modules, arr = [], imax = modules.length, i = -1;
        while (++i < imax) {
          x = modules[i];
          if ('mask' === x.type) {
            arr.push(createModuleNode(x));
          }
        }
        return (0, exports_1.mask_stringify)(arr, opts);
      }
    });
    function createModuleNode(module) {
      var node = new mask.Dom.Node('module');
      var path = (0, path_1.path_toRelative)(module.path, (0, path_1.path_resolveCurrent)());
      if ((0, path_1.path_isRelative)(path)) {
        path = '/' + path;
      }
      node.attr = {
        path: path
      };
      node.nodes = module.source;
      return node;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_builder_ctx_CtxModules === module.exports) {
      // do nothing if
    } else if (__isObj(_src_builder_ctx_CtxModules) && __isObj(module.exports)) {
      Object.assign(_src_builder_ctx_CtxModules, module.exports);
    } else {
      _src_builder_ctx_CtxModules = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_cache_CompoCacheCollection;
  (function() {
    var exports = null != _src_cache_CompoCacheCollection ? _src_cache_CompoCacheCollection : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.CompoCacheCollection = void 0;
    var obj_1 = _ref_utils_src_obj;
    var CompoCacheCollection = /** @class */ function() {
      function CompoCacheCollection(ctr, cache) {
        this.__null = null;
        this.__value = null;
        this.__cacheInfo = null;
        if (null /* obsolete */ == cache) {
          cache = ctr.cache;
        }
        if (null == cache) {
          return;
        }
        this.__cacheInfo = new CompoCache(cache);
      }
      return CompoCacheCollection;
    }();
    exports.CompoCacheCollection = CompoCacheCollection;
    var CompoCache = /** @class */ function() {
      function CompoCache(cache) {
        if ('object' === typeof cache) {
          if (cache.byProperty) {
            var prop = cache.byProperty, dot = prop.indexOf('.'), objName = prop.substring(0, dot);
            prop = prop.substring(dot + 1);
            switch (objName) {
             case 'model':
             case 'ctx':
              break;

             default:
              console.error('[CompoCache] - property accessor not valid - should be "[model/ctx].[accessor]"');
              return null;
            }
            this.propObjName = objName;
            this.propAccessor = prop;
          }
        }
        this.expire = cache.expire;
      }
      CompoCache.prototype.getKey = function(model, ctx) {
        if (null == this.propAccessor) {
          return '__value';
        }
        var objName = this.propObjName;
        var prop = this.propAccessor;
        var obj;
        if ('model' === objName) {
          obj = model;
        }
        if ('ctx' === objName) {
          obj = ctx;
        }
        model = (0, obj_1.obj_getProperty)(obj, prop);
        if ('undefined' === typeof model) {
          return '__value';
        }
        if (null == model) {
          return '__null';
        }
        return model;
      };
      return CompoCache;
    }();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_cache_CompoCacheCollection === module.exports) {
      // do nothing if
    } else if (__isObj(_src_cache_CompoCacheCollection) && __isObj(module.exports)) {
      Object.assign(_src_cache_CompoCacheCollection, module.exports);
    } else {
      _src_cache_CompoCacheCollection = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_cache_exports;
  (function() {
    var exports = null != _src_cache_exports ? _src_cache_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Cache = void 0;
    var config_1 = _ref_mask_src_api_config;
    var CompoCacheCollection_1 = _src_cache_CompoCacheCollection;
    var _lastCtrlID = 0, _lastModelID = 0, _cache = {};
    // source ./utils.js
    // end:source ./utils.js
    // source ./CompoCacheCollection.js
    // end:source ./CompoCacheCollection.js
    exports.Cache = {
      get controllerID() {
        return _lastCtrlID;
      },
      get modelID() {
        return _lastModelID;
      },
      cacheCompo: function(model, ctx, compoName, compo, cache) {
        if (false === config_1.__cfg.allowCache) {
          return;
        }
        var cached = _cache[compoName];
        if (null == cached) {
          cached = _cache[compoName] = new CompoCacheCollection_1.CompoCacheCollection(compo, cache);
        }
        compoName = cached.__cacheInfo;
        if (null == compoName) {
          return;
        }
        cached[compoName.getKey(model, ctx)] = compo;
        _lastCtrlID = ctx._id;
        _lastModelID = ctx._models._id;
      },
      getCompo: function(model, ctx, compoName, Ctor) {
        if (false === config_1.__cfg.allowCache) {
          return null;
        }
        compoName = _cache[compoName];
        if (null == compoName) {
          return null;
        }
        var info = compoName.__cacheInfo;
        info = info.getKey(model, ctx);
        model = compoName[info];
        // check if cached data is already present, due to async. components
        return null == model || null == model.__cached ? null : model;
      },
      getCache: function() {
        return _cache;
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_cache_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_src_cache_exports) && __isObj(module.exports)) {
      Object.assign(_src_cache_exports, module.exports);
    } else {
      _src_cache_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_jq_util_selector;
  (function() {
    var exports = null != _src_html_dom_jq_util_selector ? _src_html_dom_jq_util_selector : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.selector_match = exports.sel_classIndex = exports.selector_parse = void 0;
    var sel_key_UP = 'parentNode', sel_key_CHILD = 'firstChild', sel_key_ATTR = 'attributes';
    function selector_parse(selector, direction) {
      if ('object' === typeof selector) {
        // or null
        return selector;
      }
      var nextKey, _key, _prop, _selector;
      var end, matcher, eq, c, index = 0, length = selector.length;
      if ('up' === direction) {
        nextKey = sel_key_UP;
      } else {
        nextKey = sel_key_CHILD;
      }
      while (index < length) {
        c = selector.charCodeAt(index);
        if (c < 33) {
          continue;
        }
        end = selector_moveToBreak(selector, index + 1, length);
        if (46 /*.*/ === c) {
          _key = 'class';
          _prop = sel_key_ATTR;
          _selector = sel_hasClassDelegate(selector.substring(index + 1, end));
        } else if (35 /*#*/ === c) {
          _key = 'id';
          _prop = sel_key_ATTR;
          _selector = selector.substring(index + 1, end);
        } else if (91 /*[*/ === c) {
          eq = selector.indexOf('=', index);
          //if DEBUG
          -1 === eq && console.error('Attribute Selector: should contain "="');
          // endif
          _prop = sel_key_ATTR;
          _key = selector.substring(index + 1, eq);
          //slice out quotes if any
          c = selector.charCodeAt(eq + 1);
          c = 34 === c || 39 === c ? 2 : 1;
          _selector = selector.substring(eq + c, end - c + 1);
          // increment, as cursor is on closed ']'
          end++;
        } else {
          _prop = null;
          _key = 'tagName';
          _selector = selector.substring(index, end).toUpperCase();
        }
        index = end;
        if (null == matcher) {
          matcher = {
            key: _key,
            prop: _prop,
            selector: _selector,
            nextKey: nextKey,
            filters: null
          };
          continue;
        }
        if (null == matcher.filters) {
          matcher.filters = [];
        }
        matcher.filters.push({
          key: _key,
          selector: _selector,
          prop: _prop
        });
      }
      return matcher;
    }
    exports.selector_parse = selector_parse;
    function sel_hasClassDelegate(matchClass) {
      return function(className) {
        return -1 !== sel_classIndex(className, matchClass);
      };
    }
    // [perf] http://jsperf.com/match-classname-indexof-vs-regexp/2
    function sel_classIndex(className, matchClass, index) {
      if (null == className) {
        return -1;
      }
      if (null == index) {
        index = 0;
      }
      index = className.indexOf(matchClass, index);
      if (-1 === index) {
        return -1;
      }
      if (index > 0 && className.charCodeAt(index - 1) > 32) {
        return sel_classIndex(className, matchClass, index + 1);
      }
      var class_Length = className.length, match_Length = matchClass.length;
      if (index < class_Length - match_Length && className.charCodeAt(index + match_Length) > 32) {
        return sel_classIndex(className, matchClass, index + 1);
      }
      return index;
    }
    exports.sel_classIndex = sel_classIndex;
    function selector_moveToBreak(selector, index, length) {
      var c, isInQuote = false, isEscaped = false;
      while (index < length) {
        c = selector.charCodeAt(index);
        if (34 === c || 39 === c) {
          // '"
          isInQuote = !isInQuote;
        }
        if (92 === c) {
          // [\]
          isEscaped = !isEscaped;
        }
        if (46 === c || 35 === c || 91 === c || 93 === c || c < 33) {
          // .#[]
          if (true !== isInQuote && true !== isEscaped) {
            break;
          }
        }
        index++;
      }
      return index;
    }
    function selector_match(node, selector) {
      if ('string' === typeof selector) {
        selector = selector_parse(selector);
      }
      var obj = selector.prop ? node[selector.prop] : node, matched = false;
      if (null == obj) {
        return false;
      }
      if ('function' === typeof selector.selector) {
        matched = selector.selector(obj[selector.key]);
      } else if (null != selector.selector.test) {
        if (selector.selector.test(obj[selector.key])) {
          matched = true;
        }
      } else if (obj[selector.key] === selector.selector) {
        matched = true;
      }
      if (true === matched && null != selector.filters) {
        for (var x, i = 0, imax = selector.filters.length; i < imax; i++) {
          x = selector.filters[i];
          if (false === selector_match(node, x)) {
            return false;
          }
        }
      }
      return matched;
    }
    exports.selector_match = selector_match;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_jq_util_selector === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_jq_util_selector) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_jq_util_selector, module.exports);
    } else {
      _src_html_dom_jq_util_selector = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_NodeBase;
  (function() {
    var exports = null != _src_html_dom_NodeBase ? _src_html_dom_NodeBase : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.NodeBase = void 0;
    var DomB_1 = _src_html_dom_DomB;
    var selector_1 = _src_html_dom_jq_util_selector;
    var NodeBase = /** @class */ function() {
      function NodeBase() {
        this.tagName = null;
        this.parentNode = null;
        this.firstChild = null;
        this.lastChild = null;
        this.nextSibling = null;
        this.nodeType = null;
      }
      Object.defineProperty(NodeBase.prototype, 'length', {
        get: function() {
          var count = 0, el = this.firstChild;
          while (null != el) {
            count++;
            el = el.nextSibling;
          }
          return count;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NodeBase.prototype, 'childNodes', {
        get: function() {
          var array = [], el = this.firstChild;
          while (null != el) {
            array.push(el);
            el = el.nextSibling;
          }
          return array;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NodeBase.prototype, 'ownerDocument', {
        get: function() {
          return new OwnerDocument(this);
        },
        enumerable: false,
        configurable: true
      });
      NodeBase.prototype.querySelector = function(selector) {
        var matcher = 'string' === typeof selector ? (0, selector_1.selector_parse)(selector, null) : selector;
        var matched, el = this.firstChild;
        for (;null != el; el = el.nextSibling) {
          if ((0, selector_1.selector_match)(el, matcher)) {
            return el;
          }
        }
        if (null != el) {
          return el;
        }
        el = this.firstChild;
        for (;null != el; el = el.nextSibling) {
          if ('function' === typeof el.querySelector) {
            matched = el.querySelector(matcher);
            if (null != matched) {
              return matched;
            }
          }
        }
        return null;
      };
      NodeBase.prototype.appendChild = function(child) {
        if (null == child) {
          return child;
        }
        if (child.nodeType === DomB_1.DomB.FRAGMENT) {
          var fragment = child;
          if (null == fragment.firstChild) {
            return fragment;
          }
          var el = fragment.firstChild;
          while (true) {
            el.parentNode = this;
            if (null == el.nextSibling) {
              break;
            }
            el = el.nextSibling;
          }
          if (null == this.firstChild) {
            this.firstChild = fragment.firstChild;
          } else {
            fragment.lastChild.nextSibling = fragment.firstChild;
          }
          fragment.lastChild = fragment.lastChild;
          return fragment;
        }
        if (null == this.firstChild) {
          this.firstChild = this.lastChild = child;
        } else {
          this.lastChild.nextSibling = child;
          this.lastChild = child;
        }
        child.parentNode = this;
        return child;
      };
      NodeBase.prototype.insertBefore = function(child, anchor) {
        var prev = this.firstChild;
        if (prev !== anchor) {
          while (null != prev && prev.nextSibling !== anchor) {
            prev = prev.nextSibling;
          }
        }
        if (null == prev) {
          // set tail
          return this.appendChild(child);
        }
        if (child.nodeType === DomB_1.DomB.FRAGMENT) {
          var fragment = child;
          // set parentNode
          var el = fragment.firstChild;
          if (null == el) {
            // empty
            return fragment;
          }
          while (null != el) {
            el.parentNode = this;
            el = el.nextSibling;
          }
          // set to head
          if (prev === anchor && prev === this.firstChild) {
            this.firstChild = fragment.firstChild;
            fragment.lastChild.nextSibling = prev;
            return fragment;
          }
          // set middle
          prev.nextSibling = fragment.firstChild;
          fragment.lastChild.nextSibling = anchor;
          return fragment;
        }
        child.parentNode = this;
        if (prev === anchor && prev === this.firstChild) {
          // set head
          this.firstChild = child;
          child.nextSibling = prev;
          return child;
        }
        // set middle
        prev.nextSibling = child;
        child.nextSibling = anchor;
        return child;
      };
      NodeBase.prototype.removeChild = function(node) {
        if (null == node) {
          return;
        }
        var child = this.firstChild, prev = null;
        while (null != child && child !== node) {
          prev = child;
          child = child.nextSibling;
        }
        if (null == child) {
          return;
        }
        if (null == prev) {
          // is first child;
          this.firstChild = child.nextSibling;
        } else {
          prev.nextSibling = child.nextSibling;
        }
        if (this.lastChild === child) {
          this.lastChild = prev;
        }
        node.nextSibling = null;
        node.parentNode = null;
      };
      return NodeBase;
    }();
    exports.NodeBase = NodeBase;
    var OwnerDocument = /** @class */ function() {
      function OwnerDocument(el) {
        this._el = null;
        this._document = null;
        this._body = null;
        this._el = el;
      }
      Object.defineProperty(OwnerDocument.prototype, 'body', {
        get: function() {
          if (null != this._body) {
            return this._body;
          }
          var el, cursor = this._el;
          while (null != cursor) {
            if (cursor.nodeType === DomB_1.DomB.NODE) {
              el = cursor;
            }
            if ('BODY' === cursor.tagName || null == cursor.parentNode) {
              return this._body = el;
            }
            cursor = cursor.parentNode;
          }
          return null;
        },
        enumerable: false,
        configurable: true
      });
      return OwnerDocument;
    }();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_NodeBase === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_NodeBase) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_NodeBase, module.exports);
    } else {
      _src_html_dom_NodeBase = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_util_HtmlStream;
  (function() {
    var exports = null != _src_html_dom_util_HtmlStream ? _src_html_dom_util_HtmlStream : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.HtmlStreamPipe = exports.HtmlStream = void 0;
    var class_1 = _ref_utils_src_class;
    exports.HtmlStream = (0, class_1.class_create)({
      string: '',
      indent: 0,
      indentStr: '',
      minify: false,
      opts: null,
      ast: null,
      constructor: function(opts) {
        this.opts = opts;
        this.minify = 'prettyHtml' in opts ? true !== opts.prettyHtml : true;
        this.indent = 0;
        this.indentStr = doindent(opts.indent || 4, opts.indentChar || ' ');
      },
      toString: function() {
        return this.string;
      },
      process: function(node) {
        if (null == node) {
          return this;
        }
        if (node.write) {
          node.write(this);
          return this;
        }
        this.write(node.toString());
        return this;
      },
      newline: function() {
        if (false === this.minify) {
          this.string += '\n';
        }
        return this;
      },
      openBlock: function(c) {
        if (null != c) {
          this.write(c);
          this.newline();
        }
        this.indent++;
        return this;
      },
      closeBlock: function(c) {
        this.indent--;
        if (null != c) {
          this.newline();
          this.write(c);
        }
        return this;
      },
      write: function(str) {
        if (null == str) {
          return this;
        }
        if (true === this.minify) {
          this.string += str;
          return this;
        }
        var prfx = doindent(this.indent, this.indentStr);
        this.string += str.replace(/^/gm, prfx);
        return this;
      },
      print: function(str) {
        this.string += str;
      }
    });
    exports.HtmlStreamPipe = (0, class_1.class_create)({
      constructor: function(innerStream) {
        this.innerStream = innerStream;
        this.stream = new exports.HtmlStream(innerStream);
      },
      toString: function() {
        return this.stream.toString();
      }
    });
    var Proto = exports.HtmlStream.prototype;
    for (var key in Proto) {
      if ('toString' === key) {
        continue;
      }
      var fn = Proto[key];
      if ('function' === typeof fn) {
        exports.HtmlStreamPipe.prototype[key] = delegateToStreams(fn);
      }
    }
    function delegateToStreams(fn) {
      return function() {
        var streamA = this.innerStream, streamB = this.stream;
        fn.apply(streamA, arguments);
        fn.apply(streamB, arguments);
        return this;
      };
    }
    function doindent(count, c) {
      var output = '';
      while (count--) {
        output += c;
      }
      return output;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_util_HtmlStream === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_util_HtmlStream) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_util_HtmlStream, module.exports);
    } else {
      _src_html_dom_util_HtmlStream = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_ComponentNode;
  (function() {
    var exports = null != _src_html_dom_ComponentNode ? _src_html_dom_ComponentNode : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ComponentNode = void 0;
    var DomB_1 = _src_html_dom_DomB;
    var NodeBase_1 = _src_html_dom_NodeBase;
    var meta_1 = _src_util_meta;
    var exports_1 = _ref_mask_src_parser_exports;
    var const_1 = _src_const;
    var Meta_1 = _src_helper_Meta;
    var is_1 = _ref_utils_src_is;
    var HtmlStream_1 = _src_html_dom_util_HtmlStream;
    NodeBase_1 = /** @class */ function(_super) {
      __extends(ComponentNode, _super);
      function ComponentNode(node, model, ctx, container, ctr) {
        var _this = _super.call(this) || this;
        _this.nodeType = DomB_1.DomB.COMPONENT;
        _this.compoName = null;
        _this.compo = null;
        _this.node = null;
        _this.instance = null;
        _this.components = null;
        _this.ID = null;
        _this.modelID = null;
        _this.node = node;
        _this.compoName = node.compoName || node.tagName;
        return _this;
      }
      ComponentNode.prototype.setComponent = function(compo, model, ctx) {
        this.ID = compo.ID;
        this.compo = compo;
        this.setModelId_(compo, model, ctx);
      };
      ComponentNode.prototype.setModelId_ = function(compo, model, ctx) {
        if ((0, meta_1.meta_getModelMode)(compo).isServer()) {
          return;
        }
        if (compo.modelRef) {
          var id = ctx._models.tryAppend(compo);
          if (-1 !== id) {
            this.modelID = id;
          }
          return;
        }
        if (null == compo.model || compo.model === model) {
          return;
        }
        id = ctx._models.tryAppend(compo);
        if (-1 !== id) {
          this.modelID = id;
        }
      };
      ComponentNode.prototype.initModelID = function(ctx, parentsModel) {
        var compo = this.compo;
        if ((0, meta_1.meta_getModelMode)(compo).isServer()) {
          return;
        }
        if (compo.modelRef) {
          var id = ctx._models.tryAppend(compo);
          if (-1 !== id) {
            this.modelID = id;
          }
          return;
        }
        if (null == compo.model || compo.model === parentsModel) {
          return;
        }
        id = ctx._models.tryAppend(compo);
        if (-1 !== id) {
          this.modelID = id;
        }
      };
      ComponentNode.prototype.toString = function() {
        var compo = this.compo;
        if (null != compo.__cached) {
          return compo.__cached;
        }
        var meta = (0, meta_1.meta_get)(compo);
        if (meta.mode === const_1.mode_CLIENT) {
          var json_1 = {
            mask: (0, exports_1.mask_stringify)(this.node, 0)
          };
          var info_1 = {
            type: 'r',
            single: true
          };
          json_1 = Meta_1.Meta.stringify(json_1, info_1);
          if (meta.cache /* unstrict */) {
            compo.__cached = json_1;
          }
          return json_1;
        }
        info_1 = {
          ID: this.ID,
          modelID: this.modelID,
          compoName: compo.compoName,
          attr: compo.attr,
          expression: compo.expression,
          nodes: _serializeNodes(meta, this),
          scope: _serializeScope(meta, compo)
        };
        json_1 = {
          single: null == this.firstChild,
          type: 't',
          mode: meta.mode
        };
        var string = Meta_1.Meta.stringify(info_1, json_1);
        if (null != compo.toHtml) {
          string += compo.toHtml();
        } else {
          string += _stringifyChildren(this);
        }
        if (meta.mode !== const_1.mode_CLIENT) {
          string += Meta_1.Meta.close(info_1, json_1);
        }
        if (meta.cache) {
          compo.__cached = string;
        }
        return string;
      };
      ComponentNode.prototype.write = function(stream) {
        var compo = this.compo;
        var cache = compo.__cached;
        if ('string' === typeof cache) {
          stream.write(cache);
          return;
        }
        cache = null;
        var meta = (0, meta_1.meta_get)(compo);
        if (meta.cache /* unstrict */) {
          cache = new HtmlStream_1.HtmlStreamPipe(stream);
          stream = cache;
        }
        if (meta.mode === const_1.mode_CLIENT) {
          var json_2 = {
            mask: (0, exports_1.mask_stringify)(this.node, stream.minify ? 0 : 4)
          };
          var info_2 = {
            type: 'r',
            single: true
          };
          stream.write(Meta_1.Meta.stringify(json_2, info_2));
          if (null != cache) {
            compo.__cached = cache.toString();
          }
          return;
        }
        json_2 = {
          ID: this.ID,
          modelID: this.modelID,
          compoName: compo.compoName,
          attr: compo.attr,
          expression: compo.expression,
          nodes: _serializeNodes(meta, this),
          scope: _serializeScope(meta, compo)
        }, info_2 = {
          single: null == this.firstChild && null == compo.toHtml,
          type: 't',
          mode: meta.mode
        };
        meta = Meta_1.Meta.stringify(json_2, info_2);
        if (meta) {
          stream.openBlock(meta);
        }
        if (null != compo.toHtml) {
          stream.write(compo.toHtml());
        } else {
          _stringifyChildrenStream(this, stream);
        }
        meta = Meta_1.Meta.close(json_2, info_2);
        if (meta) {
          stream.closeBlock(meta);
        }
        if (null != cache) {
          compo.__cached = cache.toString();
        }
      };
      return ComponentNode;
    }(NodeBase_1.NodeBase);
    exports.ComponentNode = NodeBase_1;
    function _stringifyChildren(compoEl) {
      var el = compoEl.firstChild, str = '';
      while (null != el) {
        str += el.toString();
        el = el.nextSibling;
      }
      return str;
    }
    function _stringifyChildrenStream(compoEl, stream) {
      var el = compoEl.firstChild;
      while (null != el) {
        stream.process(el);
        el = el.nextSibling;
        if (null != el) {
          stream.newline();
        }
      }
    }
    function _serializeNodes(meta, compoEl) {
      meta = meta.serializeNodes;
      if (null == meta || false === meta) {
        return null;
      }
      var fn = null;
      if ((0, is_1.is_Function)(meta)) {
        fn = meta;
      }
      if (null == fn && (0, is_1.is_Function)(compoEl.compo.serializeNodes)) {
        fn = compoEl.compo.serializeNodes;
      }
      if (null == fn) {
        fn = exports_1.mask_stringify;
      }
      return fn.call(compoEl.compo, compoEl.node);
    }
    function _serializeScope(meta, compo) {
      if (null == meta.serializeScope) {
        return null;
      }
      meta = compo.scope;
      if (null == meta) {
        return null;
      }
      var parent = compo.parent, model = compo.model;
      while (null == model && null != parent) {
        model = parent.model;
        parent = parent.parent;
      }
      return compo.serializeScope(meta, model);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_ComponentNode === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_ComponentNode) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_ComponentNode, module.exports);
    } else {
      _src_html_dom_ComponentNode = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_tags;
  (function() {
    var exports = null != _src_html_dom_tags ? _src_html_dom_tags : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.SingleTags = void 0;
    exports.SingleTags = {
      area: 1,
      base: 1,
      br: 1,
      col: 1,
      embed: 1,
      hr: 1,
      img: 1,
      input: 1,
      keygen: 1,
      link: 1,
      menuitem: 1,
      meta: 1,
      param: 1,
      source: 1,
      track: 1,
      wbr: 1
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_tags === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_tags) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_tags, module.exports);
    } else {
      _src_html_dom_tags = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_jq_classList;
  (function() {
    var exports = null != _src_html_dom_jq_classList ? _src_html_dom_jq_classList : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ClassList = void 0;
    var selector_1 = _src_html_dom_jq_util_selector;
    var ClassList = /** @class */ function() {
      function ClassList(node) {
        this.attr = node.attributes;
        this.className = this.attr['class'] || '';
      }
      Object.defineProperty(ClassList.prototype, 'length', {
        get: function() {
          return this.className.split(/\s+/).length;
        },
        enumerable: false,
        configurable: true
      });
      ClassList.prototype.contains = function(_class) {
        return -1 !== (0, selector_1.sel_classIndex)(this.className, _class);
      };
      ClassList.prototype.remove = function(_class) {
        var index = (0, selector_1.sel_classIndex)(this.className, _class);
        if (-1 === index) {
          return;
        }
        var str = this.className;
        this.className = this.attr['class'] = str.substring(0, index) + str.substring(index + _class.length);
      };
      ClassList.prototype.add = function(_class) {
        if (-1 !== (0, selector_1.sel_classIndex)(this.className, _class)) {
          return;
        }
        this.className = this.attr['class'] = this.className + ('' === this.className ? '' : ' ') + _class;
      };
      return ClassList;
    }();
    exports.ClassList = ClassList;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_jq_classList === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_jq_classList) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_jq_classList, module.exports);
    } else {
      _src_html_dom_jq_classList = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_util_html;
  (function() {
    var exports = null != _src_html_dom_util_html ? _src_html_dom_util_html : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.html_serializeAttributes = void 0;
    var is_1 = _ref_utils_src_is;
    function html_serializeAttributes(node) {
      var key, value, attr = node.attributes, str = '';
      for (key in attr) {
        value = attr[key];
        if ((0, is_1.is_String)(value)) {
          value = value.replace(/"/g, '&quot;');
        }
        str += ' ' + key + '="' + value + '"';
      }
      return str;
    }
    exports.html_serializeAttributes = html_serializeAttributes;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_util_html === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_util_html) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_util_html, module.exports);
    } else {
      _src_html_dom_util_html = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_util_node;
  (function() {
    var exports = null != _src_html_dom_util_node ? _src_html_dom_util_node : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.node_empty = exports.node_insertBefore = void 0;
    function node_insertBefore(node, anchor) {
      return anchor.parentNode.insertBefore(node, anchor);
    }
    exports.node_insertBefore = node_insertBefore;
    function node_empty(node) {
      while (null != node.firstChild) {
        node.removeChild(node.firstChild);
      }
    }
    exports.node_empty = node_empty;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_util_node === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_util_node) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_util_node, module.exports);
    } else {
      _src_html_dom_util_node = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_TextNodeInn;
  (function() {
    var exports = null != _src_html_dom_TextNodeInn ? _src_html_dom_TextNodeInn : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.TextNodeInn = void 0;
    var DomB_1 = _src_html_dom_DomB;
    var NodeBase_1 = _src_html_dom_NodeBase;
    NodeBase_1 = /** @class */ function(_super) {
      __extends(TextNodeInn, _super);
      function TextNodeInn(text) {
        var _this = _super.call(this) || this;
        _this.nodeType = DomB_1.DomB.TEXTNODE;
        _this.textContent = '';
        _this.textContent = String(null == text ? '' : text);
        return _this;
      }
      TextNodeInn.prototype.toString = function() {
        return escape(this.textContent);
      };
      return TextNodeInn;
    }(NodeBase_1.NodeBase);
    exports.TextNodeInn = NodeBase_1;
    function escape(html) {
      return html.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_TextNodeInn === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_TextNodeInn) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_TextNodeInn, module.exports);
    } else {
      _src_html_dom_TextNodeInn = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_ElementNodeInn;
  (function() {
    var exports = null != _src_html_dom_ElementNodeInn ? _src_html_dom_ElementNodeInn : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ElementNodeInn = void 0;
    var NodeBase_1 = _src_html_dom_NodeBase;
    var DomB_1 = _src_html_dom_DomB;
    var tags_1 = _src_html_dom_tags;
    var classList_1 = _src_html_dom_jq_classList;
    var html_1 = _src_html_dom_util_html;
    var node_1 = _src_html_dom_util_node;
    var TextNodeInn_1 = _src_html_dom_TextNodeInn;
    NodeBase_1 = /** @class */ function(_super) {
      __extends(ElementNodeInn, _super);
      function ElementNodeInn(name) {
        var _this = _super.call(this) || this;
        _this.nodeType = DomB_1.DomB.NODE;
        _this.attributes = Object.create(null);
        _this.tagName = null === name || void 0 === name ? void 0 : name.toUpperCase();
        return _this;
      }
      ElementNodeInn.prototype.setAttribute = function(key, value) {
        this.attributes[key] = value;
      };
      ElementNodeInn.prototype.getAttribute = function(key) {
        return this.attributes[key];
      };
      Object.defineProperty(ElementNodeInn.prototype, 'classList', {
        get: function() {
          return new classList_1.ClassList(this);
        },
        enumerable: false,
        configurable: true
      });
      ElementNodeInn.prototype.toString = function() {
        var tagName = this.tagName.toLowerCase();
        var string = '<' + tagName;
        var attrStr = (0, html_1.html_serializeAttributes)(this);
        if ('' !== attrStr) {
          string += attrStr;
        }
        attrStr = 1 === tags_1.SingleTags[tagName];
        var element = this.firstChild;
        if (null == element) {
          return string + (attrStr ? '/>' : '></' + tagName + '>');
        }
        string += attrStr ? '/>' : '>';
        if (attrStr) {
          string += '\x3c!--~--\x3e';
        }
        while (null != element) {
          string += element.toString();
          element = element.nextSibling;
        }
        if (attrStr) {
          return string + '\x3c!--/~--\x3e';
        }
        return string + '</' + tagName + '>';
      };
      ElementNodeInn.prototype.write = function(stream) {
        var tagName = this.tagName.toLowerCase();
        var minify = stream.minify;
        if (false === minify && 'pre' === tagName) {
          stream.minify = true;
        }
        var string = '<' + tagName;
        var attrStr = (0, html_1.html_serializeAttributes)(this);
        if ('' !== attrStr) {
          string += attrStr;
        }
        stream.write(string);
        attrStr = 1 === tags_1.SingleTags[tagName];
        var element = this.firstChild;
        if (null == element) {
          stream.print(attrStr ? '/>' : '></' + tagName + '>');
          stream.minify = minify;
          return stream;
        }
        stream.print(attrStr ? '/>' : '>');
        if (attrStr) {
          stream.newline();
          stream.write('\x3c!--~--\x3e');
        }
        while (null != element) {
          stream.openBlock(null);
          stream.newline();
          stream.process(element);
          stream.closeBlock(null);
          element = element.nextSibling;
        }
        if (attrStr) {
          stream.newline();
          stream.write('\x3c!--/~--\x3e');
        }
        stream.newline();
        stream.write('</' + tagName + '>');
        stream.minify = minify;
        return stream;
      };
      Object.defineProperty(ElementNodeInn.prototype, 'value', {
        // generic properties
        get: function() {
          return this.attributes.value;
        },
        set: function(value) {
          this.attributes.value = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ElementNodeInn.prototype, 'selected', {
        get: function() {
          return this.attributes.selected;
        },
        set: function(value) {
          if (!value) {
            delete this.attributes.selected;
            return;
          }
          this.attributes.selected = 'selected';
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ElementNodeInn.prototype, 'checked', {
        get: function() {
          return this.attributes.checked;
        },
        set: function(value) {
          if (!value) {
            delete this.attributes.checked;
            return;
          }
          this.attributes.checked = 'checked';
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ElementNodeInn.prototype, 'textContent', {
        get: function() {
          var _a;
          var child = this.firstChild;
          var txt = '';
          while (null != child) {
            if ('textContent' in child) {
              txt += null !== (_a = child.textContent) && void 0 !== _a ? _a : '';
            }
            // if (child.nodeType === DomB.TEXTNODE) {
            //     txt += child.textContent;
            //     continue;
            // }
            //txt += child.textContent || '';
            child = child.nextSibling;
          }
          return txt;
        },
        set: function(str) {
          (0, node_1.node_empty)(this);
          this.appendChild(new TextNodeInn_1.TextNodeInn(str));
        },
        enumerable: false,
        configurable: true
      });
      return ElementNodeInn;
    }(NodeBase_1.NodeBase);
    exports.ElementNodeInn = NodeBase_1;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_ElementNodeInn === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_ElementNodeInn) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_ElementNodeInn, module.exports);
    } else {
      _src_html_dom_ElementNodeInn = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_ScriptElementInn;
  (function() {
    var exports = null != _src_html_dom_ScriptElementInn ? _src_html_dom_ScriptElementInn : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ScriptElementInn = void 0;
    var is_1 = _ref_utils_src_is;
    var html_1 = _src_html_dom_util_html;
    var ElementNodeInn_1 = _src_html_dom_ElementNodeInn;
    ElementNodeInn_1 = /** @class */ function(_super) {
      __extends(ScriptElementInn, _super);
      function ScriptElementInn() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ScriptElementInn.prototype.toString = function() {
        var string = '<script', attrStr = (0, html_1.html_serializeAttributes)(this);
        if ('' !== attrStr) {
          string += ' ' + attrStr;
        }
        string += '>';
        attrStr = (0, is_1.is_Function)(this.textContent) ? this.textContent() : this.textContent;
        if (attrStr) {
          string += attrStr;
        }
        string += '<\/script>';
        return string;
      };
      ScriptElementInn.prototype.write = function(stream) {
        var open = '<script', close = '<\/script>';
        var attrStr = (0, html_1.html_serializeAttributes)(this);
        if ('' !== attrStr) {
          open += ' ' + attrStr;
        }
        open += '>';
        attrStr = (0, is_1.is_Function)(this.textContent) ? this.textContent() : this.textContent;
        if (!attrStr /*unstrict*/) {
          stream.write(open + close);
          return;
        }
        stream.openBlock(open).write(attrStr).closeBlock(close);
      };
      return ScriptElementInn;
    }(ElementNodeInn_1.ElementNodeInn);
    exports.ScriptElementInn = ElementNodeInn_1;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_ScriptElementInn === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_ScriptElementInn) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_ScriptElementInn, module.exports);
    } else {
      _src_html_dom_ScriptElementInn = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_UtilNodeInn;
  (function() {
    var exports = null != _src_html_dom_UtilNodeInn ? _src_html_dom_UtilNodeInn : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.UtilNodeInn = void 0;
    var DomB_1 = _src_html_dom_DomB;
    var Meta_1 = _src_helper_Meta;
    var NodeBase_1 = _src_html_dom_NodeBase;
    NodeBase_1 = /** @class */ function(_super) {
      __extends(UtilNodeInn, _super);
      function UtilNodeInn(type, name, value, attrName) {
        var _this = _super.call(this) || this;
        _this.meta = null;
        _this.nodeType = DomB_1.DomB.UTILNODE;
        _this.meta = {
          utilType: type,
          utilName: name,
          value: value,
          attrName: attrName,
          current: null
        };
        return _this;
      }
      // seems is implenented in NodeBase
      // appendChild (el) {
      //     this.firstChild = el;
      // }
      UtilNodeInn.prototype.toString = function() {
        var json = this.meta, info = {
          type: 'u',
          single: null == this.firstChild
        }, string = Meta_1.Meta.stringify(json, info);
        if (null == this.firstChild) {
          return string;
        }
        return string + this.firstChild.toString() + Meta_1.Meta.close(json, info);
      };
      return UtilNodeInn;
    }(NodeBase_1.NodeBase);
    exports.UtilNodeInn = NodeBase_1;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_UtilNodeInn === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_UtilNodeInn) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_UtilNodeInn, module.exports);
    } else {
      _src_html_dom_UtilNodeInn = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_DocumentFragmentInn;
  (function() {
    var exports = null != _src_html_dom_DocumentFragmentInn ? _src_html_dom_DocumentFragmentInn : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.DocumentFragmentInn = void 0;
    var NodeBase_1 = _src_html_dom_NodeBase;
    var DomB_1 = _src_html_dom_DomB;
    var is_1 = _ref_utils_src_is;
    NodeBase_1 = /** @class */ function(_super) {
      __extends(DocumentFragmentInn, _super);
      function DocumentFragmentInn() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeType = DomB_1.DomB.FRAGMENT;
        return _this;
      }
      DocumentFragmentInn.prototype.toString = function() {
        var element = this.firstChild, string = '';
        while (null != element) {
          string += element.toString();
          element = element.nextSibling;
        }
        return string;
      };
      DocumentFragmentInn.prototype.write = function(stream) {
        var element = this.firstChild;
        while (null != element) {
          if ('write' in element && (0, is_1.is_Function)(element.write)) {
            element.write(stream);
          } else {
            stream.write(element.toString());
          }
          element = element.nextSibling;
          if (null != element) {
            stream.newline();
          }
        }
        return stream;
      };
      return DocumentFragmentInn;
    }(NodeBase_1.NodeBase);
    exports.DocumentFragmentInn = NodeBase_1;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_DocumentFragmentInn === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_DocumentFragmentInn) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_DocumentFragmentInn, module.exports);
    } else {
      _src_html_dom_DocumentFragmentInn = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_DoctypeNodeInn;
  (function() {
    var exports = null != _src_html_dom_DoctypeNodeInn ? _src_html_dom_DoctypeNodeInn : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.DoctypeNodeInn = void 0;
    var DomB_1 = _src_html_dom_DomB;
    var ElementNodeInn_1 = _src_html_dom_ElementNodeInn;
    ElementNodeInn_1 = /** @class */ function(_super) {
      __extends(DoctypeNodeInn, _super);
      function DoctypeNodeInn() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeType = DomB_1.DomB.DOCTYPE;
        return _this;
      }
      DoctypeNodeInn.prototype.toString = function() {
        return DEFAULT;
      };
      DoctypeNodeInn.prototype.write = function(stream) {
        stream.write(DEFAULT);
      };
      return DoctypeNodeInn;
    }(ElementNodeInn_1.ElementNodeInn);
    exports.DoctypeNodeInn = ElementNodeInn_1;
    var DEFAULT = '<!DOCTYPE html>';
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_DoctypeNodeInn === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_DoctypeNodeInn) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_DoctypeNodeInn, module.exports);
    } else {
      _src_html_dom_DoctypeNodeInn = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_StyleElementInn;
  (function() {
    var exports = null != _src_html_dom_StyleElementInn ? _src_html_dom_StyleElementInn : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.StyleElementInn = void 0;
    var is_1 = _ref_utils_src_is;
    var html_1 = _src_html_dom_util_html;
    var ElementNodeInn_1 = _src_html_dom_ElementNodeInn;
    ElementNodeInn_1 = /** @class */ function(_super) {
      __extends(StyleElementInn, _super);
      function StyleElementInn() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      StyleElementInn.prototype.toString = function() {
        var string = '<style', attrStr = (0, html_1.html_serializeAttributes)(this);
        if ('' !== attrStr) {
          string += ' ' + attrStr;
        }
        string += '>';
        attrStr = (0, is_1.is_Function)(this.textContent) ? this.textContent() : this.textContent;
        if (attrStr) {
          string += attrStr;
        }
        string += '</style>';
        return string;
      };
      StyleElementInn.prototype.write = function(stream) {
        var open = '<style', close = '</style>';
        var attrStr = (0, html_1.html_serializeAttributes)(this);
        if ('' !== attrStr) {
          open += ' ' + attrStr;
        }
        open += '>';
        attrStr = (0, is_1.is_Function)(this.textContent) ? this.textContent() : this.textContent;
        if (!attrStr /*unstrict*/) {
          stream.write(open + close);
          return;
        }
        stream.openBlock(open).write(attrStr).closeBlock(close);
      };
      return StyleElementInn;
    }(ElementNodeInn_1.ElementNodeInn);
    exports.StyleElementInn = ElementNodeInn_1;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_StyleElementInn === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_StyleElementInn) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_StyleElementInn, module.exports);
    } else {
      _src_html_dom_StyleElementInn = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_documentInn;
  (function() {
    var exports = null != _src_html_dom_documentInn ? _src_html_dom_documentInn : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.documentInn = void 0;
    var ScriptElementInn_1 = _src_html_dom_ScriptElementInn;
    var DocumentFragmentInn_1 = _src_html_dom_DocumentFragmentInn;
    var ElementNodeInn_1 = _src_html_dom_ElementNodeInn;
    var TextNodeInn_1 = _src_html_dom_TextNodeInn;
    var CommentNode_1 = _src_html_dom_CommentNode;
    var ComponentNode_1 = _src_html_dom_ComponentNode;
    var DoctypeNodeInn_1 = _src_html_dom_DoctypeNodeInn;
    var StyleElementInn_1 = _src_html_dom_StyleElementInn;
    exports.documentInn = {
      createDocumentFragment: function() {
        return new DocumentFragmentInn_1.DocumentFragmentInn();
      },
      createElement: function(name) {
        var _a = null !== (_a = HtmlTags[name.toLowerCase()]) && void 0 !== _a ? _a : ElementNodeInn_1.ElementNodeInn;
        return new _a(name);
      },
      createElementNS: function(ns, name) {
        return exports.documentInn.createElement(name);
      },
      createTextNode: function(text) {
        return new TextNodeInn_1.TextNodeInn(text);
      },
      createComment: function(text) {
        return new CommentNode_1.CommentNode(text);
      },
      createComponent: function(compo, model, ctx, container, ctr) {
        return new ComponentNode_1.ComponentNode(compo, model, ctx, container, ctr);
      }
    };
    var HtmlTags = {
      /*
     * Most common html tags
     * http://jsperf.com/not-in-vs-null/3
     */
      a: null,
      abbr: null,
      article: null,
      aside: null,
      audio: null,
      b: null,
      big: null,
      blockquote: null,
      br: null,
      button: null,
      canvas: null,
      datalist: null,
      details: null,
      div: null,
      em: null,
      fieldset: null,
      footer: null,
      form: null,
      h1: null,
      h2: null,
      h3: null,
      h4: null,
      h5: null,
      h6: null,
      header: null,
      i: null,
      img: null,
      input: null,
      label: null,
      legend: null,
      li: null,
      menu: null,
      nav: null,
      ol: null,
      option: null,
      p: null,
      pre: null,
      section: null,
      select: null,
      small: null,
      span: null,
      strong: null,
      script: ScriptElementInn_1.ScriptElementInn,
      style: StyleElementInn_1.StyleElementInn,
      svg: null,
      table: null,
      tbody: null,
      td: null,
      textarea: null,
      tfoot: null,
      th: null,
      thead: null,
      tr: null,
      tt: null,
      ul: null,
      video: null,
      '!doctype': DoctypeNodeInn_1.DoctypeNodeInn
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_documentInn === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_documentInn) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_documentInn, module.exports);
    } else {
      _src_html_dom_documentInn = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_util_ctx;
  (function() {
    var exports = null != _src_util_ctx ? _src_util_ctx : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ctx_stringify = void 0;
    function ctx_stringify(ctx) {
      var x, has = false, obj = {};
      for (var key in ctx) {
        if (95 /*_*/ === key.charCodeAt(0)) {
          continue;
        }
        x = ctx[key];
        var type = typeof x;
        if (null == x || 'object' /* skip complex objects */ === type || 'function' === type) {
          continue;
        }
        if ('async' === key) {
          continue;
        }
        has = true;
        obj[key] = x;
      }
      return false === has ? null : obj;
    }
    exports.ctx_stringify = ctx_stringify;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_util_ctx === module.exports) {
      // do nothing if
    } else if (__isObj(_src_util_ctx) && __isObj(module.exports)) {
      Object.assign(_src_util_ctx, module.exports);
    } else {
      _src_util_ctx = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_util_traverse;
  (function() {
    var exports = null != _src_html_dom_util_traverse ? _src_html_dom_util_traverse : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.trav_getChild = exports.trav_getDoc = void 0;
    var DomB_1 = _src_html_dom_DomB;
    // @Obsolete, remove `:document` component for for doctype.
    function trav_getDoc(el, _deep) {
      if (null != el && el.nodeType === DomB_1.DomB.FRAGMENT) {
        el = el.firstChild;
      }
      if (null == el) {
        return null;
      }
      if (':document' === el.compoName) {
        return el;
      }
      if (null == _deep) {
        _deep = 0;
      }
      if (4 === _deep) {
        return null;
      }
      var doc;
      doc = trav_getDoc(el.nextSibling, _deep);
      if (doc) {
        return doc;
      }
      return trav_getDoc(el.firstChild, ++_deep);
    }
    exports.trav_getDoc = trav_getDoc;
    function trav_getChild(parent, tagName) {
      var el = parent.firstChild;
      while (el && el.tagName !== tagName) {
        el = el.nextSibling;
      }
      return el;
    }
    exports.trav_getChild = trav_getChild;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_util_traverse === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_util_traverse) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_util_traverse, module.exports);
    } else {
      _src_html_dom_util_traverse = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_util_stringify;
  (function() {
    var exports = null != _src_html_dom_util_stringify ? _src_html_dom_util_stringify : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.stringifyInn = void 0;
    var CommentNode_1 = _src_html_dom_CommentNode;
    var Meta_1 = _src_helper_Meta;
    var DomB_1 = _src_html_dom_DomB;
    var ctx_1 = _src_util_ctx;
    var reporters_1 = _ref_mask_src_util_reporters;
    var HtmlStream_1 = _src_html_dom_util_HtmlStream;
    var documentInn_1 = _src_html_dom_documentInn;
    var traverse_1 = _src_html_dom_util_traverse;
    var DoctypeNodeInn_1 = _src_html_dom_DoctypeNodeInn;
    function stringifyInn(document_, model, ctx, compo) {
      document_ = prepairDocument(document_);
      var hasDoctype = _hasDoctype(document_);
      var stream = new HtmlStream_1.HtmlStream(ctx.config || {});
      compo = null != compo && null != compo.components && 0 !== compo.components.length;
      var meta;
      var modules;
      if (compo) {
        meta = comment_meta(ctx);
        modules = comment_modules(ctx, stream.minify);
      }
      if (hasDoctype) {
        document_ = prepairDocument_withDoctype(document_, modules, meta);
      }
      if (hasDoctype || false === compo) {
        stream.process(document_);
        return stream.toString();
      }
      ctx = (0, traverse_1.trav_getDoc)(document_);
      if (null != ctx) {
        document_ = prepairDocument_withDocumentComponent(document_, ctx, modules, meta);
        stream.process(document_);
        return stream.toString();
      }
      if (null == meta && null == modules) {
        stream.process(document_);
        return stream.toString();
      }
      stream.process(meta && meta.header).newline().process(modules).newline().process(document_).newline().process(meta && meta.footer);
      return stream.toString();
    }
    exports.stringifyInn = stringifyInn;
    function prepairDocument(document_) {
      var docEl = document_;
      if (false === _hasDoctype(docEl)) {
        document_ = (0, traverse_1.trav_getDoc)(docEl);
        if (document_) {
          var fragmentEl = documentInn_1.documentInn.createDocumentFragment();
          fragmentEl.appendChild(new DoctypeNodeInn_1.DoctypeNodeInn());
          var arr = document_.childNodes;
          for (var i = 0; i < arr.length; i++) {
            fragmentEl.appendChild(arr[i]);
          }
          docEl = fragmentEl;
        } else {
          return docEl;
        }
      }
      var html = (0, traverse_1.trav_getChild)(docEl, 'HTML');
      if (null == html) {
        html = documentInn_1.documentInn.createElement('html');
        var doctype = (0, traverse_1.trav_getChild)(docEl, '!DOCTYPE');
        docEl.removeChild(doctype);
        fragmentEl = documentInn_1.documentInn.createDocumentFragment();
        fragmentEl.appendChild(doctype);
        fragmentEl.appendChild(html);
        var el = docEl.firstChild;
        while (null != el) {
          var next = el.nextSibling;
          if (el !== doctype && el !== html) {
            docEl.removeChild(el);
            html.appendChild(el);
          }
          el = next;
        }
        docEl = fragmentEl;
      }
      var head = (0, traverse_1.trav_getChild)(html, 'HEAD');
      var body = (0, traverse_1.trav_getChild)(html, 'BODY');
      if (null == body) {
        body = documentInn_1.documentInn.createElement('body');
        el = html.firstChild;
        while (null != el) {
          next = el.nextSibling;
          if (el !== head) {
            html.removeChild(el);
            body.appendChild(el);
          }
          el = next;
        }
        html.appendChild(body);
      }
      return docEl;
    }
    function prepairDocument_withDoctype(document, modules, meta) {
      if (null == modules && null == meta) {
        return document;
      }
      var html = (0, traverse_1.trav_getChild)(document, 'HTML');
      html = (0, traverse_1.trav_getChild)(html, 'BODY');
      if (null != modules) {
        el_prepend(html, modules);
      }
      if (null != meta) {
        el_prepend(html, meta.header);
        el_append(html, meta.footer);
      }
      return document;
    }
    // @Obsolete (use doctype instead)
    function prepairDocument_withDocumentComponent(document, documentElement, modules, meta) {
      documentElement = (0, traverse_1.trav_getChild)(documentElement, 'HTML');
      if (null != documentElement) {
        documentElement = (0, traverse_1.trav_getChild)(documentElement, 'BODY');
        if (null != documentElement) {
          el_prepend(documentElement, modules);
          if (null != meta) {
            el_prepend(documentElement, meta.header);
            el_append(documentElement, meta.footer);
          }
        } else {
          (0, reporters_1.log_error)('Body not found');
        }
      }
      return document;
    }
    function comment_meta(ctx) {
      var model_ = ctx._models.stringify(), ctx_ = (0, ctx_1.ctx_stringify)(ctx), ctx = ctx._id;
      if (null == model_ && null == ctx_) {
        return null;
      }
      model_ = {
        model: model_ || '{}',
        ctx: ctx_,
        ID: ctx
      }, ctx_ = {
        type: 'm'
      };
      return {
        header: new CommentNode_1.CommentNode(Meta_1.Meta.stringify(model_, ctx_)),
        footer: new CommentNode_1.CommentNode(Meta_1.Meta.close(model_, ctx_))
      };
    }
    function comment_modules(ctx, minify) {
      if (null == ctx._modules) {
        return null;
      }
      ctx = ctx._modules.stringify({
        indent: minify ? 0 : 4
      });
      if (null == ctx || '' === ctx) {
        return null;
      }
      minify = Meta_1.Meta.stringify({
        mask: ctx
      }, {
        type: 'r',
        single: true
      });
      return new CommentNode_1.CommentNode(minify);
    }
    function el_append(el, x) {
      if (null == x) {
        return;
      }
      el.appendChild(x);
    }
    function el_prepend(el, x) {
      if (null == x) {
        return;
      }
      el.insertBefore(x, el.firstChild);
    }
    function _hasDoctype(fragmentEl) {
      if (fragmentEl.nodeType !== DomB_1.DomB.FRAGMENT) {
        return false;
      }
      var el = fragmentEl.firstChild;
      while (null != el) {
        if (el.nodeType === DomB_1.DomB.DOCTYPE) {
          return true;
        }
        el = el.nextSibling;
      }
      return false;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_util_stringify === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_util_stringify) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_util_stringify, module.exports);
    } else {
      _src_html_dom_util_stringify = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_dom_exports;
  (function() {
    var exports = null != _src_html_dom_exports ? _src_html_dom_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.HtmlDom = void 0;
    var DomB_1 = _src_html_dom_DomB;
    var CommentNode_1 = _src_html_dom_CommentNode;
    var ComponentNode_1 = _src_html_dom_ComponentNode;
    var ElementNodeInn_1 = _src_html_dom_ElementNodeInn;
    var TextNodeInn_1 = _src_html_dom_TextNodeInn;
    var ScriptElementInn_1 = _src_html_dom_ScriptElementInn;
    var UtilNodeInn_1 = _src_html_dom_UtilNodeInn;
    var DocumentFragmentInn_1 = _src_html_dom_DocumentFragmentInn;
    var documentInn_1 = _src_html_dom_documentInn;
    var stringify_1 = _src_html_dom_util_stringify;
    var DoctypeNodeInn_1 = _src_html_dom_DoctypeNodeInn;
    var refs_1 = _ref_utils_src_refs;
    (function(HtmlDom) {
      HtmlDom.document = documentInn_1.documentInn;
      HtmlDom.DocumentFragment = DocumentFragmentInn_1.DocumentFragmentInn;
      HtmlDom.Comment = CommentNode_1.CommentNode;
      HtmlDom.Component = ComponentNode_1.ComponentNode;
      HtmlDom.DOCTYPE = DoctypeNodeInn_1.DoctypeNodeInn;
      HtmlDom.Element = ElementNodeInn_1.ElementNodeInn;
      HtmlDom.TextNode = TextNodeInn_1.TextNodeInn;
      HtmlDom.ScriptElement = ScriptElementInn_1.ScriptElementInn;
      HtmlDom.UtilNode = UtilNodeInn_1.UtilNodeInn;
      HtmlDom.Dom = DomB_1.DomB;
      HtmlDom.stringify = stringify_1.stringifyInn;
    })(exports.HtmlDom || (exports.HtmlDom = {}));
    // Set document to refs to be accessable from other modules
    (0, refs_1.setDocument)(documentInn_1.documentInn);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_dom_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_dom_exports) && __isObj(module.exports)) {
      Object.assign(_src_html_dom_exports, module.exports);
    } else {
      _src_html_dom_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_delegate_build_node;
  (function() {
    var exports = null != _ref_mask_src_builder_delegate_build_node ? _ref_mask_src_builder_delegate_build_node : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.el_writeProps = exports.el_writeAttributes = exports.build_nodeFactory = void 0;
    var is_1 = _ref_utils_src_is;
    var exports_1 = _ref_mask_src_custom_exports;
    var obj_1 = _ref_utils_src_obj;
    function build_nodeFactory(config) {
      var _a;
      var el_create;
      (function(doc, factory) {
        el_create = function(name) {
          return factory(name, doc);
        };
      })(null !== (_a = config.document) && void 0 !== _a ? _a : 'undefined' === typeof document ? null : document, config.create);
      return function build_node(node, model, ctx, container, ctr, children) {
        var el = el_create(node.tagName);
        if (null == el) {
          return;
        }
        if (null != children) {
          children.push(el);
          children = ctr.ID;
          if (null != children) {
            el.setAttribute('x-compo-id', children);
          }
        }
        // ++ insert el into container before setting attributes, so that in any
        // custom util parentNode is available. This is for mask.node important
        // http://jsperf.com/setattribute-before-after-dom-insertion/2
        if (null != container) {
          container.appendChild(el);
        }
        children = node.attr;
        if (null != children) {
          el_writeAttributes(el, node, children, model, ctx, container, ctr);
        }
        children = node.props;
        if (null != children) {
          el_writeProps(el, node, children, model, ctx, container, ctr);
        }
        return el;
      };
    }
    exports.build_nodeFactory = build_nodeFactory;
    function el_writeAttributes(el, node, attr, model, ctx, container, ctr) {
      for (var key in attr) {
        var mix = attr[key];
        mix = (0, is_1.is_Function)(mix) ? getValByFn('attr', mix, key, model, ctx, el, ctr) : mix;
        if (null == mix) {
          continue;
        }
        /** When not setting empty string as value to option tag, the inner text is used for value */
        if ('' === mix && 'value' !== key) {
          continue;
        }
        var fn = exports_1.custom_Attributes[key];
        if (null != fn) {
          fn(node, mix, model, ctx, el, ctr, container);
        } else {
          el.setAttribute(key, mix);
        }
      }
    }
    exports.el_writeAttributes = el_writeAttributes;
    function el_writeProps(el, node, props, model, ctx, container, ctr) {
      for (var key in props) {
        // if (key.indexOf('style.') === 0) {
        // 	key = prepairStyleProperty(el, key)
        // }
        var mix = props[key], mix = (0, is_1.is_Function)(mix) ? getValByFn('prop', mix, key, model, ctx, el, ctr) : mix;
        if (null == mix) {
          continue;
        }
        (0, obj_1.obj_setProperty)(el, key, mix);
      }
    }
    exports.el_writeProps = el_writeProps;
    function getValByFn(type, fn, key, model, ctx, el, ctr) {
      fn = fn(type, model, ctx, el, ctr, key);
      if (null == fn) {
        return null;
      }
      if ('string' === typeof fn) {
        return fn;
      }
      if ((0, is_1.is_ArrayLike)(fn)) {
        if (0 === fn.length) {
          return null;
        }
        return fn.join('');
      }
      return fn;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_delegate_build_node === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_delegate_build_node) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_delegate_build_node, module.exports);
    } else {
      _ref_mask_src_builder_delegate_build_node = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_env_class;
  (function() {
    var exports = null != _ref_mask_src_util_env_class ? _ref_mask_src_util_env_class : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.env_class_wrapCtors = exports.env_class_overrideArgs = void 0;
    var obj_1 = _ref_utils_src_obj;
    var ENV_CLASS = function() {
      try {
        new Function('class c{}')();
        return true;
      } catch (_a) {
        return false;
      }
    }();
    var ENV_SPREAD = function() {
      try {
        var x = new Function('x', 'return(function(...args){return args[0]}(x));return foo(x);')(1);
        return 1 === x;
      } catch (_a) {
        return false;
      }
    }();
    var class_overrideArgs = function() {
      if (false === ENV_CLASS) {
        return function(Ctor, innerFn) {
          var Wrapped = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            Ctor.apply(this, innerFn.apply(void 0, args));
          };
          Wrapped.prototype = Ctor.prototype;
          return Wrapped;
        };
      }
      if (ENV_SPREAD) {
        return new Function('Ctor', 'innerFn', '\n            return class extends Ctor {\n                constructor (...args) {\n                    super(...innerFn(...args));\n                }\n            }\n        ');
      }
      return new Function('Ctor', 'innerFn', '\n        return class extends Ctor {\n            constructor () {\n                var x = innerFn.apply(null, arguments);\n                super(x[0], x[1], x[2], x[3], x[4], x[5]);\n            }\n        };\n    ');
    }();
    exports.env_class_overrideArgs = class_overrideArgs;
    class_overrideArgs = function(Base, beforeFn, afterFn, middCtors) {
      if (null != middCtors) {
        for (var i = 0; i < middCtors.length; i++) {
          middCtors[i] = ensureCallableSingle(middCtors[i]);
        }
      }
      return polyfill_class_wrap_inner(Base, beforeFn, afterFn, middCtors);
    };
    exports.env_class_wrapCtors = class_overrideArgs;
    var polyfill_class_wrap_inner = function() {
      if (!ENV_CLASS) {
        return function(Base, beforeFn, afterFn, callCtors) {
          var callBase = ensureCallableSingle(Base);
          var Wrapped = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            callBase(this, args);
            if (null != beforeFn) {
              beforeFn.apply(this, args);
            }
            if (null != callCtors) {
              for (var i = callCtors.length - 1; i > -1; i--) {
                callCtors[i](this, args);
              }
            }
            if (null != afterFn) {
              afterFn.apply(this, args);
            }
          };
          (0, obj_1.obj_extend)(Wrapped.prototype, Base.prototype);
          return Wrapped;
        };
      }
      if (ENV_SPREAD) {
        return new Function('Base', 'beforeFn', 'afterFn', 'callCtors', '\n            return class extends Base {\n                constructor (...args) {\n                    super(...args);\n                    if (beforeFn != null) {\n                        beforeFn.apply(this, args);\n                    }\n                    if (callCtors != null) {\n                        for (var i = callCtors.length - 1; i > -1; i--) {\n                            callCtors[i](this, args);\n                        }\n                    }\n                    if (afterFn != null) {\n                        afterFn.apply(this, args);\n                    }\n                }\n            }\n        ');
      }
      return new Function('Base', 'beforeFn', 'afterFn', 'callCtors', '\n        return class extends Base {\n            constructor (a, b, c, d, e, f) {\n                super(a, b, c, d, e, f);\n                var args = Array.from(arguments);\n                if (beforeFn != null) {\n                    beforeFn.apply(this, args);\n                }\n                if (callCtors != null) {\n                    for (var i = callCtors.length - 1; i > -1; i--) {\n                        callCtors[i](this, args);\n                    }\n                }\n                if (afterFn != null) {\n                    afterFn.apply(this, args);\n                }\n            }\n        }\n    ');
    }();
    function ensureCallableSingle(fn) {
      var caller = directCaller;
      var safe = false;
      return function(self, args) {
        if (true === safe) {
          caller(fn, self, args);
          return;
        }
        try {
          caller(fn, self, args);
          safe = true;
        } catch (error) {
          caller = newCaller;
          safe = true;
          caller(fn, self, args);
        }
      };
    }
    function directCaller(fn, self, args) {
      return fn.apply(self, args);
    }
    function newCaller(fn, self, args) {
      fn = new (fn.bind.apply(fn, [ null ].concat(args)))();
      (0, obj_1.obj_extend)(self, fn);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_env_class === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_env_class) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_env_class, module.exports);
    } else {
      _ref_mask_src_util_env_class = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_delegate_build_decorators;
  (function() {
    var exports = null != _ref_mask_src_builder_delegate_build_decorators ? _ref_mask_src_builder_delegate_build_decorators : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.decorators_buildFactory = void 0;
    var exports_1 = _ref_mask_src_feature_decorators_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    function decorators_buildFactory(build) {
      return function decorators_build(decorators, node, model, ctx, el, ctr, els) {
        var type = exports_1.Decorator.getDecoType(node);
        if (null == type) {
          (0, reporters_1.error_withNode)('Unsupported node to decorate', node);
          return build(node, model, ctx, el, ctr, els);
        }
        if ('NODE' === type) {
          var builder = exports_1.Decorator.wrapNodeBuilder(decorators, build, model, ctx, ctr);
          return builder(node, model, ctx, el, ctr, els);
        }
        if ('COMPO' === type) {
          builder = exports_1.Decorator.wrapCompoBuilder(decorators, build, model, ctx, ctr);
          return builder(node, model, ctx, el, ctr, els);
        }
        if ('METHOD' === type) {
          exports_1.Decorator.wrapMethodNode(decorators, node, model, ctx, ctr);
          return build(node, model, ctx, el, ctr, els);
        }
      };
    }
    exports.decorators_buildFactory = decorators_buildFactory;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_delegate_build_decorators === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_delegate_build_decorators) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_delegate_build_decorators, module.exports);
    } else {
      _ref_mask_src_builder_delegate_build_decorators = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_delegate_build_many;
  (function() {
    var exports = null != _ref_mask_src_builder_delegate_build_many ? _ref_mask_src_builder_delegate_build_many : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.build_manyFactory = void 0;
    var exports_1 = _ref_mask_src_feature_decorators_exports;
    var build_decorators_1 = _ref_mask_src_builder_delegate_build_decorators;
    function build_manyFactory(build) {
      var decorators_build = (0, build_decorators_1.decorators_buildFactory)(build);
      return function build_many(nodes, model, ctx, el, ctr, els) {
        if (null == nodes) {
          return;
        }
        var imax = nodes.length;
        for (var i = 0; i < imax; i++) {
          var x = nodes[i];
          if (16 === x.type) {
            var start = i;
            i = exports_1.Decorator.goToNode(nodes, i, imax);
            start = nodes.slice(start, i);
            decorators_build(start, nodes[i], model, ctx, el, ctr, els);
            continue;
          }
          build(x, model, ctx, el, ctr, els);
        }
      };
    }
    exports.build_manyFactory = build_manyFactory;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_delegate_build_many === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_delegate_build_many) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_delegate_build_many, module.exports);
    } else {
      _ref_mask_src_builder_delegate_build_many = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_compo;
  (function() {
    var exports = null != _ref_mask_src_util_compo ? _ref_mask_src_util_compo : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.compo_renderPlaceholder = exports.compo_emitInserted = exports.compo_renderElements = exports.compo_addChildren = exports.compo_addChild = void 0;
    var exports_1 = _ref_mask_projects_mask_compo_src_exports;
    var exports_2 = _ref_mask_src_builder_exports;
    var is_1 = _ref_utils_src_is;
    var refs_1 = _ref_utils_src_refs;
    function compo_addChild(ctr, compo) {
      compo_addChildren(ctr, compo);
    }
    exports.compo_addChild = compo_addChild;
    function compo_addChildren(ctr) {
      var compos = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        compos[_i - 1] = arguments[_i];
      }
      var arr = ctr.components;
      if (null == arr) {
        ctr.components = compos;
        return;
      }
      arr.push.apply(arr, compos);
    }
    exports.compo_addChildren = compo_addChildren;
    function compo_renderElements(nodes, model, ctx, el, ctr, children) {
      if (null == nodes) {
        return null;
      }
      var arr = [];
      (0, exports_2.builder_build)(nodes, model, ctx, el, ctr, arr);
      if ((0, is_1.is_Array)(children)) {
        children.push.apply(children, arr);
      }
      return arr;
    }
    exports.compo_renderElements = compo_renderElements;
    function compo_emitInserted(ctr) {
      exports_1.Component.signal.emitIn(ctr, 'domInsert');
    }
    exports.compo_emitInserted = compo_emitInserted;
    function compo_renderPlaceholder(staticCompo, compo, container) {
      staticCompo = staticCompo.placeholder;
      if (null == staticCompo) {
        staticCompo = refs_1._document.createComment('');
        container.appendChild(staticCompo);
      }
      compo.placeholder = staticCompo;
    }
    exports.compo_renderPlaceholder = compo_renderPlaceholder;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_compo === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_compo) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_compo, module.exports);
    } else {
      _ref_mask_src_util_compo = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_util;
  (function() {
    var exports = null != _ref_mask_src_builder_util ? _ref_mask_src_builder_util : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_setCompoProps = exports.builder_setCompoAttributes = exports.builder_setCompoModel = exports.builder_findAndRegisterCompo = void 0;
    var obj_1 = _ref_utils_src_obj;
    var is_1 = _ref_utils_src_is;
    var exports_1 = _ref_mask_src_custom_exports;
    function builder_findAndRegisterCompo(ctr, name) {
      for (var compo = ctr; null != compo; compo = compo.parent) {
        if (null == compo.handlers) {
          continue;
        }
        var Ctor = compo.handlers[name];
        if (null == Ctor) {
          continue;
        }
        (0, exports_1.customTag_registerScoped)(compo, name, Ctor);
        return true;
      }
      return false;
    }
    exports.builder_findAndRegisterCompo = builder_findAndRegisterCompo;
    function builder_setCompoModel(compo, model, ctx, ctr) {
      var readModel = null != compo.meta && compo.meta.readArguments || null;
      readModel = null == readModel ? null : readModel(compo.expression, model, ctx, ctr);
      if (null != compo.model) {
        return (0, obj_1.obj_extend)(compo.model, readModel);
      }
      return compo.model = readModel || model;
    }
    exports.builder_setCompoModel = builder_setCompoModel;
    function builder_setCompoAttributes(compo, node, model, ctx, container) {
      var ownAttr = compo.attr;
      var attr = node.attr;
      if (null == attr) {
        attr = {};
      } else {
        attr = (0, obj_1.obj_create)(attr);
        for (var key in attr) {
          var fn = attr[key];
          if ('function' === typeof fn) {
            attr[key] = fn('compo-attr', model, ctx, container, compo, key);
          }
        }
      }
      compo.attr = attr;
      if (null != compo.meta) {
        if (null != compo.meta.readAttributes) {
          compo.meta.readAttributes(compo, attr, model, container);
        }
        if (null != compo.meta.readProperties) {
          compo.meta.readProperties(compo, attr, model, container);
        }
      }
      for (var key in ownAttr) {
        var current = attr[key], val = null;
        if (null == current || 'class' === key) {
          var x = ownAttr[key];
          val = (0, is_1.is_Function)(x) ? x('compo-attr', model, ctx, container, compo, key) : x;
        }
        if ('class' === key) {
          attr[key] = null == current ? val : current + ' ' + val;
          continue;
        }
        if (null != current) {
          continue;
        }
        attr[key] = val;
      }
      return attr;
    }
    exports.builder_setCompoAttributes = builder_setCompoAttributes;
    function builder_setCompoProps(compo, node, model, ctx, container) {
      var props = node.props;
      if (null == props) {
        return;
      }
      for (var key in props) {
        var val = props[key];
        val = (0, is_1.is_Function)(val) ? val('compo-prop', model, ctx, container, compo, key) : val;
        (0, obj_1.obj_setProperty)(compo, key, val);
      }
    }
    exports.builder_setCompoProps = builder_setCompoProps;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_util === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_util) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_util, module.exports);
    } else {
      _ref_mask_src_builder_util = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_resume;
  (function() {
    var exports = null != _ref_mask_src_builder_resume ? _ref_mask_src_builder_resume : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_resumeDelegate = void 0;
    var is_1 = _ref_utils_src_is;
    var coll_1 = _ref_utils_src_coll;
    var exports_1 = _ref_mask_src_custom_exports;
    var build_1 = _ref_mask_src_builder_dom_build;
    var BuilderData_1 = _ref_mask_src_builder_BuilderData;
    function builder_resumeDelegate(ctr, model, ctx, container, children, finilizeFn) {
      var anchor = BuilderData_1.BuilderData.document.createComment('');
      container.appendChild(anchor);
      if (null != children) {
        children.push(anchor);
      }
      return function() {
        return _resume(ctr, model, ctx, anchor, children, finilizeFn);
      };
    }
    exports.builder_resumeDelegate = builder_resumeDelegate;
    function _resume(ctr, model, ctx, anchorEl, children, finilize) {
      if (true === ctr.disposed) {
        return;
      }
      if (null != ctr.tagName && ctr.tagName !== ctr.compoName) {
        ctr.nodes = {
          tagName: ctr.tagName,
          attr: ctr.attr,
          nodes: ctr.nodes,
          type: 1
        };
      }
      if (null != ctr.model) {
        model = ctr.model;
      }
      var nodes = ctr.nodes;
      var elements = [];
      if (null != nodes) {
        var fragment = document.createDocumentFragment();
        (0, build_1.builder_build)(nodes, model, ctx, fragment, ctr, elements);
        anchorEl.parentNode.insertBefore(fragment, anchorEl);
      }
      if (null != children && elements.length > 0) {
        var args = [ 0, 1 ].concat(elements);
        nodes = (0, coll_1.coll_indexOf)(children, anchorEl);
        if (nodes > -1) {
          args[0] = nodes;
          children.splice.apply(children, args);
        }
        var parent = ctr.parent;
        while (null != parent) {
          var arr = parent.$ || parent.elements;
          if (null != arr) {
            var i_1 = (0, coll_1.coll_indexOf)(arr, anchorEl);
            if (-1 === i_1) {
              break;
            }
            args[0] = i_1;
            arr.splice.apply(arr, args);
          }
          parent = parent.parent;
        }
      }
      // use or override custom attr handlers
      // in Compo.handlers.attr object
      // but only on a component, not a tag ctr
      if (null == ctr.tagName) {
        var attrHandlers = null === (fragment = ctr.handlers) || void 0 === fragment ? void 0 : fragment.attr;
        for (var key in ctr.attr) {
          var attrFn = null;
          if (attrHandlers && (0, is_1.is_Function)(attrHandlers[key])) {
            attrFn = attrHandlers[key];
          }
          if (null == attrFn && (0, is_1.is_Function)(exports_1.custom_Attributes[key])) {
            attrFn = exports_1.custom_Attributes[key];
          }
          if (null != attrFn) {
            attrFn(anchorEl, ctr.attr[key], model, ctx, elements[0], ctr);
          }
        }
      }
      if ((0, is_1.is_Function)(finilize)) {
        finilize.call(ctr, elements, model, ctx, anchorEl.parentNode);
      }
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_resume === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_resume) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_resume, module.exports);
    } else {
      _ref_mask_src_builder_resume = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_util_compo;
  (function() {
    var exports = null != _src_util_compo ? _src_util_compo : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.compo_wrapOnTagName = void 0;
    function compo_wrapOnTagName(compo, node) {
      if (null == compo.tagName || compo.tagName === node.tagName || compo.tagName === compo.compoName) {
        return;
      }
      compo.nodes = {
        tagName: compo.tagName,
        attr: compo.attr,
        nodes: compo.nodes,
        type: 1
      };
    }
    exports.compo_wrapOnTagName = compo_wrapOnTagName;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_util_compo === module.exports) {
      // do nothing if
    } else if (__isObj(_src_util_compo) && __isObj(module.exports)) {
      Object.assign(_src_util_compo, module.exports);
    } else {
      _src_util_compo = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_builder_delegate_build_component;
  (function() {
    var exports = null != _src_builder_delegate_build_component ? _src_builder_delegate_build_component : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.build_compoFactory = void 0;
    var exports_1 = _ref_mask_src_custom_exports;
    var meta_1 = _src_util_meta;
    var obj_1 = _ref_utils_src_obj;
    var exports_2 = _src_cache_exports;
    var fn_1 = _ref_utils_src_fn;
    var compo_1 = _ref_mask_src_util_compo;
    var is_1 = _ref_utils_src_is;
    var util_1 = _ref_mask_src_builder_util;
    var resume_1 = _ref_mask_src_builder_resume;
    var compo_2 = _src_util_compo;
    function build_compoFactory(build, config) {
      return function build_compo(node, model, ctx, container, ctr, children) {
        var _a = null !== (_a = node.compoName) && void 0 !== _a ? _a : node.tagName;
        var _b = null !== (_b = null !== (_b = node.controller) && void 0 !== _b ? _b : exports_1.custom_Tags[_a]) && void 0 !== _b ? _b : (0, 
        obj_1.obj_create)(node);
        var _d = null !== (_d = (0, meta_1.meta_get)(_b).cache) && void 0 !== _d ? _d : false;
        if (_d /* unstrict */) {
          var compo_3 = exports_2.Cache.getCompo(model, ctx, _a, _b);
          if (null != compo_3) {
            if (compo_3.__cached) {
              compo_3.render = fn_1.fn_doNothing;
            }
            (0, compo_1.compo_addChild)(ctr, compo_3);
            return compo_3;
          }
        }
        compo_3 = _initController(_b, node, model, ctx, container, ctr);
        _d = (0, meta_1.meta_get)(compo_3).cache;
        if (_d /* unstrict */) {
          exports_2.Cache.cacheCompo(model, ctx, _a, compo_3, _d);
        }
        if (null == compo_3.compoName) {
          compo_3.compoName = _a;
        }
        if (null == compo_3.model) {
          compo_3.model = model;
        }
        if (null == compo_3.nodes) {
          compo_3.nodes = node.nodes;
        }
        if (null == compo_3.expression) {
          compo_3.expression = node.expression;
        }
        compo_3.attr = (0, obj_1.obj_extend)(compo_3.attr, node.attr);
        compo_3.parent = ctr;
        var key, fn, attr = compo_3.attr;
        for (key in attr) {
          fn = attr[key];
          if ((0, is_1.is_Function)(fn)) {
            attr[key] = fn('attr', model, ctx, container, ctr, key);
          }
        }
        _b = (0, meta_1.meta_getRenderMode)(compo_3);
        (0, meta_1.meta_getModelMode)(compo_3);
        if (false === _b.isServer()) {
          compo_3.ID = ++ctx._id;
        }
        if (true === _b.isClient()) {
          compo_3.render = fn_1.fn_doNothing;
          return compo_3;
        }
        (0, util_1.builder_setCompoAttributes)(compo_3, node, model, ctx, container);
        if ((0, is_1.is_Function)(compo_3.renderStart)) {
          compo_3.renderStart(model, ctx, container);
        }
        (0, compo_1.compo_addChild)(ctr, compo_3);
        if (true === compo_3.async) {
          _d = (0, resume_1.builder_resumeDelegate)(compo_3, model, ctx, container, children, compo_3.onRenderEndServer);
          compo_3.await(_d);
          return compo_3;
        }
        (0, compo_2.compo_wrapOnTagName)(compo_3, node);
        if ((0, is_1.is_Function)(compo_3.render)) {
          compo_3.render(model, ctx, container, compo_3);
        }
        return compo_3;
      };
      function _initController(Mix, node, model, ctx, el, ctr) {
        if ((0, is_1.is_Function)(Mix)) {
          return new Mix(node, model, ctx, el, ctr);
        }
        if ((0, is_1.is_Function)(Mix.__Ctor)) {
          return new Mix.__Ctor(node, model, ctx, el, ctr);
        }
        return Mix;
      }
    }
    exports.build_compoFactory = build_compoFactory;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_builder_delegate_build_component === module.exports) {
      // do nothing if
    } else if (__isObj(_src_builder_delegate_build_component) && __isObj(module.exports)) {
      Object.assign(_src_builder_delegate_build_component, module.exports);
    } else {
      _src_builder_delegate_build_component = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_delegate_build_textNode;
  (function() {
    var exports = null != _ref_mask_src_builder_delegate_build_textNode ? _ref_mask_src_builder_delegate_build_textNode : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.build_textFactory = void 0;
    var BuilderData_1 = _ref_mask_src_builder_BuilderData;
    function build_textFactory(config) {
      var document = null !== (config = null === config || void 0 === config ? void 0 : config.document) && void 0 !== config ? config : BuilderData_1.BuilderData.document;
      return function build_textNode(node, model, ctx, el, ctr) {
        var content = node.content;
        if ('function' !== typeof content) {
          append_textNode(el, content);
          return;
        }
        var result = content('node', model, ctx, el, ctr, null, node);
        if ('string' === typeof result) {
          append_textNode(el, result);
          return;
        }
        // result is array with some htmlelements
        var text = '';
        var jmax = result.length;
        for (var j = 0; j < jmax; j++) {
          var x = result[j];
          if ('object' === typeof x) {
            // In this casee result[j] should be any HTMLElement
            if ('' !== text) {
              append_textNode(el, text);
              text = '';
            }
            if (null == x.nodeType) {
              text += x.toString();
              continue;
            }
            el.appendChild(x);
            continue;
          }
          text += x;
        }
        if ('' !== text) {
          append_textNode(el, text);
        }
      };
      function append_textNode(el, text) {
        el.appendChild(document.createTextNode(text));
      }
    }
    exports.build_textFactory = build_textFactory;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_delegate_build_textNode === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_delegate_build_textNode) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_delegate_build_textNode, module.exports);
    } else {
      _ref_mask_src_builder_delegate_build_textNode = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_util_node;
  (function() {
    var exports = null != _src_util_node ? _src_util_node : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.node_getType = void 0;
    var is_1 = _ref_utils_src_is;
    var exports_1 = _ref_mask_src_custom_exports;
    function node_getType(node) {
      var type = node.type;
      if (null == type) {
        // in case if node was added manually, but type was not set
        if ((0, is_1.is_Array)(node)) {
          type = 10;
        } else if (null != node.tagName) {
          type = 1;
        } else if (null != node.content) {
          type = 2;
        }
      }
      if (1 === type && null != exports_1.custom_Tags[node.tagName]) {
        // check if the tag name was overriden
        type = 4;
      }
      return type;
    }
    exports.node_getType = node_getType;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_util_node === module.exports) {
      // do nothing if
    } else if (__isObj(_src_util_node) && __isObj(module.exports)) {
      Object.assign(_src_util_node, module.exports);
    } else {
      _src_util_node = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_arch_Module;
  (function() {
    var exports = null != _ref_mask_src_arch_Module ? _ref_mask_src_arch_Module : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ModuleMidd = void 0;
    exports.ModuleMidd = {
      parseMaskContent: function(mix, path) {
        throw new Error('Not set');
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_arch_Module === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_arch_Module) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_arch_Module, module.exports);
    } else {
      _ref_mask_src_arch_Module = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_custom_tag;
  (function() {
    var exports = null != _ref_mask_src_custom_tag ? _ref_mask_src_custom_tag : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.customTag_Resolver = exports.customTag_Base = exports.customTag_Compo_getHandler = exports.customTag_registerResolver = exports.customTag_define = exports.customTag_registerScoped = exports.customTag_registerFromTemplate = exports.customTag_createRegistrar = exports.customTag_register_inner = exports.customTag_register = exports.customTag_getAll = exports.customTag_get = void 0;
    var obj_1 = _ref_utils_src_obj;
    var is_1 = _ref_utils_src_is;
    var fn_1 = _ref_utils_src_fn;
    var reporters_1 = _ref_mask_src_util_reporters;
    var repositories_1 = _ref_mask_src_custom_repositories;
    var Module_1 = _ref_mask_src_arch_Module;
    /**
 * Get Components constructor from the global repository or the scope
 * @param {string} name
 * @param {object} [component] - pass a component to look in its scope
 * @returns {IComponent}
 * @memberOf mask
 * @method getHandler
 */
    function customTag_get(name, ctr) {
      if (0 === arguments.length) {
        (0, reporters_1.reporter_deprecated)('getHandler.all', 'Use `mask.getHandlers` to get all components (also scoped)');
        return customTag_getAll();
      }
      var Ctor = repositories_1.custom_Tags[name];
      if (null == Ctor) {
        return null;
      }
      if (Ctor !== Resolver) {
        return Ctor;
      }
      var ctr_ = (0, is_1.is_Function)(ctr) ? ctr.prototype : ctr;
      while (null != ctr_) {
        if ((0, is_1.is_Function)(ctr_.getHandler)) {
          Ctor = ctr_.getHandler(name);
          if (null != Ctor) {
            return Ctor;
          }
        }
        ctr_ = ctr_.parent;
      }
      return repositories_1.custom_Tags_global[name];
    }
    exports.customTag_get = customTag_get;
    /**
 * Get all components constructors from the global repository and/or the scope
 * @param {object} [component] - pass a component to look also in its scope
 * @returns {object} All components in an object `{name: Ctor}`
 * @memberOf mask
 * @method getHandlers
 */
    function customTag_getAll(ctr) {
      if (null == ctr) {
        return repositories_1.custom_Tags;
      }
      var x, obj = {}, ctr_ = ctr;
      while (null != ctr_) {
        x = null;
        if ((0, is_1.is_Function)(ctr_.getHandlers)) {
          x = ctr_.getHandlers();
        } else {
          x = ctr_.__handlers__;
        }
        if (null != x) {
          obj = (0, obj_1.obj_extendDefaults)(obj, x);
        }
        ctr_ = ctr_.parent;
      }
      for (var key in repositories_1.custom_Tags) {
        x = repositories_1.custom_Tags[key];
        if (null == x || x === Resolver) {
          continue;
        }
        if (null == obj[key]) {
          obj[key] = x;
        }
      }
      return obj;
    }
    exports.customTag_getAll = customTag_getAll;
    /**
 * Register a component
 * @param {string} name
 * @param {object|IComponent} component
 * @param {object} component - Component static definition
 * @param {IComponent} component - Components constructor
 * @returns {void}
 * @memberOf mask
 * @method registerHandler
 */
    function customTag_register(mix, Handler) {
      (0, exports.customTag_register_inner)(mix, Handler);
    }
    exports.customTag_register = customTag_register;
    var customTag_register_inner = function(mix, Handler) {
      if ('string' !== typeof mix && 3 === arguments.length) {
        customTag_registerScoped.apply(this, arguments);
        return;
      }
      Handler = compo_ensureCtor(Handler);
      var Repo = repositories_1.custom_Tags[mix] === Resolver ? repositories_1.custom_Tags_global : repositories_1.custom_Tags;
      Repo[mix] = Handler;
      //> make fast properties
      (0, obj_1.obj_toFastProps)(repositories_1.custom_Tags);
    };
    exports.customTag_register_inner = customTag_register_inner;
    function customTag_createRegistrar(wrapper) {
      exports.customTag_register_inner = wrapper(exports.customTag_register_inner);
    }
    exports.customTag_createRegistrar = customTag_createRegistrar;
    /**
 * Register components from a template
 * @param {string} template - Mask template
 * @param {object|IComponent} [component] - Register in the components scope
 * @param {string} [path] - Optionally define the path for the template
 * @returns {Promise} - Fullfills when all submodules are resolved and components are registerd
 * @memberOf mask
 * @method registerFromTemplate
 */
    function customTag_registerFromTemplate(mix, Ctr, path) {
      return Module_1.ModuleMidd.parseMaskContent(mix, path).then(function(exports) {
        var store = exports.__handlers__;
        for (var key in store) {
          if (key in exports) {
            // is global
            customTag_register(key, store[key]);
            continue;
          }
          customTag_registerScoped(Ctr, key, store[key]);
        }
      });
    }
    exports.customTag_registerFromTemplate = customTag_registerFromTemplate;
    /**
 * Register a component
 * @param {object|IComponent} scopedComponent - Use components scope
 * @param {string} name - Name of the component
 * @param {object|IComponent} component - Components definition
 * @returns {void}
 * @memberOf mask
 * @method registerScoped
 */
    function customTag_registerScoped(Ctx, name, Handler) {
      if (null == Ctx) {
        // Use global
        customTag_register(name, Handler);
        return;
      }
      customTag_registerResolver(name);
      Ctx = (0, is_1.is_Function)(Ctx) ? Ctx.prototype : Ctx;
      var map = Ctx.__handlers__;
      if (null == map) {
        map = Ctx.__handlers__ = {};
      }
      map[name] = compo_ensureCtor(Handler);
      if (null == Ctx.getHandler) {
        Ctx.getHandler = customTag_Compo_getHandler;
      }
    }
    exports.customTag_registerScoped = customTag_registerScoped;
    /** Variations:
 * - 1. (template)
 * - 2. (scopedCompoName, template)
 * - 3. (scopedCtr, template)
 * - 4. (name, Ctor)
 * - 5. (scopedCtr, name, Ctor)
 * - 6. (scopedCompoName, name, Ctor)
 */
    function is_Compo(val) {
      return (0, is_1.is_Object)(val) || (0, is_1.is_Function)(val);
    }
    /**
 * Universal component definition, which covers all the cases: simple, scoped, template
 * - 1. (template)
 * - 2. (scopedCompoName, template)
 * - 3. (scopedCtr, template)
 * - 4. (name, Ctor)
 * - 5. (scopedCtr, name, Ctor)
 * - 6. (scopedCompoName, name, Ctor)
 * @returns {void|Promise}
 * @memberOf mask
 * @method define
 */
    exports.customTag_define = (0, fn_1.fn_createByPattern)([ {
      pattern: [ is_1.is_String ],
      handler: function(template) {
        return customTag_registerFromTemplate(template);
      }
    }, {
      pattern: [ is_1.is_String, is_1.is_String ],
      handler: function(name, template) {
        name = customTag_get(name);
        return customTag_registerFromTemplate(template, name);
      }
    }, {
      pattern: [ is_Compo, is_1.is_String ],
      handler: function(Scope, template) {
        return customTag_registerFromTemplate(template, Scope);
      }
    }, {
      pattern: [ is_1.is_String, is_Compo ],
      handler: function(name, Ctor) {
        return customTag_register(name, Ctor);
      }
    }, {
      pattern: [ is_Compo, is_1.is_String, is_Compo ],
      handler: function(Scope, name, Ctor) {
        customTag_registerScoped(Scope, name, Ctor);
      }
    }, {
      pattern: [ is_1.is_String, is_1.is_String, is_Compo ],
      handler: function(scopeName, name, Ctor) {
        scopeName = customTag_get(scopeName);
        return customTag_registerScoped(scopeName, name, Ctor);
      }
    } ]);
    function customTag_registerResolver(name) {
      var Ctor = repositories_1.custom_Tags[name];
      if (Ctor === Resolver) {
        return;
      }
      if (null != Ctor) {
        repositories_1.custom_Tags_global[name] = Ctor;
      }
      repositories_1.custom_Tags[name] = Resolver;
      //> make fast properties
      (0, obj_1.obj_toFastProps)(repositories_1.custom_Tags);
    }
    exports.customTag_registerResolver = customTag_registerResolver;
    function customTag_Compo_getHandler(name) {
      var map = this.__handlers__;
      return null == map ? null : map[name];
    }
    exports.customTag_Compo_getHandler = customTag_Compo_getHandler;
    exports.customTag_Base = {
      async: false,
      attr: null,
      await: null,
      compoName: null,
      components: null,
      expression: null,
      ID: null,
      meta: null,
      node: null,
      model: null,
      nodes: null,
      parent: null,
      render: null,
      renderEnd: null,
      renderStart: null,
      tagName: null,
      type: null
    };
    var Resolver = function(node, model, ctx, container, ctr) {
      var Mix = customTag_get(node.tagName, ctr);
      if (null != Mix) {
        if (false === (0, is_1.is_Function)(Mix)) {
          return (0, obj_1.obj_create)(Mix);
        }
        return new Mix(node, model, ctx, container, ctr);
      }
      (0, reporters_1.error_withNode)('Component not found: ' + node.tagName, node);
      return null;
    };
    exports.customTag_Resolver = Resolver;
    function wrapStatic(proto) {
      function Ctor(node, parent) {
        this.ID = null;
        this.node = node;
        this.tagName = node.tagName;
        this.attr = (0, obj_1.obj_create)(node.attr);
        this.expression = node.expression;
        this.nodes = node.nodes;
        this.nextSibling = node.nextSibling;
        this.parent = parent;
        this.components = null;
      }
      Ctor.prototype = proto;
      return Ctor;
    }
    function compo_ensureCtor(Handler) {
      if ((0, is_1.is_Object)(Handler)) {
        //> static
        Handler.__Ctor = wrapStatic(Handler);
      }
      return Handler;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_custom_tag === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_custom_tag) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_custom_tag, module.exports);
    } else {
      _ref_mask_src_custom_tag = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_mock_tag_handler;
  (function() {
    var exports = null != _src_mock_tag_handler ? _src_mock_tag_handler : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.mock_TagHandler = void 0;
    var repositories_1 = _ref_mask_src_custom_repositories;
    var tag_1 = _ref_mask_src_custom_tag;
    var const_1 = _src_const;
    var meta_1 = _src_util_meta;
    var obj_1 = _ref_utils_src_obj;
    var EmptyHandler = /** @class */ function() {
      function EmptyHandler(attrName, attrValue) {
        this.meta = {
          mode: const_1.mode_CLIENT
        };
      }
      EmptyHandler.prototype.render = function() {};
      return EmptyHandler;
    }();
    exports.mock_TagHandler = {
      create: function(tagName, Compo, mode) {
        if (mode === const_1.mode_CLIENT) {
          return EmptyHandler;
        }
        var Proto = Compo.prototype;
        if (Proto.mode === const_1.mode_CLIENT) {
          /* obsolete, use meta object*/
          return EmptyHandler;
        }
        Proto = Compo.prototype.meta;
        if (null == Proto) {
          Proto = Compo.prototype.meta = {};
        }
        if (Proto.mode === const_1.mode_CLIENT) {
          return EmptyHandler;
        }
        Proto.mode = mode;
        return Compo;
      }
    };
    (0, tag_1.customTag_createRegistrar)(function(originalFn) {
      return function(tagName, compo) {
        if (null != compo && 'object' === typeof compo) {
          //> static
          compo.__Ctor = wrapStatic(compo);
        }
        if (tagName in repositories_1.custom_Tags_defs) {
          (0, obj_1.obj_extend)(compo.prototype, repositories_1.custom_Tags_defs[tagName]);
        }
        var proto = 'function' === typeof compo ? compo.prototype : compo;
        if (null == proto.meta) {
          proto.meta = proto.$meta || {};
          /* obsolete meta copy */
        }
        if (proto.cache) {
          proto.meta.cache = proto.cache;
        }
        if (proto.mode) {
          proto.meta.mode = proto.mode;
        }
        if ((0, meta_1.meta_getVal)(compo, 'mode') === const_1.mode_CLIENT) {
          repositories_1.custom_Tags[tagName] = exports.mock_TagHandler.create(tagName, compo, 'client');
          return;
        }
        repositories_1.custom_Tags[tagName] = compo;
      };
    });
    function wrapStatic(proto, parent) {
      function Ctor(node) {
        this.tagName = node.tagName;
        this.compoName = node.tagName;
        this.attr = node.attr;
        this.expression = node.expression;
        this.nodes = node.nodes;
        this.nextSibling = node.nextSibling;
        this.parent = parent;
        this.components = null;
      }
      Ctor.prototype = proto;
      return Ctor;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_mock_tag_handler === module.exports) {
      // do nothing if
    } else if (__isObj(_src_mock_tag_handler) && __isObj(module.exports)) {
      Object.assign(_src_mock_tag_handler, module.exports);
    } else {
      _src_mock_tag_handler = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_builder_delegate_builder_buildFactory;
  (function() {
    var exports = null != _src_builder_delegate_builder_buildFactory ? _src_builder_delegate_builder_buildFactory : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_buildFactory = void 0;
    var exports_1 = _ref_mask_src_custom_exports;
    var build_node_1 = _ref_mask_src_builder_delegate_build_node;
    var build_many_1 = _ref_mask_src_builder_delegate_build_many;
    var build_component_1 = _src_builder_delegate_build_component;
    var build_textNode_1 = _ref_mask_src_builder_delegate_build_textNode;
    var BuilderData_1 = _ref_mask_src_builder_BuilderData;
    var node_1 = _src_util_node;
    var reporters_1 = _ref_mask_src_util_reporters;
    var const_1 = _src_const;
    var tag_handler_1 = _src_mock_tag_handler;
    var DomB_1 = _src_html_dom_DomB;
    var arr_1 = _ref_utils_src_arr;
    var is_1 = _ref_utils_src_is;
    function builder_buildFactory(config) {
      if (null === config || void 0 === config ? void 0 : config.document) {
        BuilderData_1.BuilderData.document = config.document;
      }
      var build_node = (0, build_node_1.build_nodeFactory)(config);
      var build_many = (0, build_many_1.build_manyFactory)(build);
      var build_compo = (0, build_component_1.build_compoFactory)(build, config);
      var build_text = (0, build_textNode_1.build_textFactory)(config);
      var document = BuilderData_1.BuilderData.document;
      function build(node, model, ctx, container, ctr, children) {
        if (null == node) {
          return container;
        }
        if (null != ctx._redirect || null != ctx._rewrite) {
          return container;
        }
        var elements, type = (0, node_1.node_getType)(node);
        // Dom.SET
        if (10 === type) {
          var imax = node.length;
          for (var i = 0; i < imax; i++) {
            build(node[i], model, ctx, container, ctr, children);
          }
          return container;
        }
        var tagName = node.tagName;
        if ('else' === tagName) {
          return container;
          // Dom.STATEMENT
        }
        if (15 === type) {
          var Handler = exports_1.custom_Statements[tagName];
          if (null == Handler) {
            if (null != exports_1.custom_Tags[tagName]) {
              // Dom.COMPONENT
              type = 4;
            } else {
              (0, reporters_1.log_error)('<mask: statement is undefined', tagName);
              return container;
            }
          }
          if (15 === type) {
            Handler.render(node, model, ctx, container, ctr, children);
            return container;
          }
        }
        // Dom.NODE
        if (1 === type) {
          if (58 === tagName.charCodeAt(0)) {
            // :
            type = 4;
            node.mode = const_1.mode_CLIENT;
            node.controller = tag_handler_1.mock_TagHandler.create(tagName, null, const_1.mode_CLIENT);
          } else {
            container = build_node(node, model, ctx, container, ctr, children);
            children = null;
          }
        }
        // Dom.TEXTNODE
        if (2 === type) {
          build_text(node, model, ctx, container, ctr);
          return container;
        }
        // Dom.COMPONENT
        if (4 === type) {
          Handler = document.createComponent(node, model, ctx, container, ctr);
          container.appendChild(Handler);
          //- container = element;
          tagName = build_compo(node, model, ctx, Handler, ctr, children);
          if (null != tagName) {
            Handler.setComponent(tagName, model, ctx);
            if ((0, is_1.is_Function)(tagName.render)) {
              return container;
            }
            if (tagName.async) {
              return container;
            }
            if (tagName.model && tagName.model !== model) {
              model = tagName.model;
            }
            ctr = tagName;
            node = tagName;
            // collect childElements for the component
            elements = [];
          }
          container = Handler;
        }
        buildChildNodes(node, model, ctx, container, ctr, elements);
        if (container.nodeType === DomB_1.DomB.COMPONENT) {
          type = ctr.onRenderEndServer;
          if (null != type && true !== ctr.async) {
            type.call(ctr, elements, model, ctx, container, ctr);
          }
        }
        (0, arr_1.arr_pushMany)(children, elements);
        return container;
      }
      function buildChildNodes(node, model, ctx, container, ctr, els) {
        node = node.nodes;
        if (null == node) {
          return;
        }
        if (false === (0, is_1.is_ArrayLike)(node)) {
          build(node, model, ctx, container, ctr, els);
          return;
        }
        build_many(node, model, ctx, container, ctr, els);
      }
      return build;
    }
    exports.builder_buildFactory = builder_buildFactory;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_builder_delegate_builder_buildFactory === module.exports) {
      // do nothing if
    } else if (__isObj(_src_builder_delegate_builder_buildFactory) && __isObj(module.exports)) {
      Object.assign(_src_builder_delegate_builder_buildFactory, module.exports);
    } else {
      _src_builder_delegate_builder_buildFactory = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_builder_delegate_exports;
  (function() {
    var exports = null != _src_builder_delegate_exports ? _src_builder_delegate_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_buildDelegate = void 0;
    var DomB_1 = _src_html_dom_DomB;
    var exports_1 = _ref_mask_src_builder_exports;
    var CtxModels_1 = _src_builder_ctx_CtxModels;
    var CtxModules_1 = _src_builder_ctx_CtxModules;
    var exports_2 = _src_cache_exports;
    var exports_3 = _src_html_dom_exports;
    var builder_buildFactory_1 = _src_builder_delegate_builder_buildFactory;
    function builder_buildDelegate(opts) {
      if (null == opts.document) {
        opts.document = exports_3.HtmlDom.document;
      }
      var buildOrig = (0, builder_buildFactory_1.builder_buildFactory)(opts);
      return function build(template, model, ctx, container, ctr, children) {
        if (null == container) {
          container = exports_3.HtmlDom.document.createDocumentFragment();
        }
        if (null == ctr) {
          ctr = new DomB_1.DomB.Component();
        }
        if (null == ctx) {
          ctx = new exports_1.builder_Ctx();
        }
        if (null == ctx._models) {
          ctx._models = new CtxModels_1.builder_CtxModels(model, exports_2.Cache.modelID);
        }
        if (null == ctx._modules) {
          ctx._modules = new CtxModules_1.builder_CtxModules();
        }
        if (null == ctx._id) {
          ctx._id = exports_2.Cache.controllerID;
        }
        return buildOrig(template, model, ctx, container, ctr, children);
      };
    }
    exports.builder_buildDelegate = builder_buildDelegate;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_builder_delegate_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_src_builder_delegate_exports) && __isObj(module.exports)) {
      Object.assign(_src_builder_delegate_exports, module.exports);
    } else {
      _src_builder_delegate_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_dom_build;
  (function() {
    var exports = null != _ref_mask_src_builder_dom_build ? _ref_mask_src_builder_dom_build : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_build = void 0;
    var exports_1 = _src_builder_delegate_exports;
    exports.builder_build = (0, exports_1.builder_buildDelegate)({
      create: function(name, doc) {
        return doc.createElement(name);
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_dom_build === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_dom_build) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_dom_build, module.exports);
    } else {
      _ref_mask_src_builder_dom_build = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_svg_build;
  (function() {
    var exports = null != _ref_mask_src_builder_svg_build ? _ref_mask_src_builder_svg_build : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_buildSVG = void 0;
    var exports_1 = _src_builder_delegate_exports;
    exports.builder_buildSVG = (0, exports_1.builder_buildDelegate)({
      create: function(name, doc) {
        return doc.createElementNS(SVG_NS, name);
      }
    });
    var SVG_NS = 'http://www.w3.org/2000/svg';
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_svg_build === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_svg_build) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_svg_build, module.exports);
    } else {
      _ref_mask_src_builder_svg_build = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_exports;
  (function() {
    var exports = null != _ref_mask_src_builder_exports ? _ref_mask_src_builder_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_resumeDelegate = exports.builder_buildSVG = exports.builder_build = exports.BuilderData = exports.builder_Ctx = void 0;
    var ctx_1 = _ref_mask_src_builder_ctx;
    Object.defineProperty(exports, 'builder_Ctx', {
      enumerable: true,
      get: function() {
        return ctx_1.builder_Ctx;
      }
    });
    var BuilderData_1 = _ref_mask_src_builder_BuilderData;
    Object.defineProperty(exports, 'BuilderData', {
      enumerable: true,
      get: function() {
        return BuilderData_1.BuilderData;
      }
    });
    var build_1 = _ref_mask_src_builder_dom_build;
    Object.defineProperty(exports, 'builder_build', {
      enumerable: true,
      get: function() {
        return build_1.builder_build;
      }
    });
    var build_2 = _ref_mask_src_builder_svg_build;
    Object.defineProperty(exports, 'builder_buildSVG', {
      enumerable: true,
      get: function() {
        return build_2.builder_buildSVG;
      }
    });
    var resume_1 = _ref_mask_src_builder_resume;
    Object.defineProperty(exports, 'builder_resumeDelegate', {
      enumerable: true,
      get: function() {
        return resume_1.builder_resumeDelegate;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_exports, module.exports);
    } else {
      _ref_mask_src_builder_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_renderer_exports;
  (function() {
    var exports = null != _ref_mask_src_renderer_exports ? _ref_mask_src_renderer_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.renderer_clearCache = exports.renderer_renderAsync = exports.renderer_render = void 0;
    var exports_1 = _ref_mask_src_builder_exports;
    var refs_1 = _ref_utils_src_refs;
    var exports_2 = _ref_mask_src_parser_exports;
    var exports_3 = _ref_mask_src_builder_exports;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var exports_4 = _ref_mask_projects_mask_compo_src_exports;
    /**
 * Render the mask template to document fragment or single html node
 * @param {(string|MaskDom)} template - Mask string template or Mask Ast to render from.
 * @param {*} [model] - Model Object.
 * @param {Object} [ctx] - Context can store any additional information, that custom handler may need
 * @param {IAppendChild} [container]  - Container Html Node where template is rendered into
 * @param {Object} [controller] - Component that should own this template
 * @returns {(IAppendChild|Node|DocumentFragment)} container
 * @memberOf mask
 */
    function renderer_render(mix, model, ctx, container, controller) {
      if (null == ctx || ctx.constructor !== exports_1.builder_Ctx) {
        ctx = new exports_1.builder_Ctx(ctx);
      }
      var template = mix;
      if ('string' === typeof mix) {
        if (refs_1._Object_hasOwnProp.call(__templates, mix)) {
          /* if Object doesnt contains property that check is faster
                then "!=null" http://jsperf.com/not-in-vs-null/2 */
          template = __templates[mix];
        } else {
          template = __templates[mix] = (0, exports_2.parser_parse)(mix, ctx.filename);
        }
      }
      return (0, exports_3.builder_build)(template, model, ctx, container, controller);
    }
    exports.renderer_render = renderer_render;
    /**
 * Same to `mask.render` but returns the promise, which is resolved when all async components
 * are resolved, or is in resolved state, when all components are synchronous.
 * For the parameters doc @see {@link mask.render}
 * @returns {Promise} Fullfills with (`IAppendChild|Node|DocumentFragment`, `Component`)
 * @memberOf mask
 */
    function renderer_renderAsync(template, model, ctx, container, ctr) {
      if (null == ctx || ctx.constructor !== exports_1.builder_Ctx) {
        ctx = new exports_1.builder_Ctx(ctx);
      }
      if (null == ctr) {
        ctr = new exports_4.Component();
      }
      var dom = renderer_render(template, model, ctx, container, ctr);
      var dfr = new Dfr_1.class_Dfr();
      if (true === ctx.async) {
        ctx.done(function() {
          dfr.resolve(dom, ctr);
        });
      } else {
        dfr.resolve(dom, ctr);
      }
      //@TODO use single resolve object
      return dfr;
    }
    exports.renderer_renderAsync = renderer_renderAsync;
    function renderer_clearCache(key) {
      if (0 === arguments.length) {
        __templates = {};
        return;
      }
      delete __templates[key];
    }
    exports.renderer_clearCache = renderer_clearCache;
    var __templates = {};
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_renderer_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_renderer_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_renderer_exports, module.exports);
    } else {
      _ref_mask_src_renderer_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_j_src_scope_vars;
  (function() {
    var exports = null != _ref_mask_projects_mask_j_src_scope_vars ? _ref_mask_projects_mask_j_src_scope_vars : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._mask_ensureTmplFn = exports._mask_ensureTmplFnOrig = exports._mask_parse = exports._mask_render = void 0;
    var exports_1 = _ref_mask_src_parser_exports;
    var exports_2 = _ref_mask_src_renderer_exports;
    exports._mask_render = exports_2.renderer_render;
    exports._mask_parse = exports_1.parser_parse;
    exports._mask_ensureTmplFnOrig = exports_1.parser_ensureTemplateFunction;
    function _mask_ensureTmplFn(value) {
      if ('string' !== typeof value) {
        return value;
      }
      return (0, exports._mask_ensureTmplFnOrig)(value);
    }
    exports._mask_ensureTmplFn = _mask_ensureTmplFn;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_j_src_scope_vars === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_j_src_scope_vars) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_j_src_scope_vars, module.exports);
    } else {
      _ref_mask_projects_mask_j_src_scope_vars = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_j_src_jmask_proto;
  (function() {
    var exports = null != _ref_mask_projects_mask_j_src_jmask_proto ? _ref_mask_projects_mask_j_src_jmask_proto : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Proto = void 0;
    var exports_1 = _ref_mask_src_dom_exports;
    var is_1 = _ref_utils_src_is;
    var exports_2 = _ref_mask_src_parser_exports;
    var refs_1 = _ref_utils_src_refs;
    var utils_1 = _ref_mask_projects_mask_j_src_util_utils;
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    var arr_1 = _ref_utils_src_arr;
    var scope_vars_1 = _ref_mask_projects_mask_j_src_scope_vars;
    var exports_3 = _ref_mask_projects_mask_compo_src_exports;
    exports.Proto = {
      type: exports_1.Dom.SET,
      length: 0,
      components: null,
      add: function(mix) {
        var i, length;
        if ('string' === typeof mix) {
          mix = (0, exports_2.parser_parse)(mix);
        }
        if ((0, is_1.is_ArrayLike)(mix)) {
          for (i = 0, length = mix.length; i < length; i++) {
            this.add(mix[i]);
          }
          return this;
        }
        if ('function' === typeof mix && null != mix.prototype.type) {
          // assume this is a controller
          mix = {
            controller: mix,
            type: exports_1.Dom.COMPONENT
          };
        }
        var type = mix.type;
        if (type === exports_1.Dom.FRAGMENT) {
          var nodes = mix.nodes;
          for (i = 0, length = nodes.length; i < length; ) {
            this[this.length++] = nodes[i++];
          }
          return this;
        }
        if (type === exports_1.Dom.CONTROLLER) {
          if (null != mix.nodes && mix.nodes.length) {
            for (i = mix.nodes.length; 0 !== i; ) {
              // set controller as parent, as parent is mask dom node
              mix.nodes[--i].parent = mix;
            }
          }
          if (null != mix.$) {
            this.type = exports_1.Dom.CONTROLLER;
          }
        }
        this[this.length++] = mix;
        return this;
      },
      toArray: function() {
        return refs_1._Array_slice.call(this);
      },
      /**
     *    render([model, cntx, container]) -> HTMLNode
     * - model (Object)
     * - cntx (Object)
     * - container (Object)
     * - returns (HTMLNode)
     *
     **/
      render: function(model, ctx, el, ctr) {
        this.components = [];
        if (1 === this.length) {
          return (0, scope_vars_1._mask_render)(this[0], model, ctx, el, ctr || this);
        }
        if (null == el) {
          el = document.createDocumentFragment();
        }
        for (var i = 0, length = this.length; i < length; i++) {
          (0, scope_vars_1._mask_render)(this[i], model, ctx, el, ctr || this);
        }
        return el;
      },
      prevObject: null,
      end: function() {
        return this.prevObject || this;
      },
      pushStack: function(nodes) {
        nodes = (0, jMask_1.jMask)(nodes);
        nodes.prevObject = this;
        return nodes;
      },
      controllers: function() {
        if (null == this.components) {
          console.warn('Set was not rendered');
        }
        return this.pushStack(this.components || []);
      },
      mask: function(template) {
        if (0 !== arguments.length) {
          return this.empty().append(template);
        }
        return (0, exports_2.mask_stringify)(this);
      },
      text: function(mix, ctx, ctr) {
        if ('string' === typeof mix && 1 === arguments.length) {
          var node = [ new exports_1.Dom.TextNode(mix) ];
          for (var i = 0, imax = this.length; i < imax; i++) {
            this[i].nodes = node;
          }
          return this;
        }
        var str = '';
        for (i = 0, imax = this.length; i < imax; i++) {
          str += (0, utils_1.jmask_getText)(this[i], mix, ctx, ctr);
        }
        return str;
      }
    };
    (0, arr_1.arr_each)([ 'append', 'prepend' ], function(method) {
      exports.Proto[method] = function(mix) {
        var arr, node, $mix = (0, jMask_1.jMask)(mix), i = 0, length = this.length;
        for (;i < length; i++) {
          node = this[i];
          // we create each iteration a new array to prevent collisions in future manipulations
          arr = $mix.toArray();
          for (var j = 0, jmax = arr.length; j < jmax; j++) {
            arr[j].parent = node;
          }
          if (null == node.nodes) {
            node.nodes = arr;
            continue;
          }
          node.nodes = 'append' === method ? node.nodes.concat(arr) : arr.concat(node.nodes);
        }
        return this;
      };
    });
    (0, arr_1.arr_each)([ 'appendTo' ], function(method) {
      exports.Proto[method] = function(mix, model, cntx, ctr) {
        if (null == ctr) {
          ctr = this;
        }
        if (null != mix.nodeType && 'function' === typeof mix.appendChild) {
          mix.appendChild(this.render(model, cntx, null, ctr));
          exports_3.Component.signal.emitIn(ctr, 'domInsert');
          return this;
        }
        (0, jMask_1.jMask)(mix).append(this);
        return this;
      };
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_j_src_jmask_proto === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_j_src_jmask_proto) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_j_src_jmask_proto, module.exports);
    } else {
      _ref_mask_projects_mask_j_src_jmask_proto = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_j_src_jmask_manip_attr;
  (function() {
    var exports = null != _ref_mask_projects_mask_j_src_jmask_manip_attr ? _ref_mask_projects_mask_j_src_jmask_manip_attr : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ManipAttr = void 0;
    var coll_1 = _ref_utils_src_coll;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var scope_vars_1 = _ref_mask_projects_mask_j_src_scope_vars;
    exports.ManipAttr = {
      removeAttr: function(key) {
        return (0, coll_1.coll_each)(this, function(node) {
          node.attr[key] = null;
        });
      },
      attr: function(mix, val) {
        if (1 === arguments.length && (0, is_1.is_String)(mix)) {
          return 0 !== this.length ? this[0].attr[mix] : null;
        }
        function asString(node, key, val) {
          node.attr[key] = (0, scope_vars_1._mask_ensureTmplFn)(val);
        }
        function asObject(node, obj) {
          for (var key in obj) {
            asString(node, key, obj[key]);
          }
        }
        var fn = (0, is_1.is_String)(mix) ? asString : asObject;
        return (0, coll_1.coll_each)(this, function(node) {
          fn(node, mix, val);
        });
      },
      prop: function(key, val) {
        if (1 === arguments.length) {
          return 0 !== this.length ? this[0][key] : this[0].attr[key];
        }
        return (0, coll_1.coll_each)(this, function(node) {
          node[key] = val;
        });
      },
      removeProp: function(key) {
        return (0, coll_1.coll_each)(this, function(node) {
          node.attr[key] = null;
          node[key] = null;
        });
      },
      tag: function(name) {
        if (0 === arguments.length) {
          return this[0] && this[0].tagName;
        }
        return (0, coll_1.coll_each)(this, function(node) {
          node.tagName = name;
        });
      },
      css: function(mix, val) {
        if (arguments.length <= 1 && 'string' === typeof mix) {
          if (null == this.length) {
            return null;
          }
          var style = this[0].attr.style;
          if (null == style) {
            return null;
          }
          style = css_parseStyle(style);
          return null == mix ? style : style[mix];
        }
        if (null == mix) {
          return this;
        }
        var stringify = 'object' === typeof mix ? css_stringify : css_stringifyKeyVal;
        var extend = 'object' === typeof mix ? obj_1.obj_extend : css_extendKeyVal;
        return (0, coll_1.coll_each)(this, function(node) {
          var style = node.attr.style;
          if (null == style) {
            node.attr.style = stringify(mix, val);
            return;
          }
          style = css_parseStyle(style);
          extend(style, mix, val);
          node.attr.style = css_stringify(style);
        });
      }
    };
    function css_extendKeyVal(css, key, val) {
      css[key] = val;
    }
    function css_parseStyle(style) {
      var obj = {};
      style.split(';').forEach(function(x) {
        if ('' === x) {
          return;
        }
        var i = x.indexOf(':'), key = x.substring(0, i).trim(), x = x.substring(i + 1).trim();
        obj[key] = x;
      });
      return obj;
    }
    function css_stringify(css) {
      var key, str = '';
      for (key in css) {
        str += key + ':' + css[key] + ';';
      }
      return str;
    }
    function css_stringifyKeyVal(key, val) {
      return key + ':' + val + ';';
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_j_src_jmask_manip_attr === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_j_src_jmask_manip_attr) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_j_src_jmask_manip_attr, module.exports);
    } else {
      _ref_mask_projects_mask_j_src_jmask_manip_attr = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_j_src_jmask_manip_class;
  (function() {
    var exports = null != _ref_mask_projects_mask_j_src_jmask_manip_class ? _ref_mask_projects_mask_j_src_jmask_manip_class : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ManipClass = void 0;
    var coll_1 = _ref_utils_src_coll;
    var arr_1 = _ref_utils_src_arr;
    exports.ManipClass = {
      hasClass: function(klass) {
        return (0, coll_1.coll_find)(this, function(node) {
          return has(node, klass);
        });
      }
    };
    var Mutator_ = {
      add: function(node, klass) {
        if (false === has(node, klass)) {
          add(node, klass);
        }
      },
      remove: function(node, klass) {
        if (true === has(node, klass)) {
          remove(node, klass);
        }
      },
      toggle: function(node, klass) {
        var fn = true === has(node, klass) ? remove : add;
        fn(node, klass);
      }
    };
    (0, arr_1.arr_each)([ 'add', 'remove', 'toggle' ], function(method) {
      var fn = Mutator_[method];
      exports.ManipClass[method + 'Class'] = function(klass) {
        return (0, coll_1.coll_each)(this, function(node) {
          fn(node, klass);
        });
      };
    });
    function current(node) {
      node = node.attr['class'];
      return 'string' === typeof node ? node : '';
    }
    function has(node, klass) {
      return -1 !== (' ' + current(node) + ' ').indexOf(' ' + klass + ' ');
    }
    function add(node, klass) {
      node.attr['class'] = (current(node) + ' ' + klass).trim();
    }
    function remove(node, klass) {
      node.attr['class'] = (' ' + current(node) + ' ').replace(' ' + klass + ' ', '').trim();
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_j_src_jmask_manip_class === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_j_src_jmask_manip_class) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_j_src_jmask_manip_class, module.exports);
    } else {
      _ref_mask_projects_mask_j_src_jmask_manip_class = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_j_src_jmask_manip_dom;
  (function() {
    var exports = null != _ref_mask_projects_mask_j_src_jmask_manip_dom ? _ref_mask_projects_mask_j_src_jmask_manip_dom : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ManipDom = void 0;
    var coll_1 = _ref_utils_src_coll;
    var arr_1 = _ref_utils_src_arr;
    var utils_1 = _ref_mask_projects_mask_j_src_util_utils;
    var reporters_1 = _ref_mask_src_util_reporters;
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    exports.ManipDom = {
      clone: function() {
        return (0, jMask_1.jMask)((0, coll_1.coll_map)(this, utils_1.jmask_clone));
      },
      wrap: function(wrapper) {
        var $wrap = (0, jMask_1.jMask)(wrapper);
        if (0 === $wrap.length) {
          (0, reporters_1.log_warn)('Not valid wrapper', wrapper);
          return this;
        }
        wrapper = (0, coll_1.coll_map)(this, function(x) {
          var node = $wrap.clone()[0];
          (0, utils_1.jmask_deepest)(node).nodes = [ x ];
          if (null != x.parent) {
            var i = (0, coll_1.coll_indexOf)(x.parent.nodes, x);
            if (-1 !== i) {
              x.parent.nodes.splice(i, 1, node);
            }
          }
          return node;
        });
        return (0, jMask_1.jMask)(wrapper);
      },
      wrapAll: function(wrapper) {
        var $wrap = (0, jMask_1.jMask)(wrapper);
        if (0 === $wrap.length) {
          (0, reporters_1.log_error)('Not valid wrapper', wrapper);
          return this;
        }
        this.parent().mask($wrap);
        (0, utils_1.jmask_deepest)($wrap[0]).nodes = this.toArray();
        return this.pushStack($wrap);
      }
    };
    (0, arr_1.arr_each)([ 'empty', 'remove' ], function(method) {
      exports.ManipDom[method] = function() {
        return (0, coll_1.coll_each)(this, Methods_[method]);
      };
      var Methods_ = {
        remove: function(node) {
          if (null != node.parent) {
            (0, coll_1.coll_remove)(node.parent.nodes, node);
          }
        },
        empty: function(node) {
          node.nodes = null;
        }
      };
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_j_src_jmask_manip_dom === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_j_src_jmask_manip_dom) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_j_src_jmask_manip_dom, module.exports);
    } else {
      _ref_mask_projects_mask_j_src_jmask_manip_dom = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_j_src_jmask_traverse;
  (function() {
    var exports = null != _ref_mask_projects_mask_j_src_jmask_traverse ? _ref_mask_projects_mask_j_src_jmask_traverse : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Traverse = void 0;
    var arr_1 = _ref_utils_src_arr;
    var utils_1 = _ref_mask_projects_mask_j_src_util_utils;
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    var selector_1 = _ref_mask_projects_mask_j_src_util_selector;
    var exports_1 = _ref_mask_src_dom_exports;
    var array_1 = _ref_mask_projects_mask_j_src_util_array;
    exports.Traverse = {
      each: function(fn, ctx) {
        for (var i = 0; i < this.length; i++) {
          fn.call(ctx || this, this[i], i);
        }
        return this;
      },
      map: function(fn, ctx) {
        var arr = [];
        for (var i = 0; i < this.length; i++) {
          arr.push(fn.call(ctx || this, this[i], i));
        }
        return this.pushStack(arr);
      },
      eq: function(i) {
        return -1 === i ? this.slice(i) : this.slice(i, i + 1);
      },
      get: function(i) {
        return i < 0 ? this[this.length - i] : this[i];
      },
      slice: function() {
        return this.pushStack(Array.prototype.slice.apply(this, arguments));
      }
    };
    (0, arr_1.arr_each)([ 'filter', 'children', 'closest', 'parent', 'find', 'first', 'last' ], function(method) {
      exports.Traverse[method] = function(selector) {
        var i, x, result = [], matcher = null == selector ? null : (0, selector_1.selector_parse)(selector, this.type, 'closest' === method ? 'up' : 'down');
        switch (method) {
         case 'filter':
          return (0, jMask_1.jMask)((0, utils_1.jmask_filter)(this, matcher));

         case 'children':
          var nextKey = (0, selector_1.selector_getNextKey)(this);
          for (i = 0; i < this.length; i++) {
            x = this[i];
            var arr = x[nextKey];
            if (null == arr) {
              continue;
            }
            result = result.concat(null == matcher ? arr : (0, utils_1.jmask_filter)(arr, matcher));
          }
          break;

         case 'parent':
          for (i = 0; i < this.length; i++) {
            x = this[i].parent;
            if (!x || x.type === exports_1.Dom.FRAGMENT || matcher && (0, selector_1.selector_match)(x, matcher)) {
              continue;
            }
            result.push(x);
          }
          (0, array_1.arr_unique)(result);
          break;

         case 'closest':
         case 'find':
          if (null == matcher) {
            break;
          }
          for (i = 0; i < this.length; i++) {
            (0, utils_1.jmask_find)(this[i][matcher.nextKey], matcher, result);
          }
          break;

         case 'first':
         case 'last':
          var index;
          for (i = 0; i < this.length; i++) {
            index = 'first' === method ? i : this.length - i - 1;
            x = this[index];
            if (null == matcher || (0, selector_1.selector_match)(x, matcher)) {
              result[0] = x;
              break;
            }
          }
          break;
        }
        return this.pushStack(result);
      };
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_j_src_jmask_traverse === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_j_src_jmask_traverse) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_j_src_jmask_traverse, module.exports);
    } else {
      _ref_mask_projects_mask_j_src_jmask_traverse = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_j_src_jmask_jMask;
  (function() {
    var exports = null != _ref_mask_projects_mask_j_src_jmask_jMask ? _ref_mask_projects_mask_j_src_jmask_jMask : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.jMask = void 0;
    var exports_1 = _ref_mask_src_dom_exports;
    var proto_1 = _ref_mask_projects_mask_j_src_jmask_proto;
    var manip_attr_1 = _ref_mask_projects_mask_j_src_jmask_manip_attr;
    var manip_class_1 = _ref_mask_projects_mask_j_src_jmask_manip_class;
    var manip_dom_1 = _ref_mask_projects_mask_j_src_jmask_manip_dom;
    var traverse_1 = _ref_mask_projects_mask_j_src_jmask_traverse;
    var obj_1 = _ref_utils_src_obj;
    function jMask(mix) {
      if (this instanceof jMask === false) {
        return new jMask(mix);
      }
      if (null == mix) {
        return this;
      }
      if (mix.type === exports_1.Dom.SET) {
        return mix;
      }
      return this.add(mix);
    }
    exports.jMask = jMask;
    (0, obj_1.obj_extendMany)(proto_1.Proto, manip_attr_1.ManipAttr, manip_class_1.ManipClass, manip_dom_1.ManipDom, traverse_1.Traverse, {
      constructor: jMask
    });
    jMask.prototype = proto_1.Proto;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_j_src_jmask_jMask === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_j_src_jmask_jMask) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_j_src_jmask_jMask, module.exports);
    } else {
      _ref_mask_projects_mask_j_src_jmask_jMask = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_attr;
  (function() {
    var exports = null != _ref_mask_src_util_attr ? _ref_mask_src_util_attr : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.attr_first = exports.attr_extend = void 0;
    var obj_1 = _ref_utils_src_obj;
    function attr_extend(a, b) {
      if (null == a) {
        return null == b ? {} : (0, obj_1.obj_create)(b);
      }
      if (null == b) {
        return a;
      }
      for (var key in b) {
        if ('class' === key && 'string' === typeof a[key]) {
          a[key] += ' ' + b[key];
          continue;
        }
        a[key] = b[key];
      }
      return a;
    }
    exports.attr_extend = attr_extend;
    function attr_first(attr) {
      for (var key in attr) {
        return key;
      }
      return null;
    }
    exports.attr_first = attr_first;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_attr === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_attr) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_attr, module.exports);
    } else {
      _ref_mask_src_util_attr = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_css;
  (function() {
    var exports = null != _ref_mask_src_util_css ? _ref_mask_src_util_css : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.css_ensureScopedStyles = void 0;
    var is_1 = _ref_utils_src_is;
    var reporters_1 = _ref_mask_src_util_reporters;
    function css_ensureScopedStyles(str, node, el) {
      //#if (NODE)
      if (null != el.compoName) {
        // in Node the dom tree includes components as elements, so get the parent
        el = el.parentNode;
      }
      //#endif
      var attr = node.attr;
      if (null == attr.scoped && null == attr[KEY]) {
        return str;
      }
      if (false === (0, is_1.is_String)(str)) {
        (0, reporters_1.error_withNode)('Scoped style can`t have interpolations', node);
        return str;
      }
      // Remove `scoped` attribute to exclude supported browsers.
      // Redefine custom attribute to use same template later
      attr.scoped = null;
      attr[KEY] = 1;
      attr = getScopeIdentity(node, el);
      node = str;
      node = transformScopedStyles(node, attr);
      node = transformHostCss(node, attr);
      return node;
    }
    exports.css_ensureScopedStyles = css_ensureScopedStyles;
    var KEY = 'x-scoped';
    var rgx_selector = /^([\s]*)([^\{\}]+)\{/gm;
    var rgx_host = /^([\s]*):host\s*(\(([^)]+)\))?\s*\{/gm;
    function transformScopedStyles(css, id) {
      return css.replace(rgx_selector, function(full, pref, selector) {
        if (-1 !== selector.indexOf(':host')) {
          return full;
        }
        var arr = selector.split(','), imax = arr.length, i = 0;
        for (;i < imax; i++) {
          arr[i] = id + ' ' + arr[i];
        }
        selector = arr.join(',');
        return pref + selector + '{';
      });
    }
    function transformHostCss(css, id) {
      return css.replace(rgx_host, function(full, pref, ext, expr) {
        return pref + id + (expr || '') + '{';
      });
    }
    function getScopeIdentity(node, el) {
      node = 'scoped__css__' + node.id;
      if (el.id) {
        el.className += ' ' + node;
        return '.' + node;
      }
      el.setAttribute('id', node);
      return '#' + node;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_css === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_css) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_css, module.exports);
    } else {
      _ref_mask_src_util_css = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_obj_props;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_obj_props ? _ref_mask_projects_observer_src_obj_props : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.obj_chainToProp = exports.obj_ensureRebindersProperty = exports.obj_getObserversProperty = exports.obj_ensureObserversProperty = exports.obj_ensureFieldDeep = exports.obj_defineProp = exports.prop_PROXY = exports.prop_REBINDERS = exports.prop_DIRTY = exports.prop_TIMEOUT = exports.prop_MUTATORS = exports.prop_OBS = void 0;
    exports.prop_OBS = '__observers';
    exports.prop_MUTATORS = '__mutators';
    exports.prop_TIMEOUT = '__dfrTimeout';
    exports.prop_DIRTY = '__dirty';
    exports.prop_REBINDERS = '__rebinders';
    exports.prop_PROXY = '__proxies';
    exports.obj_defineProp = Object.defineProperty;
    function obj_ensureFieldDeep(obj, chain) {
      var i = -1, imax = chain.length - 1;
      while (++i < imax) {
        var key = chain[i];
        if (null == obj[key]) {
          obj[key] = {};
        }
        obj = obj[key];
      }
      return obj;
    }
    exports.obj_ensureFieldDeep = obj_ensureFieldDeep;
    function obj_ensureObserversProperty(obj, prop) {
      var obs = obj[exports.prop_OBS];
      if (null == obs) {
        obs = {
          __dirty: null,
          __dfrTimeout: null,
          __mutators: null,
          __rebinders: {},
          __proxies: {}
        };
        (0, exports.obj_defineProp)(obj, exports.prop_OBS, {
          value: obs,
          enumerable: false
        });
      }
      if (null == prop) {
        return obs;
      }
      obj = obs[prop];
      return null == obj ? obs[prop] = [] : obj;
    }
    exports.obj_ensureObserversProperty = obj_ensureObserversProperty;
    function obj_getObserversProperty(obj, type) {
      obj = obj[exports.prop_OBS];
      return null == obj ? null : obj[type];
    }
    exports.obj_getObserversProperty = obj_getObserversProperty;
    function obj_ensureRebindersProperty(obj) {
      var hash = obj[exports.prop_REBINDERS];
      if (null == hash) {
        hash = {};
        (0, exports.obj_defineProp)(obj, exports.prop_REBINDERS, {
          value: hash,
          enumerable: false
        });
      }
      return hash;
    }
    exports.obj_ensureRebindersProperty = obj_ensureRebindersProperty;
    function obj_chainToProp(chain, start) {
      var str = '', imax = chain.length, i = start - 1;
      while (++i < imax) {
        if (i !== start) {
          str += '.';
        }
        str += chain[i];
      }
      return str;
    }
    exports.obj_chainToProp = obj_chainToProp;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_obj_props === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_obj_props) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_obj_props, module.exports);
    } else {
      _ref_mask_projects_observer_src_obj_props = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_obj_mutators;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_obj_mutators ? _ref_mask_projects_observer_src_obj_mutators : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.objMutator_removeObserver = exports.objMutator_addObserver = void 0;
    var arr_1 = _ref_utils_src_arr;
    var refs_1 = _ref_utils_src_refs;
    var obj_props_1 = _ref_mask_projects_observer_src_obj_props;
    function objMutator_addObserver(obj, mutators, cb) {
      var methods = mutators.methods, throttle = mutators.throttle, mutators = (0, 
      obj_props_1.obj_ensureObserversProperty)(obj, obj_props_1.prop_MUTATORS);
      if (0 === mutators.length) {
        var method, fn, imax = methods.length, i = -1;
        while (++i < imax) {
          method = methods[i];
          fn = obj[method];
          if (null == fn) {
            continue;
          }
          obj[method] = objMutator_createWrapper_(obj, fn, method, throttle);
        }
      }
      mutators[mutators.length++] = cb;
    }
    exports.objMutator_addObserver = objMutator_addObserver;
    function objMutator_removeObserver(obj, mutators, cb) {
      obj = (0, obj_props_1.obj_getObserversProperty)(obj, obj_props_1.prop_MUTATORS);
      if (null == obj) {
        return;
      }
      if (void 0 === cb) {
        obj.length = 0;
        return;
      }
      (0, arr_1.arr_remove)(obj, cb);
    }
    exports.objMutator_removeObserver = objMutator_removeObserver;
    function objMutator_createWrapper_(obj, originalFn, method, throttle) {
      var fn = true === throttle ? callDelayed : call;
      return function() {
        return fn(obj, originalFn, method, refs_1._Array_slice.call(arguments));
      };
    }
    function call(obj, original, method, args) {
      var cbs = (0, obj_props_1.obj_ensureObserversProperty)(obj, obj_props_1.prop_MUTATORS), original = original.apply(obj, args);
      tryNotify(obj, cbs, method, args, original);
      return original;
    }
    function callDelayed(obj, original, method, args) {
      var cbs = (0, obj_props_1.obj_ensureObserversProperty)(obj, obj_props_1.prop_MUTATORS), result = original.apply(obj, args);
      var obs = obj[obj_props_1.prop_OBS];
      if (null != obs[obj_props_1.prop_TIMEOUT]) {
        return result;
      }
      obs[obj_props_1.prop_TIMEOUT] = setTimeout(function() {
        obs[obj_props_1.prop_TIMEOUT] = null;
        tryNotify(obj, cbs, method, args, result);
      });
      return result;
    }
    function tryNotify(obj, cbs, method, args, result) {
      if (0 === cbs.length) {
        return;
      }
      var obs = obj[obj_props_1.prop_OBS];
      if (null != obs[obj_props_1.prop_DIRTY]) {
        obs[obj_props_1.prop_DIRTY][obj_props_1.prop_MUTATORS] = 1;
        return;
      }
      var x, imax = cbs.length, i = -1;
      while (++i < imax) {
        x = cbs[i];
        if ('function' === typeof x) {
          x(obj, method, args, result);
        }
      }
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_obj_mutators === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_obj_mutators) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_obj_mutators, module.exports);
    } else {
      _ref_mask_projects_observer_src_obj_mutators = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_Mutators;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_Mutators ? _ref_mask_projects_observer_src_Mutators : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.getSelfMutators = void 0;
    var is_1 = _ref_utils_src_is;
    //Resolve object, or if property do not exists - create
    function getSelfMutators(obj) {
      if (false === (0, is_1.is_Object)(obj)) {
        return null;
      }
      if ((0, is_1.is_ArrayLike)(obj)) {
        return MUTATORS_.Array;
      }
      if ((0, is_1.is_Date)(obj)) {
        return MUTATORS_.Date;
      }
      return null;
    }
    exports.getSelfMutators = getSelfMutators;
    var MUTATORS_ = {
      Array: {
        throttle: false,
        methods: [ 
        // native mutators
        'push', 'unshift', 'splice', 'pop', 'shift', 'reverse', 'sort', 
        // collection mutators
        'remove' ]
      },
      Date: {
        throttle: true,
        methods: [ 'setDate', 'setFullYear', 'setHours', 'setMilliseconds', 'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear', 'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds' ]
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_Mutators === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_Mutators) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_Mutators, module.exports);
    } else {
      _ref_mask_projects_observer_src_Mutators = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_obj_crumbs;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_obj_crumbs ? _ref_mask_projects_observer_src_obj_crumbs : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.obj_defineCrumbs = void 0;
    var obj_props_1 = _ref_mask_projects_observer_src_obj_props;
    var obj_1 = _ref_utils_src_obj;
    var obj_observe_1 = _ref_mask_projects_observer_src_obj_observe;
    /* return false, when path contains null values */
    function obj_defineCrumbs(obj, chain) {
      var key, rebinder = obj_crumbRebindDelegate(obj), path = '';
      var imax = chain.length - 1, i = 0, x = obj;
      for (;i < imax; i++) {
        key = chain[i];
        path += key + '.';
        obj_defineCrumb(path, x, key, rebinder);
        x = x[key];
        if (null == x || 'object' !== typeof x) {
          return false;
        }
      }
      return true;
    }
    exports.obj_defineCrumbs = obj_defineCrumbs;
    function obj_defineCrumb(path, obj, key, rebinder) {
      var cbs = obj[obj_props_1.prop_OBS] && obj[obj_props_1.prop_OBS][key];
      if (null != cbs) {
        return;
      }
      var old, value = obj[key];
      cbs = (0, obj_props_1.obj_ensureRebindersProperty)(obj);
      var set = cbs[key];
      if (null != set) {
        if (null == set[path]) {
          set[path] = rebinder;
        }
        return;
      }
      set = cbs[key] = {};
      set[path] = rebinder;
      (0, obj_props_1.obj_defineProp)(obj, key, {
        get: function() {
          return value;
        },
        set: function(x) {
          if (x === value) {
            return;
          }
          old = value;
          value = x;
          for (var _path in set) {
            set[_path](_path, old);
          }
        },
        configurable: true,
        enumerable: true
      });
    }
    function obj_crumbRebindDelegate(obj) {
      return function(path, oldValue) {
        obj_crumbRebind(obj, path, oldValue);
      };
    }
    function obj_crumbRebind(obj, path, oldValue) {
      var obs = obj[obj_props_1.prop_OBS];
      if (null == obs) {
        return;
      }
      for (var prop in obs) {
        if (0 !== prop.indexOf(path)) {
          continue;
        }
        var cbs = obs[prop].slice(0), imax = cbs.length, i = 0;
        if (0 === imax) {
          continue;
        }
        var val = (0, obj_1.obj_getProperty)(obj, prop), oldProp = prop.substring(path.length), oldVal = (0, 
        obj_1.obj_getProperty)(oldValue, oldProp);
        for (i = 0; i < imax; i++) {
          var cb = cbs[i];
          (0, obj_observe_1.obj_removeObserver)(obj, prop, cb);
          if (null != oldValue && 'object' === typeof oldValue) {
            (0, obj_observe_1.obj_removeObserver)(oldValue, oldProp, cb);
          }
        }
        if (oldVal !== val) {
          for (i = 0; i < imax; i++) {
            cbs[i](val);
          }
        }
        for (i = 0; i < imax; i++) {
          (0, obj_observe_1.obj_addObserver)(obj, prop, cbs[i]);
        }
      }
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_obj_crumbs === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_obj_crumbs) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_obj_crumbs, module.exports);
    } else {
      _ref_mask_projects_observer_src_obj_crumbs = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_notify;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_notify ? _ref_mask_projects_observer_src_notify : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.obj_deep_notifyListeners = exports.obj_sub_notifyListeners = void 0;
    var obj_observe_1 = _ref_mask_projects_observer_src_obj_observe;
    var obj_1 = _ref_utils_src_obj;
    var obj_props_1 = _ref_mask_projects_observer_src_obj_props;
    function obj_sub_notifyListeners(obj, path, oldVal) {
      var obs = obj[obj_props_1.prop_OBS];
      if (null == obs) {
        return;
      }
      for (var prop in obs) {
        if (0 !== prop.indexOf(path + '.')) {
          continue;
        }
        var oldProp, cb, cbs = obs[prop].slice(0), imax = cbs.length, i = 0;
        if (0 === imax) {
          continue;
        }
        var val = (0, obj_1.obj_getProperty)(obj, prop);
        for (i = 0; i < imax; i++) {
          cb = cbs[i];
          (0, obj_observe_1.obj_removeObserver)(obj, prop, cb);
          if (null != oldVal && 'object' === typeof oldVal) {
            oldProp = prop.substring(path.length + 1);
            (0, obj_observe_1.obj_removeObserver)(oldVal, oldProp, cb);
          }
        }
        for (i = 0; i < imax; i++) {
          cbs[i](val);
        }
        for (i = 0; i < imax; i++) {
          (0, obj_observe_1.obj_addObserver)(obj, prop, cbs[i]);
        }
      }
    }
    exports.obj_sub_notifyListeners = obj_sub_notifyListeners;
    function obj_deep_notifyListeners(obj, chain, oldVal, currentVal, fns) {
      var i = 0, imax = chain.length, ctx = obj, arr = fns.slice(0);
      do {
        ctx = ctx[chain[i]];
        if (null == ctx) {
          return;
        }
        var obs = ctx[obj_props_1.prop_OBS];
        if (null == obs) {
          continue;
        }
        var prop = (0, obj_props_1.obj_chainToProp)(chain, i + 1);
        var cbs = obs[prop];
        if (null == cbs) {
          continue;
        }
        for (var j = 0; j < cbs.length; j++) {
          var cb = cbs[j];
          if (-1 !== arr.indexOf(cb)) {
            continue;
          }
          cb(currentVal);
          arr.push(cb);
        }
      } while (++i < imax - 1);
    }
    exports.obj_deep_notifyListeners = obj_deep_notifyListeners;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_notify === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_notify) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_notify, module.exports);
    } else {
      _ref_mask_projects_observer_src_notify = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_obj_observe;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_obj_observe ? _ref_mask_projects_observer_src_obj_observe : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.obj_removeMutatorObserver = exports.obj_addMutatorObserver = exports.obj_unlockObservers = exports.obj_lockObservers = exports.obj_removeObserver = exports.obj_hasObserver = exports.obj_addObserver = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var obj_1 = _ref_utils_src_obj;
    var arr_1 = _ref_utils_src_arr;
    var obj_props_1 = _ref_mask_projects_observer_src_obj_props;
    var obj_mutators_1 = _ref_mask_projects_observer_src_obj_mutators;
    var Mutators_1 = _ref_mask_projects_observer_src_Mutators;
    var obj_crumbs_1 = _ref_mask_projects_observer_src_obj_crumbs;
    var notify_1 = _ref_mask_projects_observer_src_notify;
    var AddObserver;
    (function(AddObserver) {
      function add(obj, property, cb) {
        if (null == obj) {
          (0, reporters_1.log_error)('Not possible to add the observer for "'.concat(property, '" as the model is undefined.'));
          return;
        }
        // closest observer
        var parts = property.split('.'), i = -1;
        if (pushClosest(obj[parts[0]], parts, 1, cb)) {
          /* We have added a callback as close as possible to the observle property owner
             * But also add the cb to myself to listen different object path level setters
             */
          var cbs_1 = pushListener_(obj, property, cb);
          if (1 === cbs_1.length) {
            i = parts.splice(0, i);
            if (0 !== i.length) {
              attachProxy_(obj, property, cbs_1, i);
            }
          }
          if (parts.length > 1) {
            (0, obj_crumbs_1.obj_defineCrumbs)(obj, parts);
          }
          return;
        }
        cbs_1 = pushListener_(obj, property, cb);
        if (1 === cbs_1.length) {
          attachProxy_(obj, property, cbs_1, parts);
        }
        i = (0, obj_1.obj_getProperty)(obj, property), cbs_1 = (0, Mutators_1.getSelfMutators)(i);
        if (null != cbs_1) {
          (0, obj_mutators_1.objMutator_addObserver)(i, cbs_1, cb);
        }
      }
      AddObserver.add = add;
      function pushClosest(ctx, parts, i, cb) {
        if (null == ctx) {
          return false;
        }
        if (i < parts.length - 1 && pushClosest(ctx[parts[i]], parts, i + 1, cb)) {
          return true;
        }
        var obs = ctx[obj_props_1.prop_OBS];
        if (null == obs) {
          return false;
        }
        parts = (0, obj_props_1.obj_chainToProp)(parts, i);
        i = obs[parts];
        if (null == i) {
          // fix [obj.test](hosts)
          i = obs[obj_props_1.prop_PROXY];
          if (null != i && true === i[parts]) {
            pushListener_(ctx, parts, cb);
            obs = (0, obj_1.obj_getProperty)(ctx, parts);
            i = (0, Mutators_1.getSelfMutators)(obs);
            if (i) {
              (0, obj_mutators_1.objMutator_addObserver)(obs, i, cb);
            }
            return true;
          }
          return false;
        }
        pushListener_(ctx, parts, cb);
        return true;
      }
    })(AddObserver = AddObserver || {});
    exports.obj_addObserver = AddObserver.add;
    function obj_hasObserver(obj, property, callback) {
      // nested observer
      var parts = property.split('.'), imax = parts.length, i = -1, x = obj;
      while (++i < imax) {
        x = x[parts[i]];
        if (null == x) {
          break;
        }
        if (null != x[obj_props_1.prop_OBS]) {
          if (obj_hasObserver(x, parts.slice(i + 1).join('.'), callback)) {
            return true;
          }
          break;
        }
      }
      obj = obj[obj_props_1.prop_OBS];
      if (null == obj || null == obj[property]) {
        return false;
      }
      return (0, arr_1.arr_contains)(obj[property], callback);
    }
    exports.obj_hasObserver = obj_hasObserver;
    function obj_removeObserver(obj, property, callback) {
      if (null == obj) {
        (0, reporters_1.log_error)('Not possible to remove the observer for "'.concat(property, '" as current model is undefined.'));
        return;
      }
      // nested observer
      var parts = property.split('.'), imax = parts.length, i = -1, x = obj;
      while (++i < imax) {
        x = x[parts[i]];
        if (null == x) {
          break;
        }
        if (null != x[obj_props_1.prop_OBS]) {
          obj_removeObserver(x, parts.slice(i + 1).join('.'), callback);
          break;
        }
      }
      var obs = (0, obj_props_1.obj_getObserversProperty)(obj, property);
      if (null != obs) {
        if (void 0 === callback) {
          // callback not provided -> remove all observers
          obs.length = 0;
        } else {
          (0, arr_1.arr_remove)(obs, callback);
        }
      }
      obs = (0, obj_1.obj_getProperty)(obj, property);
      obj = (0, Mutators_1.getSelfMutators)(obs);
      if (null != obj) {
        (0, obj_mutators_1.objMutator_removeObserver)(obs, obj, callback);
      }
    }
    exports.obj_removeObserver = obj_removeObserver;
    function obj_lockObservers(obj) {
      obj = obj[obj_props_1.prop_OBS];
      if (null != obj) {
        obj[obj_props_1.prop_DIRTY] = {};
      }
    }
    exports.obj_lockObservers = obj_lockObservers;
    function obj_unlockObservers(obj) {
      var obs = obj[obj_props_1.prop_OBS], dirties = null == obs ? null : obs[obj_props_1.prop_DIRTY];
      if (null == dirties) {
        return;
      }
      obs[obj_props_1.prop_DIRTY] = null;
      var prop, cbs, val, imax, i;
      for (prop in dirties) {
        cbs = obj[obj_props_1.prop_OBS][prop];
        imax = null == cbs ? 0 : cbs.length;
        if (0 === imax) {
          continue;
        }
        i = -1;
        val = prop === obj_props_1.prop_MUTATORS ? obj : (0, obj_1.obj_getProperty)(obj, prop);
        while (++i < imax) {
          cbs[i](val);
        }
      }
    }
    exports.obj_unlockObservers = obj_unlockObservers;
    function obj_addMutatorObserver(obj, cb) {
      var mutators = (0, Mutators_1.getSelfMutators)(obj);
      if (null != mutators) {
        (0, obj_mutators_1.objMutator_addObserver)(obj, mutators, cb);
      }
    }
    exports.obj_addMutatorObserver = obj_addMutatorObserver;
    function obj_removeMutatorObserver(obj, cb) {
      (0, obj_mutators_1.objMutator_removeObserver)(obj, null, cb);
    }
    exports.obj_removeMutatorObserver = obj_removeMutatorObserver;
    function attachProxy_(obj, property, cbs, chain) {
      var length = chain.length;
      if (length > 1) {
        if (false === (0, obj_crumbs_1.obj_defineCrumbs)(obj, chain)) {
          return;
        }
      }
      // TODO: ensure is not required, as defineCrumbs returns false when path contains null value */
      var parent = length > 1 ? (0, obj_props_1.obj_ensureFieldDeep)(obj, chain) : obj;
      length = chain[length - 1];
      var currentVal = parent[length];
      if ('length' === length) {
        var mutators = (0, Mutators_1.getSelfMutators)(parent);
        if (null != mutators) {
          (0, obj_mutators_1.objMutator_addObserver)(parent, mutators, function() {
            var imax = cbs.length, i = -1;
            while (++i < imax) {
              cbs[i].apply(null, arguments);
            }
          });
          return currentVal;
        }
      }
      mutators = (0, obj_props_1.obj_ensureObserversProperty)(parent);
      mutators = mutators[obj_props_1.prop_PROXY];
      if (true === mutators[length]) {
        return;
      }
      mutators[length] = true;
      (0, obj_props_1.obj_defineProp)(parent, length, {
        get: function() {
          return currentVal;
        },
        set: function(x) {
          if (x === currentVal) {
            return;
          }
          var imax = cbs.length;
          var oldVal = currentVal;
          var oldMutators = (0, Mutators_1.getSelfMutators)(oldVal);
          if (null != oldMutators) {
            for (var i = 0; i < imax; i++) {
              (0, obj_mutators_1.objMutator_removeObserver)(oldVal, oldMutators, cbs[i]);
            }
          }
          currentVal = x;
          var mutators = (0, Mutators_1.getSelfMutators)(x);
          if (null != mutators) {
            for (i = 0; i < imax; i++) {
              (0, obj_mutators_1.objMutator_addObserver)(x, mutators, cbs[i]);
            }
          }
          if (null != obj[obj_props_1.prop_OBS][obj_props_1.prop_DIRTY]) {
            obj[obj_props_1.prop_OBS][obj_props_1.prop_DIRTY][property] = 1;
            return;
          }
          for (i = 0; i < cbs.length; i++) {
            var fn = cbs[i];
            fn(x);
            if (fn !== cbs[i]) {
              // handler has removed the cb.
              // ArrCopy not used due to GC optm.
              i--;
            }
          }
          (0, notify_1.obj_sub_notifyListeners)(obj, property, oldVal);
          (0, notify_1.obj_deep_notifyListeners)(obj, chain, oldVal, currentVal, cbs);
        },
        configurable: true,
        enumerable: true
      });
      return currentVal;
    }
    // Create Collection - Check If Exists - Add Listener
    function pushListener_(obj, property, cb) {
      obj = (0, obj_props_1.obj_ensureObserversProperty)(obj, property);
      if (false === (0, arr_1.arr_contains)(obj, cb)) {
        obj.push(cb);
      }
      return obj;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_obj_observe === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_obj_observe) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_obj_observe, module.exports);
    } else {
      _ref_mask_projects_observer_src_obj_observe = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_utils_obj;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_utils_obj ? _ref_mask_projects_observer_src_utils_obj : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.obj_callMethod = void 0;
    function obj_callMethod(obj, path, args) {
      var end = path.lastIndexOf('.');
      if (-1 === end) {
        return call(obj, path, args);
      }
      var host = obj, i = -1;
      while (null != host && i !== end) {
        var start = i;
        i = path.indexOf('.', i);
        start = path.substring(start + 1, i);
        host = host[start];
      }
      return call(host, path.substring(end + 1), args);
    }
    exports.obj_callMethod = obj_callMethod;
    function call(obj, key, args) {
      var fn = null == obj ? null : obj[key];
      if ('function' !== typeof fn) {
        console.error('Not a function', key);
        return null;
      }
      return fn.apply(obj, args);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_utils_obj === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_utils_obj) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_utils_obj, module.exports);
    } else {
      _ref_mask_projects_observer_src_utils_obj = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_utils_expr;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_utils_expr ? _ref_mask_projects_observer_src_utils_expr : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.expr_getHost = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    // [ObjectHost, Property]
    var tuple = [ null, null ];
    function expr_getHost(accessor, model, ctx, ctr) {
      model = get(accessor, model, ctx, ctr);
      if (null == model || null == model[0]) {
        (0, reporters_1.error_withCompo)('Observable host is undefined or is not allowed: ' + accessor.toString(), ctr);
        return null;
      }
      return model;
    }
    exports.expr_getHost = expr_getHost;
    function get(accessor, model, ctx, ctr) {
      if (null == accessor) {
        return;
      }
      if ('object' === typeof accessor) {
        var obj_1 = (0, exports_1.expression_eval)(accessor.accessor, model, null, ctr);
        if (null == obj_1 || 'object' !== typeof obj_1) {
          return null;
        }
        tuple[0] = obj_1;
        tuple[1] = accessor.ref;
        return tuple;
      }
      var obj_1 = accessor, accessor = obj_1.split('.'), imax = accessor.length;
      if (imax > 1) {
        imax = accessor[0];
        if ('this' === imax || '$c' === imax || '$' === imax) {
          // Controller Observer
          var owner = _getObservable_Controller(ctr, accessor[1]);
          var cutIdx = imax.length + 1;
          tuple[0] = owner;
          tuple[1] = obj_1.substring(cutIdx);
          return tuple;
        }
        if ('$scope' === imax) {
          // Controller Observer
          owner = _getObservable_Scope(ctr, accessor[1]);
          cutIdx = 7;
          tuple[0] = owner;
          tuple[1] = obj_1.substring(cutIdx);
          return tuple;
        }
      }
      imax = null;
      if (_isDefined(model, accessor[0])) {
        imax = model;
      }
      if (null == imax) {
        imax = _getObservable_Scope(ctr, accessor[0]);
      }
      if (null == imax) {
        imax = model;
      }
      tuple[0] = imax;
      tuple[1] = obj_1;
      return tuple;
    }
    function _getObservable_Controller(ctr_, key) {
      var ctr = ctr_;
      while (null != ctr) {
        if (_isDefined(ctr, key)) {
          return ctr;
        }
        ctr = ctr.parent;
      }
      return ctr;
    }
    function _getObservable_Scope(ctr_, property) {
      var scope, ctr = ctr_;
      while (null != ctr) {
        scope = ctr.scope;
        if (_isDefined(scope, property)) {
          return scope;
        }
        ctr = ctr.parent;
      }
      return null;
    }
    function _isDefined(obj_, key_) {
      if (63 /*?*/ === key_.charCodeAt(key_.length - 1)) {
        key_ = key_.slice(0, -1);
      }
      return null != obj_ && key_ in obj_;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_utils_expr === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_utils_expr) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_utils_expr, module.exports);
    } else {
      _ref_mask_projects_observer_src_utils_expr = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_expression;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_expression ? _ref_mask_projects_observer_src_expression : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.expression_createListener = exports.expression_createBinder = exports.expression_callFn = exports.expression_unbind = exports.expression_bind = void 0;
    var refs_1 = _ref_utils_src_refs;
    var obj_1 = _ref_mask_projects_observer_src_utils_obj;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    var obj_observe_1 = _ref_mask_projects_observer_src_obj_observe;
    var eval_deferred_1 = _ref_mask_projects_expression_src_eval_deferred;
    var expr_1 = _ref_mask_projects_observer_src_utils_expr;
    function expression_bind(expr, model, ctx, ctr, cb, opts) {
      if ('.' === expr) {
        if (null != model) {
          (0, obj_observe_1.obj_addMutatorObserver)(model, cb);
        }
        return;
      }
      if (true !== (null === opts || void 0 === opts ? void 0 : opts.propertiesOnly)) {
        opts = (0, exports_1.expression_getType)(expr);
        if (opts === exports_1.exp_type_Observe) {
          opts = (0, eval_deferred_1._evaluateAstDeferredInner)(expr, model, ctx, ctr);
          if (null === opts || void 0 === opts ? void 0 : opts.subscribe) {
            return opts.subscribe(cb);
          }
        }
      }
      toggleExpressionsBindings(obj_observe_1.obj_addObserver, expr, model, ctr, cb);
      return {
        unsubscribe: function() {
          expression_unbind(expr, model, ctr, cb);
        }
      };
    }
    exports.expression_bind = expression_bind;
    function expression_unbind(expr, model, ctr, cb, opts) {
      if ('.' === expr) {
        if (null != model) {
          (0, obj_observe_1.obj_removeMutatorObserver)(model, cb);
        }
        return;
      }
      toggleExpressionsBindings(obj_observe_1.obj_removeObserver, expr, model, ctr, cb);
    }
    exports.expression_unbind = expression_unbind;
    function toggleExpressionsBindings(toggleFn, expr, model, ctr, cb) {
      expr = (0, exports_1.expression_varRefs)(expr, model, null, ctr);
      if (null == expr) {
        return null;
      }
      if ('string' === typeof expr) {
        _toggleObserver(toggleFn, model, ctr, expr, cb);
        return;
      }
      var arr = expr;
      var imax = arr.length;
      var i = -1;
      while (++i < imax) {
        var accs = arr[i];
        if ('string' === typeof accs) {
          if (95 /*_*/ === accs.charCodeAt(0) && 46 /*.*/ === accs.charCodeAt(0)) {
            continue;
          }
        } else if ('object' === typeof accs) {
          if ('_' === accs.ref) {
            continue;
          }
        }
        _toggleObserver(toggleFn, model, ctr, accs, cb);
      }
    }
    function expression_callFn(accessor, model, ctx, ctr, args) {
      accessor = (0, expr_1.expr_getHost)(accessor, model, ctx, ctr);
      if (null != accessor) {
        model = accessor[0], ctx = accessor[1];
        return (0, obj_1.obj_callMethod)(model, ctx, args);
      }
      return null;
    }
    exports.expression_callFn = expression_callFn;
    /**
 * expression_bind only fires callback, if some of refs were changed,
 * but doesnt supply new expression value
 **/
    function expression_createBinder(expr, model, ctx, ctr, fn) {
      var _this = this;
      return expression_createListener(function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var value = (0, exports_1.expression_eval)(expr, model, ctx, ctr);
        args[0] = null == value ? '' : value;
        fn.apply(_this, args);
      });
    }
    exports.expression_createBinder = expression_createBinder;
    function expression_createListener(callback) {
      var locks = 0;
      return function() {
        if (++locks > 1) {
          locks = 0;
          (0, reporters_1.log_warn)('<listener:expression> concurrent binder');
          return;
        }
        callback.apply(this, refs_1._Array_slice.call(arguments));
        locks--;
      };
    }
    exports.expression_createListener = expression_createListener;
    function _toggleObserver(mutatorFn, model, ctr, accessor, callback) {
      accessor = (0, expr_1.expr_getHost)(accessor, model, null, ctr);
      if (null == accessor) {
        return;
      }
      model = accessor[0], ctr = accessor[1];
      if (null == model) {
        return;
      }
      mutatorFn(model, ctr, callback);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_expression === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_expression) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_expression, module.exports);
    } else {
      _ref_mask_projects_observer_src_expression = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_exports;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_exports ? _ref_mask_projects_observer_src_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.expression_createListener = exports.expression_createBinder = exports.expression_callFn = exports.expression_unbind = exports.expression_bind = exports.obj_unlockObservers = exports.obj_lockObservers = exports.obj_removeMutatorObserver = exports.obj_addMutatorObserver = exports.obj_removeObserver = exports.obj_hasObserver = exports.obj_addObserver = void 0;
    var obj_observe_1 = _ref_mask_projects_observer_src_obj_observe;
    Object.defineProperty(exports, 'obj_addObserver', {
      enumerable: true,
      get: function() {
        return obj_observe_1.obj_addObserver;
      }
    });
    Object.defineProperty(exports, 'obj_hasObserver', {
      enumerable: true,
      get: function() {
        return obj_observe_1.obj_hasObserver;
      }
    });
    Object.defineProperty(exports, 'obj_removeObserver', {
      enumerable: true,
      get: function() {
        return obj_observe_1.obj_removeObserver;
      }
    });
    Object.defineProperty(exports, 'obj_addMutatorObserver', {
      enumerable: true,
      get: function() {
        return obj_observe_1.obj_addMutatorObserver;
      }
    });
    Object.defineProperty(exports, 'obj_removeMutatorObserver', {
      enumerable: true,
      get: function() {
        return obj_observe_1.obj_removeMutatorObserver;
      }
    });
    Object.defineProperty(exports, 'obj_lockObservers', {
      enumerable: true,
      get: function() {
        return obj_observe_1.obj_lockObservers;
      }
    });
    Object.defineProperty(exports, 'obj_unlockObservers', {
      enumerable: true,
      get: function() {
        return obj_observe_1.obj_unlockObservers;
      }
    });
    var expression_1 = _ref_mask_projects_observer_src_expression;
    Object.defineProperty(exports, 'expression_bind', {
      enumerable: true,
      get: function() {
        return expression_1.expression_bind;
      }
    });
    Object.defineProperty(exports, 'expression_unbind', {
      enumerable: true,
      get: function() {
        return expression_1.expression_unbind;
      }
    });
    Object.defineProperty(exports, 'expression_callFn', {
      enumerable: true,
      get: function() {
        return expression_1.expression_callFn;
      }
    });
    Object.defineProperty(exports, 'expression_createBinder', {
      enumerable: true,
      get: function() {
        return expression_1.expression_createBinder;
      }
    });
    Object.defineProperty(exports, 'expression_createListener', {
      enumerable: true,
      get: function() {
        return expression_1.expression_createListener;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_exports, module.exports);
    } else {
      _ref_mask_projects_observer_src_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_custom_util;
  (function() {
    var exports = null != _ref_mask_src_custom_util ? _ref_mask_src_custom_util : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.customUtil_createRegistrar = exports.customUtil_get = exports.customUtil_register_inner = exports.customUtil_register = exports.customUtil_$utils = void 0;
    var is_1 = _ref_utils_src_is;
    var fn_1 = _ref_utils_src_fn;
    var repositories_1 = _ref_mask_src_custom_repositories;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    /**
 * Utils Repository
 * @param {string} name
 * @param {(IUtilHandler|UtilHandler)} handler
 * @memberOf mask
 * @name _
 * @category Mask Util
 */
    exports.customUtil_$utils = {};
    /**
 * Register Util Handler. Template Example: `'~[myUtil: value]'`
 * @param {string} name
 * @param {(mask._.IUtilHandler|mask._.FUtilHandler)} handler
 * @memberOf mask
 * @method getUtil
 * @category Mask Util
 */
    function customUtil_register(name, mix) {
      (0, exports.customUtil_register_inner)(name, mix);
    }
    exports.customUtil_register = customUtil_register;
    var customUtil_register_inner = function(name, mix) {
      if ((0, is_1.is_Function)(mix)) {
        repositories_1.custom_Utils[name] = mix;
        return;
      }
      repositories_1.custom_Utils[name] = createUtil(mix);
      if ('parsed' === mix['arguments']) {
        exports.customUtil_$utils[name] = mix.process;
      }
    };
    exports.customUtil_register_inner = customUtil_register_inner;
    /**
 * Get the Util Handler
 * @param {string} name
 * @memberOf mask
 * @method registerUtil
 * @category Mask Util
 */
    function customUtil_get(name) {
      return null != name ? repositories_1.custom_Utils[name] : repositories_1.custom_Utils;
    }
    exports.customUtil_get = customUtil_get;
    //** MaskNode creates its own wrapper */
    function customUtil_createRegistrar(wrapper) {
      exports.customUtil_register_inner = wrapper(exports.customUtil_register_inner);
    }
    exports.customUtil_createRegistrar = customUtil_createRegistrar;
    function createUtil(obj) {
      if ('parsed' === obj['arguments']) {
        return processParsedDelegate(obj.process);
      }
      var fn = (0, fn_1.fn_proxy)(obj.process || processRawFn, obj);
      // <static> save reference to the initial util object.
      // Mask.Bootstrap needs the original util
      // @workaround
      fn.util = obj;
      return fn;
    }
    function processRawFn(expr, model, ctx, el, ctr, attrName, type, node) {
      if ('node' === type) {
        this.nodeRenderStart(expr, model, ctx, el, ctr, type, node);
        return this.node(expr, model, ctx, el, ctr, type, node);
      }
      // `attr`, `compo-attr`
      this.attrRenderStart(expr, model, ctx, el, ctr, attrName, type, node);
      return this.attr(expr, model, ctx, el, ctr, attrName, type, node);
    }
    function processParsedDelegate(fn) {
      return function(expr, model, ctx, el, ctr, type, node) {
        expr = (0, exports_1.expression_evalStatements)(expr, model, ctx, ctr, node);
        return fn.apply(null, expr);
      };
    }
    /**
 * Is called when the builder matches the interpolation.
 * Define `process` function OR group of `node*`,`attr*` functions.
 * The seperation `*RenderStart/*` is needed for Nodejs rendering - the first part is called on nodejs side,
 * the other one is called on the client.
 * @typedef IUtilHandler
 * @type {object}
 * @property {bool} [arguments=false] - should parse interpolation string to arguments, otherwise raw string is passed
 * @property {UtilHandler} [process]
 * @property {function} [nodeRenderStart] - `expr, model, ctx, element, controller, attrName`
 * @property {function} [node] - `expr, model, ctx, element, controller`
 * @property {function} [attr] - `expr, model, ctx, element, controller, attrName`
 * @property {function} [attrRenderStart] - `expr, model, ctx, element, controller, attrName`
 * @abstract
 * @category Mask Util
 */
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_custom_util === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_custom_util) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_custom_util, module.exports);
    } else {
      _ref_mask_src_custom_util = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_mock_util_handler;
  (function() {
    var exports = null != _src_mock_util_handler ? _src_mock_util_handler : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_util;
    var exports_1 = _src_html_dom_exports;
    var is_1 = _ref_utils_src_is;
    var reporters_1 = _ref_mask_src_util_reporters;
    var mock_UtilHandler = {
      create: function(name, mix, mode) {
        if ('server' === mode) {
          return mix;
          // partial | client
        }
        return function(val, model, ctx, el, ctr, attrName, type) {
          attrName = new exports_1.HtmlDom.UtilNode(type, name, val, attrName /*, ++ctx._id */);
          if ('attr' === type) {
            el.parentNode.insertBefore(attrName, el);
          }
          if ('partial' === mode) {
            var fn = util_FNS[type];
            if (false === (0, is_1.is_Function)(mix[fn])) {
              (0, reporters_1.log_error)('Utils partial function is not defined', fn);
              return '';
            }
            fn = mix[fn](val, model, ctx, el, ctr);
            if ('node' === type) {
              attrName.appendChild(mix.element);
              return attrName;
            }
            //> attr
            return attrName.meta.current = fn;
          }
          /* client-only */
          if ('node' === type) {
            return attrName;
            //> attr
          }
          return '';
        };
      }
    };
    var util_FNS = {
      node: 'nodeRenderStart',
      attr: 'attrRenderStart'
    };
    (0, exports.customUtil_createRegistrar)(function(originalFn) {
      return function(name, mix, mode) {
        if (null == mode && (0, is_1.is_Object)(mix)) {
          mode = mix.mode;
        }
        originalFn(name, null == mode ? mix : mock_UtilHandler.create(name, mix, mode));
      };
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_mock_util_handler === module.exports) {
      // do nothing if
    } else if (__isObj(_src_mock_util_handler) && __isObj(module.exports)) {
      Object.assign(_src_mock_util_handler, module.exports);
    } else {
      _src_mock_util_handler = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_custom_statement;
  (function() {
    var exports = null != _ref_mask_src_custom_statement ? _ref_mask_src_custom_statement : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.customStatement_get = exports.customStatement_register = void 0;
    var is_1 = _ref_utils_src_is;
    var repositories_1 = _ref_mask_src_custom_repositories;
    /**
 * Register a statement handler
 * @param {string} name - Tag name to handle
 * @param StatementHandler} handler
 * @memberOf mask
 * @method registerStatement
 */
    function customStatement_register(name, handler) {
      //@TODO should it be not allowed to override system statements, if, switch?
      repositories_1.custom_Statements[name] = (0, is_1.is_Function)(handler) ? {
        render: handler
      } : handler;
    }
    exports.customStatement_register = customStatement_register;
    /**
 * Get statement handler
 * @param {string} name
 * @returns {StatementHandler}
 * @memberOf mask
 * @method getStatement
 */
    function customStatement_get(name) {
      return null != name ? repositories_1.custom_Statements[name] : repositories_1.custom_Statements;
    }
    exports.customStatement_get = customStatement_get;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_custom_statement === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_custom_statement) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_custom_statement, module.exports);
    } else {
      _ref_mask_src_custom_statement = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_custom_exports;
  (function() {
    var exports = null != _ref_mask_src_custom_exports ? _ref_mask_src_custom_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.customStatement_get = exports.customStatement_register = exports.customTag_Base = exports.customTag_define = exports.customTag_Compo_getHandler = exports.customTag_Resolver = exports.customTag_registerResolver = exports.customTag_registerFromTemplate = exports.customTag_registerScoped = exports.customTag_register = exports.customTag_getAll = exports.customTag_get = exports.customUtil_register = exports.customUtil_$utils = exports.customUtil_get = exports.customAttr_get = exports.customAttr_register = exports.custom_Optimizers = exports.custom_Parsers_Transform = exports.custom_Parsers = exports.custom_Tags_defs = exports.custom_Tags_global = exports.custom_Tags = exports.custom_Attributes = exports.custom_Statements = exports.custom_Utils = exports.custom_optimize = void 0;
    var optimize_1 = _ref_mask_src_custom_optimize;
    Object.defineProperty(exports, 'custom_optimize', {
      enumerable: true,
      get: function() {
        return optimize_1.custom_optimize;
      }
    });
    var repositories_1 = _ref_mask_src_custom_repositories;
    Object.defineProperty(exports, 'custom_Utils', {
      enumerable: true,
      get: function() {
        return repositories_1.custom_Utils;
      }
    });
    Object.defineProperty(exports, 'custom_Statements', {
      enumerable: true,
      get: function() {
        return repositories_1.custom_Statements;
      }
    });
    Object.defineProperty(exports, 'custom_Attributes', {
      enumerable: true,
      get: function() {
        return repositories_1.custom_Attributes;
      }
    });
    Object.defineProperty(exports, 'custom_Tags', {
      enumerable: true,
      get: function() {
        return repositories_1.custom_Tags;
      }
    });
    Object.defineProperty(exports, 'custom_Tags_global', {
      enumerable: true,
      get: function() {
        return repositories_1.custom_Tags_global;
      }
    });
    Object.defineProperty(exports, 'custom_Tags_defs', {
      enumerable: true,
      get: function() {
        return repositories_1.custom_Tags_defs;
      }
    });
    Object.defineProperty(exports, 'custom_Parsers', {
      enumerable: true,
      get: function() {
        return repositories_1.custom_Parsers;
      }
    });
    Object.defineProperty(exports, 'custom_Parsers_Transform', {
      enumerable: true,
      get: function() {
        return repositories_1.custom_Parsers_Transform;
      }
    });
    Object.defineProperty(exports, 'custom_Optimizers', {
      enumerable: true,
      get: function() {
        return repositories_1.custom_Optimizers;
      }
    });
    var attribute_1 = _ref_mask_src_custom_attribute;
    Object.defineProperty(exports, 'customAttr_register', {
      enumerable: true,
      get: function() {
        return attribute_1.customAttr_register;
      }
    });
    Object.defineProperty(exports, 'customAttr_get', {
      enumerable: true,
      get: function() {
        return attribute_1.customAttr_get;
      }
    });
    _src_mock_attr_handler;
    var util_1 = _ref_mask_src_custom_util;
    Object.defineProperty(exports, 'customUtil_get', {
      enumerable: true,
      get: function() {
        return util_1.customUtil_get;
      }
    });
    Object.defineProperty(exports, 'customUtil_$utils', {
      enumerable: true,
      get: function() {
        return util_1.customUtil_$utils;
      }
    });
    Object.defineProperty(exports, 'customUtil_register', {
      enumerable: true,
      get: function() {
        return util_1.customUtil_register;
      }
    });
    _src_mock_util_handler;
    var tag_1 = _ref_mask_src_custom_tag;
    Object.defineProperty(exports, 'customTag_get', {
      enumerable: true,
      get: function() {
        return tag_1.customTag_get;
      }
    });
    Object.defineProperty(exports, 'customTag_getAll', {
      enumerable: true,
      get: function() {
        return tag_1.customTag_getAll;
      }
    });
    Object.defineProperty(exports, 'customTag_register', {
      enumerable: true,
      get: function() {
        return tag_1.customTag_register;
      }
    });
    Object.defineProperty(exports, 'customTag_registerScoped', {
      enumerable: true,
      get: function() {
        return tag_1.customTag_registerScoped;
      }
    });
    Object.defineProperty(exports, 'customTag_registerFromTemplate', {
      enumerable: true,
      get: function() {
        return tag_1.customTag_registerFromTemplate;
      }
    });
    Object.defineProperty(exports, 'customTag_registerResolver', {
      enumerable: true,
      get: function() {
        return tag_1.customTag_registerResolver;
      }
    });
    Object.defineProperty(exports, 'customTag_Resolver', {
      enumerable: true,
      get: function() {
        return tag_1.customTag_Resolver;
      }
    });
    Object.defineProperty(exports, 'customTag_Compo_getHandler', {
      enumerable: true,
      get: function() {
        return tag_1.customTag_Compo_getHandler;
      }
    });
    Object.defineProperty(exports, 'customTag_define', {
      enumerable: true,
      get: function() {
        return tag_1.customTag_define;
      }
    });
    Object.defineProperty(exports, 'customTag_Base', {
      enumerable: true,
      get: function() {
        return tag_1.customTag_Base;
      }
    });
    _src_mock_tag_handler;
    var statement_1 = _ref_mask_src_custom_statement;
    Object.defineProperty(exports, 'customStatement_register', {
      enumerable: true,
      get: function() {
        return statement_1.customStatement_register;
      }
    });
    Object.defineProperty(exports, 'customStatement_get', {
      enumerable: true,
      get: function() {
        return statement_1.customStatement_get;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_custom_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_custom_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_custom_exports, module.exports);
    } else {
      _ref_mask_src_custom_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_signal_utils;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_signal_utils ? _ref_mask_projects_mask_compo_src_signal_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
      if (pack || 2 === arguments.length) {
        for (var ar, i = 0, l = from.length; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) {
              ar = Array.prototype.slice.call(from, 0, i);
            }
            ar[i] = from[i];
          }
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._hasSlot = exports._fire = void 0;
    var is_1 = _ref_utils_src_is;
    // @param sender - event if sent from DOM Event or CONTROLLER instance
    function _fire(ctr, slot, sender, args_, direction) {
      if (null == ctr) {
        return false;
      }
      var found = false;
      var args = args_;
      args_ = null != ctr.slots && ctr.slots[slot];
      if ('string' === typeof args_) {
        args_ = ctr[args_];
      }
      if ('function' === typeof args_) {
        found = true;
        var _a = null === (_a = ctr.slots.__disabled) || void 0 === _a ? void 0 : _a[slot];
        if (true !== _a) {
          _a = null == args ? args_.call(ctr, sender) : args_.apply(ctr, __spreadArray([ sender ], args, true));
          if (false === _a) {
            return true;
          }
          if ((0, is_1.is_ArrayLike)(_a)) {
            args = _a;
          }
        }
      }
      if (-1 === direction && null != ctr.parent) {
        return _fire(ctr.parent, slot, sender, args, direction) || found;
      }
      if (1 === direction && null != ctr.components) {
        var compos = ctr.components, imax = compos.length, i = -1;
        while (++i < imax) {
          found = _fire(compos[i], slot, sender, args, direction) || found;
        }
      }
      return found;
    } // _fire()
    exports._fire = _fire;
    function _hasSlot(ctr, slot, direction, isActive) {
      if (null == ctr) {
        return false;
      }
      var slots = ctr.slots;
      if (null != slots && null != slots[slot]) {
        if ('string' === typeof slots[slot]) {
          slots[slot] = ctr[slots[slot]];
        }
        if ('function' === typeof slots[slot]) {
          if (true === isActive) {
            if (null == slots.__disabled || true !== slots.__disabled[slot]) {
              return true;
            }
          } else {
            return true;
          }
        }
      }
      if (-1 === direction && null != ctr.parent) {
        return _hasSlot(ctr.parent, slot, direction);
      }
      if (1 === direction && null != ctr.components) {
        for (var i = 0, length = ctr.components.length; i < length; i++) {
          if (_hasSlot(ctr.components[i], slot, direction)) {
            return true;
          }
        }
      }
      return false;
    }
    exports._hasSlot = _hasSlot;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_signal_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_signal_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_signal_utils, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_signal_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_scope_vars;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_scope_vars ? _ref_mask_projects_mask_compo_src_scope_vars : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.setDomLib = exports._resolve_External = exports._mask_ensureTmplFn = exports.Class = exports.domLib = void 0;
    var refs_1 = _ref_utils_src_refs;
    var exports_1 = _ref_mask_src_parser_exports;
    function _mask_ensureTmplFn(value) {
      return 'string' !== typeof value ? value : (0, exports_1.parser_ensureTemplateFunction)(value);
    }
    exports._mask_ensureTmplFn = _mask_ensureTmplFn;
    function _resolve_External(key) {
      return refs_1._global[key] || _exports[key] || _atma[key];
    }
    exports._resolve_External = _resolve_External;
    var _atma = refs_1._global.atma || {}, _exports = exports || {};
    function resolve(a, b, c) {
      for (var i = 0; i < arguments.length; i++) {
        var val = _resolve_External(arguments[i]);
        if (null != val) {
          return val;
        }
      }
      return null;
    }
    exports.domLib = resolve('jQuery', 'Zepto', '$');
    exports.Class = resolve('Class');
    function setDomLib(lib) {
      exports.domLib = lib;
    }
    exports.setDomLib = setDomLib;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_scope_vars === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_scope_vars) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_scope_vars, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_scope_vars = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_signal_toggle;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_signal_toggle ? _ref_mask_projects_mask_compo_src_signal_toggle : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._toggle_single = exports._toggle_all = void 0;
    var utils_1 = _ref_mask_projects_mask_compo_src_signal_utils;
    var reporters_1 = _ref_mask_src_util_reporters;
    var scope_vars_1 = _ref_mask_projects_mask_compo_src_scope_vars;
    function _toggle_all(ctr, slot, isActive) {
      var parent = ctr, previous = ctr;
      while (null != (parent = parent.parent)) {
        __toggle_slotState(parent, slot, isActive);
        if (null == parent.$ || 0 === parent.$.length) {
          // we track previous for changing elements :disable state
          continue;
        }
        previous = parent;
      }
      __toggle_slotStateWithChilds(ctr, slot, isActive);
      __toggle_elementsState(previous, slot, isActive);
    }
    exports._toggle_all = _toggle_all;
    function _toggle_single(ctr, slot, isActive) {
      __toggle_slotState(ctr, slot, isActive);
      if (!isActive && ((0, utils_1._hasSlot)(ctr, slot, -1, true) || (0, utils_1._hasSlot)(ctr, slot, 1, true))) {
        // there are some active slots; do not disable elements;
        return;
      }
      __toggle_elementsState(ctr, slot, isActive);
    }
    exports._toggle_single = _toggle_single;
    function __toggle_slotState(ctr, slot, isActive) {
      ctr = ctr.slots;
      if (null == ctr || false === ctr.hasOwnProperty(slot)) {
        return;
      }
      var disabled = ctr.__disabled;
      if (null == disabled) {
        disabled = ctr.__disabled = {};
      }
      disabled[slot] = false === isActive;
    }
    function __toggle_slotStateWithChilds(ctr, slot, isActive) {
      __toggle_slotState(ctr, slot, isActive);
      var compos = ctr.components;
      if (null != compos) {
        var imax = compos.length, i = 0;
        for (;i < imax; i++) {
          __toggle_slotStateWithChilds(compos[i], slot, isActive);
        }
      }
    }
    function __toggle_elementsState(ctr, slot, isActive) {
      if (null == ctr.$) {
        (0, reporters_1.log_warn)('Controller has no elements to toggle state');
        return;
      }
      (0, scope_vars_1.domLib)().add(ctr.$.filter('[data-signals]')).add(ctr.$.find('[data-signals]')).each(function(index, node) {
        var signals = node.getAttribute('data-signals');
        if (null != signals && -1 !== signals.indexOf(slot)) {
          node[true === isActive ? 'removeAttribute' : 'setAttribute']('disabled', 'disabled');
        }
      });
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_signal_toggle === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_signal_toggle) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_signal_toggle, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_signal_toggle = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_signal_compound;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_signal_compound ? _ref_mask_projects_mask_compo_src_signal_compound : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._compound = void 0;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    var compo_1 = _ref_mask_projects_mask_compo_src_util_compo;
    function _compound(ctr, slotExpression, cb) {
      var slots = ctr.slots;
      if (null == slots) {
        slots = ctr.slots = {};
      }
      var handler = new SlotExpression(slotExpression, cb);
      for (var i = 0; i < handler.slots.length; i++) {
        var name = handler.slots[i].name;
        (0, compo_1.compo_attach)(ctr, 'slots.'.concat(name), handler.signalDelegate(name));
      }
      return handler;
    }
    exports._compound = _compound;
    var SlotExpression = /** @class */ function() {
      function SlotExpression(expression, cb) {
        var str = expression.replace(/\s+/g, '');
        var refs = (0, exports_1.expression_varRefs)(str);
        this.cb = cb;
        this.slots = [];
        this.flags = {};
        this.expression = str;
        for (var i = 0; i < refs.length; i++) {
          var name = refs[i];
          this.flags[name] = 0;
          this.slots[i] = {
            name: name,
            action: str[str.indexOf(name) - 1],
            index: i
          };
        }
      }
      SlotExpression.prototype.signalDelegate = function(name) {
        var _this = this;
        return function() {
          _this.call(name);
        };
      };
      SlotExpression.prototype.call = function(name) {
        var slot = this.findSlot(name);
        if ('^' !== slot.action) {
          this.flags[name] = 1;
          name = (0, exports_1.expression_eval)(this.expression, this.flags);
          if (name) {
            this.cb();
          }
          return;
        }
        var prev = slot;
        do {
          prev = this.slots[prev.index - 1];
        } while (null != prev && '^' === prev.action);
        if (prev) {
          this.flags[prev.name] = 0;
        }
      };
      SlotExpression.prototype.findSlot = function(name) {
        for (var i = 0; i < this.slots.length; i++) {
          var slot = this.slots[i];
          if (slot.name === name) {
            return slot;
          }
        }
        return null;
      };
      return SlotExpression;
    }();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_signal_compound === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_signal_compound) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_signal_compound, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_signal_compound = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_selector;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_selector ? _ref_mask_projects_mask_compo_src_util_selector : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.selector_match = exports.selector_parse = void 0;
    var is_1 = _ref_utils_src_is;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_src_dom_exports;
    function selector_parse(selector, type, direction) {
      if (null == selector) {
        (0, reporters_1.log_error)('<compo>selector is undefined', type);
      }
      if ('object' === typeof selector) {
        return selector;
      }
      var key, prop, nextKey;
      if (null == key) {
        switch (selector[0]) {
         case '#':
          key = 'id';
          selector = selector.substring(1);
          prop = 'attr';
          break;

         case '.':
          key = 'class';
          selector = sel_hasClassDelegate(selector.substring(1));
          prop = 'attr';
          break;

         case '[':
          var matches = /(\w+)\s*=([^\]]+)/.exec(selector);
          if (null == matches) {
            throw Error('Invalid attributes selector: ' + selector);
          }
          key = matches[1];
          selector = matches[2].trim();
          prop = 'attr';
          break;

         default:
          key = type === exports_1.Dom.SET ? 'tagName' : 'compoName';
          break;
        }
      }
      if ('up' === direction) {
        nextKey = 'parent';
      } else {
        nextKey = type === exports_1.Dom.SET ? 'nodes' : 'components';
      }
      return {
        key: key,
        prop: prop,
        selector: selector,
        nextKey: nextKey
      };
    }
    exports.selector_parse = selector_parse;
    function selector_match(node, selector, type) {
      if (null == node) {
        return false;
      }
      if ((0, is_1.is_String)(selector)) {
        if (null == type) {
          type = exports_1.Dom[node.compoName ? 'CONTROLLER' : 'SET'];
        }
        selector = selector_parse(selector, type);
      }
      type = selector.prop ? node[selector.prop] : node;
      if (null == type) {
        return false;
      }
      if ((0, is_1.is_Function)(selector.selector)) {
        return selector.selector(type[selector.key]);
        // regexp
      }
      if ('string' !== typeof selector.selector && null != selector.selector.test) {
        return selector.selector.test(type[selector.key]);
        // string | int
        /* jshint eqeqeq: false */
      }
      return type[selector.key] == selector.selector;
      /* jshint eqeqeq: true */
    }
    exports.selector_match = selector_match;
    // PRIVATE
    function sel_hasClassDelegate(matchClass) {
      return function(className) {
        return sel_hasClass(className, matchClass);
      };
    }
    // [perf] http://jsperf.com/match-classname-indexof-vs-regexp/2
    function sel_hasClass(className, matchClass, index) {
      if ('string' !== typeof className) {
        return false;
      }
      if (null == index) {
        index = 0;
      }
      index = className.indexOf(matchClass, index);
      if (-1 === index) {
        return false;
      }
      if (index > 0 && className.charCodeAt(index - 1) > 32) {
        return sel_hasClass(className, matchClass, index + 1);
      }
      var class_Length = className.length, match_Length = matchClass.length;
      if (index < class_Length - match_Length && className.charCodeAt(index + match_Length) > 32) {
        return sel_hasClass(className, matchClass, index + 1);
      }
      return true;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_selector === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_selector) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_selector, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_selector = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_traverse;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_traverse ? _ref_mask_projects_mask_compo_src_util_traverse : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.find_findAll = exports.find_findChild = exports.find_findChildren = exports.find_findSingle = void 0;
    var is_1 = _ref_utils_src_is;
    var selector_1 = _ref_mask_projects_mask_compo_src_util_selector;
    function find_findSingle(node, matcher) {
      if (null == node) {
        return null;
      }
      if ((0, is_1.is_Array)(node)) {
        var arr = node, imax = arr.length, i = -1;
        while (++i < imax) {
          var x = find_findSingle(node[i], matcher);
          if (null != x) {
            return x;
          }
        }
        return null;
      }
      if ((0, selector_1.selector_match)(node, matcher)) {
        return node;
      }
      node = node[matcher.nextKey];
      return null == node ? null : find_findSingle(node, matcher);
    }
    exports.find_findSingle = find_findSingle;
    function find_findChildren(node, matcher) {
      if (null == node) {
        return null;
      }
      var arr = node[matcher.nextKey];
      if (null == arr) {
        return null;
      }
      if ((0, is_1.is_Array)(arr)) {
        var imax = arr.length, i = -1, out = [];
        while (++i < imax) {
          if ((0, selector_1.selector_match)(arr[i], matcher)) {
            out.push(arr[i]);
          }
        }
        return out;
      }
    }
    exports.find_findChildren = find_findChildren;
    function find_findChild(node, matcher) {
      if (null == node) {
        return null;
      }
      var arr = node[matcher.nextKey];
      if (null == arr) {
        return null;
      }
      if ((0, is_1.is_Array)(arr)) {
        var imax = arr.length, i = -1;
        while (++i < imax) {
          if ((0, selector_1.selector_match)(arr[i], matcher)) {
            return arr[i];
          }
        }
        return null;
      }
    }
    exports.find_findChild = find_findChild;
    function find_findAll(node, matcher, out) {
      if (null == out) {
        out = [];
      }
      if ((0, is_1.is_Array)(node)) {
        var imax = node.length, i = 0;
        for (;i < imax; i++) {
          find_findAll(node[i], matcher, out);
        }
        return out;
      }
      if ((0, selector_1.selector_match)(node, matcher)) {
        out.push(node);
      }
      node = node[matcher.nextKey];
      return null == node ? out : find_findAll(node, matcher, out);
    }
    exports.find_findAll = find_findAll;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_traverse === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_traverse) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_traverse, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_traverse = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_anchor;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_anchor ? _ref_mask_projects_mask_compo_src_compo_anchor : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Anchor = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var traverse_1 = _ref_mask_projects_mask_compo_src_util_traverse;
    /**
 *    Get component that owns an element
 **/
    exports.Anchor = {
      create: function(compo) {
        var id = compo.ID;
        if (null == id) {
          (0, reporters_1.log_warn)('Component should have an ID');
          return;
        }
        CACHE[id] = compo;
      },
      resolveCompo: function(el, silent) {
        if (null == el) {
          return null;
        }
        var ownerId;
        do {
          var id = el.getAttribute('x-compo-id');
          if (null != id) {
            if (null == ownerId) {
              ownerId = id;
            }
            id = CACHE[id];
            if (null != id) {
              id = (0, traverse_1.find_findSingle)(id, {
                key: 'ID',
                selector: ownerId,
                nextKey: 'components'
              });
              if (null != id) {
                return id;
              }
            }
          }
          el = el.parentNode;
        } while (null != el && 1 === el.nodeType);
        // if DEBUG
        ownerId && true !== silent && (0, reporters_1.log_warn)('No controller for ID', ownerId);
        // endif
        return null;
      },
      removeCompo: function(compo) {
        compo = compo.ID;
        if (null != compo) {
          CACHE[compo] = void 0;
        }
      },
      getByID: function(id) {
        return CACHE[id];
      }
    };
    var CACHE = {};
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_anchor === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_anchor) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_anchor, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_anchor = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_keyboard_const;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_keyboard_const ? _ref_mask_projects_mask_compo_src_keyboard_const : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.MODS = exports.SHIFT_NUMS = exports.CODES = void 0;
    exports.CODES = {
      backspace: 8,
      tab: 9,
      return: 13,
      enter: 13,
      shift: 16,
      ctrl: 17,
      control: 17,
      alt: 18,
      option: 18,
      fn: 255,
      pause: 19,
      capslock: 20,
      esc: 27,
      escape: 27,
      space: 32,
      pageup: 33,
      pagedown: 34,
      end: 35,
      home: 36,
      start: 36,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      insert: 45,
      ins: 45,
      del: 46,
      numlock: 144,
      scroll: 145,
      f1: 112,
      f2: 113,
      f3: 114,
      f4: 115,
      f5: 116,
      f6: 117,
      f7: 118,
      f8: 119,
      f9: 120,
      f10: 121,
      f11: 122,
      f12: 123,
      ';': 186,
      '=': 187,
      '*': 106,
      '+': 107,
      plus: 107,
      '-': 109,
      minus: 109,
      '.': 190,
      '/': 191,
      ',': 188,
      '`': 192,
      '[': 219,
      '\\': 220,
      ']': 221,
      '\'': 222
    };
    exports.SHIFT_NUMS = {
      '`': '~',
      1: '!',
      2: '@',
      3: '#',
      4: '$',
      5: '%',
      6: '^',
      7: '&',
      8: '*',
      9: '(',
      0: ')',
      '-': '_',
      '=': '+',
      ';': ': ',
      '\'': '"',
      ',': '<',
      '.': '>',
      '/': '?',
      '\\': '|'
    };
    exports.MODS = {
      16: 'shiftKey',
      17: 'ctrlKey',
      18: 'altKey'
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_keyboard_const === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_keyboard_const) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_keyboard_const, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_keyboard_const = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_keyboard_KeySequance;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_keyboard_KeySequance ? _ref_mask_projects_mask_compo_src_keyboard_KeySequance : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.KeySequance = exports.Key_MATCH_NEXT = exports.Key_MATCH_WAIT = exports.Key_MATCH_FAIL = exports.Key_MATCH_OK = void 0;
    var class_1 = _ref_utils_src_class;
    var IComb_1 = _ref_mask_projects_mask_compo_src_keyboard_IComb;
    exports.Key_MATCH_OK = 1;
    exports.Key_MATCH_FAIL = 2;
    exports.Key_MATCH_WAIT = 3;
    exports.Key_MATCH_NEXT = 4;
    exports.KeySequance = (0, class_1.class_create)(IComb_1.IComb, {
      index: 0,
      tryCall: function(event, codes, lastCode) {
        codes = this.check_(codes, lastCode);
        if (codes === exports.Key_MATCH_OK) {
          this.index = 0;
          this.fn.call(this.ctx, event);
        }
        return codes;
      },
      fail_: function() {
        this.index = 0;
        return exports.Key_MATCH_FAIL;
      },
      check_: function(codes, lastCode) {
        var current = this.set[this.index], keys = current.keys, current = current.last;
        var l = codes.length;
        if (l < keys.length) {
          return exports.Key_MATCH_WAIT;
        }
        if (l > keys.length) {
          return this.fail_();
        }
        if (current !== lastCode) {
          return this.fail_();
        }
        while (--l > -1) {
          if (keys[l] !== codes[l]) {
            return this.fail_();
          }
        }
        if (this.index < this.set.length - 1) {
          this.index++;
          return exports.Key_MATCH_NEXT;
        }
        this.index = 0;
        return exports.Key_MATCH_OK;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_keyboard_KeySequance === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_keyboard_KeySequance) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_keyboard_KeySequance, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_keyboard_KeySequance = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_keyboard_Key;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_keyboard_Key ? _ref_mask_projects_mask_compo_src_keyboard_Key : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Key = void 0;
    var class_1 = _ref_utils_src_class;
    var IComb_1 = _ref_mask_projects_mask_compo_src_keyboard_IComb;
    var const_1 = _ref_mask_projects_mask_compo_src_keyboard_const;
    var KeySequance_1 = _ref_mask_projects_mask_compo_src_keyboard_KeySequance;
    exports.Key = (0, class_1.class_create)(IComb_1.IComb, {
      constructor: function(set, key, mods) {
        this.key = key;
        this.mods = mods;
      },
      tryCall: function(event, codes, lastCode) {
        if (event.type !== this.type || lastCode !== this.key) {
          return KeySequance_1.Key_MATCH_FAIL;
        }
        for (var key in this.mods) {
          if (event[key] !== this.mods[key]) {
            return KeySequance_1.Key_MATCH_FAIL;
          }
        }
        this.fn.call(this.ctx, event);
        return KeySequance_1.Key_MATCH_OK;
      }
    });
    exports.Key.create = function(set) {
      if (1 !== set.length) {
        return null;
      }
      var keys = set[0].keys, i = keys.length, mods = {
        shiftKey: false,
        ctrlKey: false,
        altKey: false
      };
      var key;
      while (--i > -1) {
        if (false === const_1.MODS.hasOwnProperty(keys[i])) {
          if (null != key) {
            return null;
          }
          key = keys[i];
          continue;
        }
        mods[const_1.MODS[keys[i]]] = true;
        true;
      }
      return new exports.Key(set, key, mods);
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_keyboard_Key === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_keyboard_Key) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_keyboard_Key, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_keyboard_Key = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_keyboard_IComb;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_keyboard_IComb ? _ref_mask_projects_mask_compo_src_keyboard_IComb : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.IComb = void 0;
    var Key_1 = _ref_mask_projects_mask_compo_src_keyboard_Key;
    var KeySequance_1 = _ref_mask_projects_mask_compo_src_keyboard_KeySequance;
    var const_1 = _ref_mask_projects_mask_compo_src_keyboard_const;
    function IComb(set) {
      this.set = set;
    }
    exports.IComb = IComb;
    IComb.parse = function(str) {
      var parts = str.split(','), combs = [], imax = parts.length, i = 0;
      for (;i < imax; i++) {
        combs[i] = parseSingle(parts[i]);
      }
      return combs;
    };
    IComb.create = function(def, type, fn, ctx) {
      def = IComb.parse(def);
      var comb = Key_1.Key.create(def);
      if (null == comb) {
        comb = new KeySequance_1.KeySequance(def);
      }
      comb.init(type, fn, ctx);
      return comb;
    };
    IComb.prototype = {
      type: null,
      ctx: null,
      set: null,
      fn: null,
      init: function(type, fn, ctx) {
        this.type = type;
        this.ctx = ctx;
        this.fn = fn;
      },
      tryCall: null
    };
    function parseSingle(str) {
      var x, code, keys = str.split('+'), imax = keys.length, i = 0, out = [];
      for (;i < imax; i++) {
        x = keys[i].trim();
        code = const_1.CODES[x];
        if (void 0 === code) {
          if (1 !== x.length) {
            throw Error('Unexpected sequence. Neither a predefined key, nor a char: ' + x);
          }
          code = x.toUpperCase().charCodeAt(0);
        }
        out[i] = code;
      }
      return {
        last: out[imax - 1],
        keys: out.sort()
      };
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_keyboard_IComb === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_keyboard_IComb) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_keyboard_IComb, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_keyboard_IComb = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_keyboard_utils;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_keyboard_utils ? _ref_mask_projects_mask_compo_src_keyboard_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.event_getCode = exports.event_unbind = exports.event_bind = void 0;
    function event_bind(el, type, mix) {
      el.addEventListener(type, mix, false);
    }
    exports.event_bind = event_bind;
    function event_unbind(el, type, mix) {
      el.removeEventListener(type, mix, false);
    }
    exports.event_unbind = event_unbind;
    function event_getCode(event) {
      event = event.keyCode || event.which;
      if (event >= 96 && event <= 105) {
        // numpad digits
        return event - 48;
      }
      return event;
    }
    exports.event_getCode = event_getCode;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_keyboard_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_keyboard_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_keyboard_utils, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_keyboard_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_keyboard_filters;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_keyboard_filters ? _ref_mask_projects_mask_compo_src_keyboard_filters : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.filter_isKeyboardInput = exports.filter_skippedElement = exports.filter_skippedComponent = exports.filter_skippedInput = void 0;
    function filter_skippedInput(event, code) {
      if (event.ctrlKey || event.altKey) {
        return false;
      }
      return filter_isKeyboardInput(event.target);
    }
    exports.filter_skippedInput = filter_skippedInput;
    function filter_skippedComponent(compo) {
      if (null == compo.$ || 0 === compo.$.length) {
        return false;
      }
      return filter_skippedElement(compo.$.get(0));
    }
    exports.filter_skippedComponent = filter_skippedComponent;
    function filter_skippedElement(el) {
      if (false === document.contains(el)) {
        return false;
      }
      if ('none' === el.style.display) {
        return false;
      }
      el = el.disabled;
      if (true === el) {
        return false;
      }
      return true;
    }
    exports.filter_skippedElement = filter_skippedElement;
    function filter_isKeyboardInput(el) {
      var tag = el.tagName;
      if ('TEXTAREA' === tag) {
        return true;
      }
      if ('INPUT' !== tag) {
        return false;
      }
      return -1 === TYPELESS_INPUT.indexOf(' ' + el.type + ' ');
    }
    exports.filter_isKeyboardInput = filter_isKeyboardInput;
    var TYPELESS_INPUT = ' button submit checkbox file hidden image radio range reset ';
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_keyboard_filters === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_keyboard_filters) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_keyboard_filters, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_keyboard_filters = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_keyboard_CombHandler;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_keyboard_CombHandler ? _ref_mask_projects_mask_compo_src_keyboard_CombHandler : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.CombHandler = void 0;
    var utils_1 = _ref_mask_projects_mask_compo_src_keyboard_utils;
    var filters_1 = _ref_mask_projects_mask_compo_src_keyboard_filters;
    var KeySequance_1 = _ref_mask_projects_mask_compo_src_keyboard_KeySequance;
    function CombHandler() {
      this.keys = [];
      this.combs = [];
    }
    exports.CombHandler = CombHandler;
    CombHandler.prototype = {
      keys: null,
      combs: null,
      attach: function(comb) {
        this.combs.push(comb);
      },
      off: function(fn) {
        var imax = this.combs.length, i = 0;
        for (;i < imax; i++) {
          if (this.combs[i].fn === fn) {
            this.combs.splice(i, 1);
            return true;
          }
        }
        return false;
      },
      handle: function(type, code, event) {
        if (0 === this.combs.length) {
          return;
        }
        if (this.filter_(event, code)) {
          if ('keyup' === type && this.keys.length > 0) {
            this.remove_(code);
          }
          return;
        }
        if ('keydown' === type) {
          if (this.add_(code)) {
            this.emit_(type, event, code);
          }
          return;
        }
        if ('keyup' === type) {
          this.emit_(type, event, code);
          this.remove_(code);
        }
      },
      handleEvent: function(event) {
        var code = (0, utils_1.event_getCode)(event), type = event.type;
        this.handle(type, code, event);
      },
      reset: function() {
        this.keys.length = 0;
      },
      add_: function(code) {
        var x, imax = this.keys.length, i = 0;
        for (;i < imax; i++) {
          x = this.keys[i];
          if (x === code) {
            return false;
          }
          if (x > code) {
            this.keys.splice(i, 0, code);
            return true;
          }
        }
        this.keys.push(code);
        return true;
      },
      remove_: function(code) {
        var i = this.keys.length;
        while (--i > -1) {
          if (this.keys[i] === code) {
            this.keys.splice(i, 1);
            return;
          }
        }
      },
      emit_: function(type, event, lastCode) {
        var x, combs = this.combs, imax = combs.length, i = 0;
        for (;i < imax; i++) {
          x = combs[i];
          if (x.type !== type) {
            continue;
          }
          x = x.tryCall(event, this.keys, lastCode);
          if (KeySequance_1.Key_MATCH_OK === x || x === KeySequance_1.Key_MATCH_NEXT) {
            event.preventDefault();
          }
          if (x === KeySequance_1.Key_MATCH_WAIT || x === KeySequance_1.Key_MATCH_NEXT) {
            true;
          }
        }
      },
      filter_: function(event, code) {
        return (0, filters_1.filter_skippedInput)(event, code);
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_keyboard_CombHandler === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_keyboard_CombHandler) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_keyboard_CombHandler, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_keyboard_CombHandler = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_keyboard_Hotkey;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_keyboard_Hotkey ? _ref_mask_projects_mask_compo_src_keyboard_Hotkey : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Hotkey = void 0;
    var IComb_1 = _ref_mask_projects_mask_compo_src_keyboard_IComb;
    var utils_1 = _ref_mask_projects_mask_compo_src_keyboard_utils;
    var CombHandler_1 = _ref_mask_projects_mask_compo_src_keyboard_CombHandler;
    exports.Hotkey = {
      on: function(combDef, fn, compo) {
        if (null == handler) {
          init();
        }
        combDef = IComb_1.IComb.create(combDef, 'keydown', fn, compo);
        handler.attach(combDef);
      },
      off: function(fn) {
        handler.off(fn);
      },
      handleEvent: function(event) {
        handler.handle(event.type, (0, utils_1.event_getCode)(event), event);
      },
      reset: function() {
        handler.reset();
      }
    };
    var handler;
    function init() {
      handler = new CombHandler_1.CombHandler();
      (0, utils_1.event_bind)(window, 'keydown', exports.Hotkey);
      (0, utils_1.event_bind)(window, 'keyup', exports.Hotkey);
      (0, utils_1.event_bind)(window, 'focus', exports.Hotkey.reset);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_keyboard_Hotkey === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_keyboard_Hotkey) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_keyboard_Hotkey, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_keyboard_Hotkey = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_keyboard_Handler;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_keyboard_Handler ? _ref_mask_projects_mask_compo_src_keyboard_Handler : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.KeyboardHandler = void 0;
    var IComb_1 = _ref_mask_projects_mask_compo_src_keyboard_IComb;
    var utils_1 = _ref_mask_projects_mask_compo_src_keyboard_utils;
    var CombHandler_1 = _ref_mask_projects_mask_compo_src_keyboard_CombHandler;
    var compo_1 = _ref_mask_projects_mask_compo_src_util_compo;
    var filters_1 = _ref_mask_projects_mask_compo_src_keyboard_filters;
    var reporters_1 = _ref_mask_src_util_reporters;
    var Key_1 = _ref_mask_projects_mask_compo_src_keyboard_Key;
    var KeySequance_1 = _ref_mask_projects_mask_compo_src_keyboard_KeySequance;
    var Hotkey_1 = _ref_mask_projects_mask_compo_src_keyboard_Hotkey;
    exports.KeyboardHandler = {
      supports: function(event, param) {
        if (null == param) {
          return false;
        }
        switch (event) {
         case 'press':
         case 'keypress':
         case 'keydown':
         case 'keyup':
         case 'hotkey':
         case 'shortcut':
          return true;
        }
        return false;
      },
      on: function(el, type, def, fn) {
        if ('keypress' === type || 'press' === type) {
          type = 'keydown';
        }
        var comb = IComb_1.IComb.create(def, type, fn);
        if (comb instanceof Key_1.Key) {
          (0, utils_1.event_bind)(el, type, function(event) {
            var code = (0, utils_1.event_getCode)(event);
            code = comb.tryCall(event, null, code);
            if (code === KeySequance_1.Key_MATCH_OK) {
              event.preventDefault();
            }
          });
          return;
        }
        def = new CombHandler_1.CombHandler();
        (0, utils_1.event_bind)(el, 'keydown', def);
        (0, utils_1.event_bind)(el, 'keyup', def);
        def.attach(comb);
      },
      hotkeys: function(compo, hotkeys) {
        var fn, comb;
        for (comb in hotkeys) {
          fn = hotkeys[comb];
          Hotkey_1.Hotkey.on(comb, fn, compo);
        }
        (0, compo_1.compo_attachDisposer)(compo, function() {
          for (var comb in hotkeys) {
            Hotkey_1.Hotkey.off(hotkeys[comb]);
          }
        });
      },
      attach: function(el, type, comb, fn, ctr) {
        if ((0, filters_1.filter_isKeyboardInput)(el)) {
          this.on(el, type, comb, fn);
          return;
        }
        var x = ctr;
        while (x && null == x.slots) {
          x = x.parent;
        }
        if (null == x) {
          (0, reporters_1.log_error)('Slot-component not found:', comb);
          return;
        }
        el = x.hotkeys;
        if (null == el) {
          el = x.hotkeys = {};
        }
        el[comb] = fn;
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_keyboard_Handler === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_keyboard_Handler) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_keyboard_Handler, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_keyboard_Handler = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_event;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_event ? _ref_mask_projects_mask_compo_src_util_event : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.event_trigger = exports.event_unbind = exports.event_bind = exports.isTouchable = void 0;
    var refs_1 = _ref_utils_src_refs;
    var fn_1 = _ref_utils_src_fn;
    exports.isTouchable = 'ontouchstart' in refs_1._global;
    function event_bind(el, type, handler, opts) {
      el.addEventListener(type, handler, resolveOpts(opts));
    }
    exports.event_bind = event_bind;
    function event_unbind(el, type, handler, opts) {
      el.removeEventListener(type, handler, resolveOpts(opts));
    }
    exports.event_unbind = event_unbind;
    function event_trigger(el, type) {
      type = new CustomEvent(type, {
        cancelable: true,
        bubbles: true
      });
      el.dispatchEvent(type);
    }
    exports.event_trigger = event_trigger;
    var supportsCaptureOption = false;
    if (null != refs_1._global.document) {
      document.createElement('div').addEventListener('click', fn_1.fn_doNothing, {
        get capture() {
          supportsCaptureOption = true;
          return false;
        }
      });
    }
    var opts_DEFAULT = supportsCaptureOption ? {
      passive: true,
      capture: false
    } : false;
    var resolveOpts = function(opts) {
      if (null == opts) {
        return opts_DEFAULT;
      }
      if ('boolean' === typeof opts) {
        if (false === opts) {
          return opts_DEFAULT;
        }
        return supportsCaptureOption ? {
          passive: true,
          capture: true
        } : true;
      }
      if (false === supportsCaptureOption) {
        return Boolean(opts.capture);
      }
      return opts;
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_event === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_event) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_event, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_event = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_touch_Touch;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_touch_Touch ? _ref_mask_projects_mask_compo_src_touch_Touch : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Touch = void 0;
    var event_1 = _ref_mask_projects_mask_compo_src_util_event;
    function Touch(el, type, fn, opts) {
      this.el = el;
      this.fn = fn;
      this.dismiss = 0;
      (0, event_1.event_bind)(el, type, this, opts);
      (0, event_1.event_bind)(el, MOUSE_MAP[type], this, opts);
    }
    exports.Touch = Touch;
    var MOUSE_MAP = {
      mousemove: 'touchmove',
      mousedown: 'touchstart',
      mouseup: 'touchend'
    };
    // var TOUCH_MAP = {
    //     'touchmove': 'mousemove',
    //     'touchstart': 'mousedown',
    //     'touchup': 'mouseup'
    // };
    Touch.prototype = {
      handleEvent: function(event) {
        switch (event.type) {
         case 'touchstart':
         case 'touchmove':
         case 'touchend':
          this.dismiss++;
          // event = prepairTouchEvent(event);
          this.fn(event);
          break;

         case 'mousedown':
         case 'mousemove':
         case 'mouseup':
          if (--this.dismiss < 0) {
            this.dismiss = 0;
            this.fn(event);
          }
          break;
        }
      }
    };
    // function prepairTouchEvent(event){
    //     var touch = null,
    //         touches = event.changedTouches;
    //     if (touches && touches.length) {
    //         touch = touches[0];
    //     }
    //     if (touch == null && event.touches) {
    //         touch = event.touches[0];
    //     }
    //     if (touch == null) {
    //         return event;
    //     }
    //     return createMouseEvent(event, touch);
    // }
    // function createMouseEvent (event, touch) {
    //     var obj = Object.create(MouseEvent.prototype);
    //     for (var key in event) {
    //         obj[key] = event[key];
    //     }
    //     for (var key in PROPS) {
    //         obj[key] = touch[key];
    //     }
    //     return new MouseEvent(TOUCH_MAP[event.type], obj);
    // }
    // var PROPS = {
    //     clientX: 1,
    //     clientY: 1,
    //     pageX: 1,
    //     pageY: 1,
    //     screenX: 1,
    //     screenY: 1
    // };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_touch_Touch === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_touch_Touch) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_touch_Touch, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_touch_Touch = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_touch_FastClick;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_touch_FastClick ? _ref_mask_projects_mask_compo_src_touch_FastClick : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.FastClick = void 0;
    var event_1 = _ref_mask_projects_mask_compo_src_util_event;
    function FastClick(el, fn, opts) {
      this.state = 0;
      this.el = el;
      this.fn = fn;
      this.startX = 0;
      this.startY = 0;
      this.tStart = 0;
      this.tEnd = 0;
      this.dismiss = 0;
      (0, event_1.event_bind)(el, 'touchstart', this, opts);
      (0, event_1.event_bind)(el, 'touchend', this, opts);
      (0, event_1.event_bind)(el, 'click', this, opts);
    }
    exports.FastClick = FastClick;
    var threshold_TIME = 300, threshold_DIST = 10, timestamp_LastTouch = null;
    FastClick.prototype = {
      handleEvent: function(event) {
        var type = event.type;
        switch (type) {
         case 'touchmove':
         case 'touchstart':
         case 'touchend':
          timestamp_LastTouch = event.timeStamp;
          this[type](event);
          break;

         case 'touchcancel':
          this.reset();
          break;

         case 'click':
          this.click(event);
          break;
        }
      },
      touchstart: function(event) {
        (0, event_1.event_bind)(document.body, 'touchmove', this);
        var e = event.touches[0];
        this.state = 1;
        this.tStart = event.timeStamp;
        this.startX = e.clientX;
        this.startY = e.clientY;
      },
      touchend: function(event) {
        this.tEnd = event.timeStamp;
        if (1 === this.state) {
          this.dismiss++;
          if (this.tEnd - this.tStart <= threshold_TIME) {
            this.call(event);
            return;
          }
          (0, event_1.event_trigger)(this.el, 'taphold');
          return;
        }
        this.reset();
      },
      click: function(event) {
        if (null != timestamp_LastTouch) {
          var dt = timestamp_LastTouch - event.timeStamp;
          if (dt < 500) {
            return;
          }
        }
        if (--this.dismiss > -1) {
          return;
        }
        if (0 !== this.tEnd) {
          dt = event.timeStamp - this.tEnd;
          if (dt < 400) {
            return;
          }
        }
        this.dismiss = 0;
        this.call(event);
      },
      touchmove: function(event) {
        event = event.touches[0];
        var dx = event.clientX - this.startX;
        if (dx < 0) {
          dx *= -1;
        }
        if (dx > threshold_DIST) {
          this.reset();
          return;
        }
        dx = event.clientY - this.startY;
        if (dx < 0) {
          dx *= -1;
        }
        if (dx > threshold_DIST) {
          this.reset();
          return;
        }
      },
      reset: function() {
        this.state = 0;
        (0, event_1.event_unbind)(document.body, 'touchmove', this);
      },
      call: function(event) {
        this.reset();
        this.fn(event);
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_touch_FastClick === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_touch_FastClick) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_touch_FastClick, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_touch_FastClick = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_touch_Handler;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_touch_Handler ? _ref_mask_projects_mask_compo_src_touch_Handler : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.TouchHandler = void 0;
    var Touch_1 = _ref_mask_projects_mask_compo_src_touch_Touch;
    var FastClick_1 = _ref_mask_projects_mask_compo_src_touch_FastClick;
    var event_1 = _ref_mask_projects_mask_compo_src_util_event;
    exports.TouchHandler = {
      supports: function(type) {
        if (false === event_1.isTouchable) {
          return false;
        }
        switch (type) {
         case 'click':
         case 'mousedown':
         case 'mouseup':
         case 'mousemove':
          return true;
        }
        return false;
      },
      on: function(el, type, fn, opts) {
        if ('click' === type) {
          return new FastClick_1.FastClick(el, fn, opts);
        }
        return new Touch_1.Touch(el, type, fn, opts);
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_touch_Handler === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_touch_Handler) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_touch_Handler, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_touch_Handler = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_dom;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_dom ? _ref_mask_projects_mask_compo_src_util_dom : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.node_tryDisposeChildren = exports.node_tryDispose = exports.dom_addEventListener = void 0;
    var scope_vars_1 = _ref_mask_projects_mask_compo_src_scope_vars;
    var anchor_1 = _ref_mask_projects_mask_compo_src_compo_anchor;
    var compo_1 = _ref_mask_projects_mask_compo_src_util_compo;
    var refs_1 = _ref_utils_src_refs;
    var Handler_1 = _ref_mask_projects_mask_compo_src_keyboard_Handler;
    var Handler_2 = _ref_mask_projects_mask_compo_src_touch_Handler;
    var event_1 = _ref_mask_projects_mask_compo_src_util_event;
    function dom_addEventListener(el, event, fn, param, ctr) {
      var opts = !param ? void 0 : {
        capture: -1 !== param.indexOf('capture'),
        passive: -1 === param.indexOf('nopassive')
      };
      if (Handler_2.TouchHandler.supports(event)) {
        Handler_2.TouchHandler.on(el, event, fn, opts);
        return;
      }
      if (Handler_1.KeyboardHandler.supports(event, param)) {
        Handler_1.KeyboardHandler.attach(el, event, param, fn, ctr);
        return;
      }
      // allows custom events - in x-signal, for example
      if (null != scope_vars_1.domLib) {
        if ('touchmove' !== event && 'touchstart' !== event && 'touchend' !== event && 'wheel' !== event && 'scroll' !== event) {
          (0, scope_vars_1.domLib)(el).on(event, fn);
          return;
        }
      }
      (0, event_1.event_bind)(el, event, fn, opts);
    }
    exports.dom_addEventListener = dom_addEventListener;
    function node_tryDispose(node) {
      if (node.hasAttribute('x-compo-id')) {
        var id = node.getAttribute('x-compo-id'), id = anchor_1.Anchor.getByID(id);
        if (null != id) {
          if (null == id.$ || 1 === id.$.length) {
            (0, compo_1.compo_dispose)(id);
            (0, compo_1.compo_detachChild)(id);
            return;
          }
          var i = refs_1._Array_indexOf.call(id.$, node);
          if (-1 !== i) {
            refs_1._Array_splice.call(id.$, i, 1);
          }
        }
      }
      node_tryDisposeChildren(node);
    }
    exports.node_tryDispose = node_tryDispose;
    function node_tryDisposeChildren(node) {
      var child = node.firstChild;
      while (null != child) {
        if (1 === child.nodeType) {
          node_tryDispose(child);
        }
        child = child.nextSibling;
      }
    }
    exports.node_tryDisposeChildren = node_tryDisposeChildren;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_dom === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_dom) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_dom, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_dom = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_signal_attributes;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_signal_attributes ? _ref_mask_projects_mask_compo_src_signal_attributes : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var exports_1 = _ref_mask_src_custom_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var dom_1 = _ref_mask_projects_mask_compo_src_util_dom;
    var utils_1 = _ref_mask_projects_mask_compo_src_signal_utils;
    var refs_1 = _ref_utils_src_refs;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var compo_1 = _ref_mask_projects_mask_compo_src_util_compo;
    _create('signal');
    _createEvent('change');
    _createEvent('click');
    _createEvent('tap', 'click');
    _createEvent('keypress');
    _createEvent('keydown');
    _createEvent('keyup');
    _createEvent('mousedown');
    _createEvent('mouseup');
    _createEvent('press', 'keydown');
    _createEvent('shortcut', 'keydown');
    function _createEvent(name, type) {
      _create(name, type || name);
    }
    function _create(name, asEvent) {
      (0, exports_1.customAttr_register)('x-'.concat(name), 'client', function(node, attrValue, model, ctx, el, ctr) {
        node = node === ctr;
        _attachListener(el, ctr, attrValue, asEvent, node);
      });
    }
    function _attachListener(el, ctr, definition, asEvent, isSlot) {
      var hasMany = -1 !== definition.indexOf(';');
      var signals = '';
      var arr = hasMany ? definition.split(';') : null;
      var count = hasMany ? arr.length : 1;
      for (var i = 0; i < count; i++) {
        var signal = _handleDefinition(el, ctr, null == arr ? definition : arr[i], asEvent, isSlot);
        if (null != signal) {
          signals += ','.concat(signal, ',');
        }
      }
      if ('' !== signals) {
        hasMany = 'data-signals';
        var attr = el.getAttribute(hasMany);
        if (null != attr) {
          signals = attr + signals;
        }
        el.setAttribute(hasMany, signals);
      }
    }
    function _handleDefinition(el, ctr, definition, asEvent, isSlot) {
      var match = rgx_DEF.exec(definition);
      if (null == match) {
        (0, reporters_1.log_error)('Signal definition is not resolved '.concat(definition, '. The pattern is: (source((sourceArg))?:)?signal((expression))?'));
        return null;
      }
      var source = match[2], sourceArg = match[4], signal = match[5], match = match[7];
      if (null != asEvent) {
        sourceArg = source;
        source = asEvent;
      }
      asEvent = _createListener(ctr, signal, match);
      if (!source) {
        (0, reporters_1.log_error)('Signal: Eventname is not set', definition);
        return null;
      }
      if (!asEvent) {
        (0, reporters_1.log_warn)('Slot not found:', signal);
        return null;
      }
      if (isSlot) {
        (0, compo_1.compo_attach)(ctr, 'slots.' + source, asEvent);
        return;
      }
      (0, dom_1.dom_addEventListener)(el, source, asEvent, sourceArg, ctr);
      return signal;
    }
    function _createListener(ctr, slot, expr) {
      if (false === (0, utils_1._hasSlot)(ctr, slot, -1)) {
        return null;
      }
      return function(event) {
        var args;
        if (arguments.length > 1) {
          args = refs_1._Array_slice.call(arguments, 1);
        }
        if (null != expr) {
          var model, p = ctr;
          while (null != p && null == model) {
            model = p.model;
            p = p.parent;
          }
          var arr = (0, exports_2.expression_evalStatements)(expr, model, null, ctr);
          args = null == args ? arr : args.concat(arr);
        }
        (0, utils_1._fire)(ctr, slot, event, args, -1);
      };
    }
    // click: fooSignal(barArg)
    // ctrl+enter: doSmth(arg, arg2)
    var rgx_DEF = /^\s*(([\w\+\-_]+)(\s*\(\s*(\w+)\s*\))?\s*:)?\s*(\w+)(\s*\(([^)]+)\)\s*)?\s*$/;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_signal_attributes === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_signal_attributes) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_signal_attributes, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_signal_attributes = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_signal_exports;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_signal_exports ? _ref_mask_projects_mask_compo_src_signal_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.CompoSignals = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var toggle_1 = _ref_mask_projects_mask_compo_src_signal_toggle;
    var utils_1 = _ref_mask_projects_mask_compo_src_signal_utils;
    var compound_1 = _ref_mask_projects_mask_compo_src_signal_compound;
    _ref_mask_projects_mask_compo_src_signal_attributes;
    exports.CompoSignals = {
      signal: {
        toggle: toggle_1._toggle_all,
        // to parent
        emitOut: function(ctr, slot, sender, args) {
          ctr = (0, utils_1._fire)(ctr, slot, sender, args, -1);
          // if DEBUG
          !ctr && (0, reporters_1.log_warn)('Signal', slot, 'was not captured');
          // endif
        },
        // to children
        emitIn: function(ctr, slot, sender, args) {
          (0, utils_1._fire)(ctr, slot, sender, args, 1);
        },
        enable: function(ctr, slot) {
          (0, toggle_1._toggle_all)(ctr, slot, true);
        },
        disable: function(ctr, slot) {
          (0, toggle_1._toggle_all)(ctr, slot, false);
        },
        _trigger: function(ctr, directon, slot, args) {}
      },
      slot: {
        toggle: toggle_1._toggle_single,
        enable: function(ctr, slot) {
          (0, toggle_1._toggle_single)(ctr, slot, true);
        },
        disable: function(ctr, slot) {
          (0, toggle_1._toggle_single)(ctr, slot, false);
        },
        invoke: function(ctr, slot, event, args) {
          var slots = ctr.slots;
          if (null == slots || 'function' !== typeof slots[slot]) {
            (0, reporters_1.log_error)('Slot not found', slot, ctr);
            return null;
          }
          if (null == args) {
            return slots[slot].call(ctr, event);
          }
          return slots[slot].apply(ctr, [ event ].concat(args));
        },
        attach: compound_1._compound
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_signal_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_signal_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_signal_exports, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_signal_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_async;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_async ? _ref_mask_projects_mask_compo_src_compo_async : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.CompoStaticsAsync = void 0;
    var class_1 = _ref_utils_src_class;
    var obj_1 = _ref_utils_src_obj;
    var refs_1 = _ref_utils_src_refs;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var exports_1 = _ref_mask_projects_mask_compo_src_signal_exports;
    exports.CompoStaticsAsync = {
      pause: function(compo, ctx) {
        if (null != ctx) {
          if (null == ctx.defers) {
            // async components
            ctx.defers = [];
          }
          if (null == ctx.resolve) {
            (0, obj_1.obj_extend)(ctx, Dfr_1.class_Dfr.prototype);
          }
          ctx.async = true;
          ctx.defers.push(compo);
          ctx.defer();
        }
        (0, obj_1.obj_extend)(compo, CompoProto);
        var slots = Slots.wrap(compo);
        return function() {
          // Restore only signals in case smth. will be emitted during resume
          Slots.unwrap(compo, slots, true, false);
          exports.CompoStaticsAsync.resume(compo, ctx);
          Slots.unwrap(compo, slots, false, true);
        };
      },
      resume: function(compo, ctx) {
        compo.async = false;
        // fn can be null when calling resume synced after pause
        if (compo.resume) {
          compo.resume();
        }
        if (null == ctx) {
          return;
        }
        var x, busy = false, dfrs = ctx.defers, imax = dfrs.length, i = -1;
        while (++i < imax) {
          x = dfrs[i];
          if (x === compo) {
            dfrs[i] = null;
            continue;
          }
          busy = busy || null != x;
        }
        if (false === busy) {
          ctx.resolve();
        }
      },
      await: function(compo) {
        return new Awaiter().await(compo);
      }
    };
    /** private */
    var CompoProto = {
      async: true,
      resume: null,
      await: function(resume, deep) {
        if (true === deep) {
          exports.CompoStaticsAsync.await(this).then(resume);
          return;
        }
        if (false === this.async) {
          resume();
          return;
        }
        if (null == this.resume) {
          this.resume = resume;
          return;
        }
        var fn = this.resume;
        this.resume = function() {
          fn.call(this);
          resume.call(this);
        };
      }
    };
    var Awaiter = (0, class_1.class_create)(Dfr_1.class_Dfr, {
      isReady: false,
      count: 0,
      constructor: function() {
        this.dequeue = this.dequeue.bind(this);
      },
      enqueue: function() {
        this.count++;
      },
      dequeue: function() {
        if (0 === --this.count && true === this.isReady) {
          this.resolve();
        }
      },
      await: function(compo) {
        awaitDeep(compo, this);
        if (0 === this.count) {
          this.resolve();
          return this;
        }
        this.isReady = true;
        return this;
      }
    });
    function awaitDeep(compo, awaiter) {
      if (true === compo.async) {
        awaiter.enqueue();
        compo.await(awaiter.dequeue);
        return;
      }
      var arr = compo.components;
      if (null == arr) {
        return;
      }
      var imax = arr.length, i = -1;
      while (++i < imax) {
        awaitDeep(arr[i], awaiter);
      }
    }
    var Slots = {
      /* for now wrap only `domInsert` */
      wrap: function(compo) {
        var domInsertFn = compo.slots && compo.slots.domInsert;
        if (null == domInsertFn) {
          return null;
        }
        var slots = {
          /* [ Original Fn, Arguments if called] */
          domInsert: [ domInsertFn, null ]
        };
        compo.slots.domInsert = function() {
          slots.domInsert[1] = refs_1._Array_slice.call(arguments);
        };
        return slots;
      },
      unwrap: function(compo, slots, shouldRestore, shouldEmit) {
        if (null == slots) {
          return;
        }
        for (var key in slots) {
          var data = slots[key];
          if (shouldRestore) {
            compo.slots[key] = data[0];
          }
          if (shouldEmit && null != data[1]) {
            exports_1.CompoSignals.signal.emitIn(compo, key, data[1]);
          }
        }
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_async === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_async) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_async, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_async = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_compo;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_compo ? _ref_mask_projects_mask_compo_src_util_compo : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.compo_errored = exports.compo_prepairAsync = exports.compo_cleanElements = exports.compo_removeElements = exports.compo_attach = exports.compo_attachDisposer = exports.compo_ensureTemplate = exports.compo_detachChild = exports.compo_dispose = void 0;
    var coll_1 = _ref_utils_src_coll;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var refs_1 = _ref_utils_src_refs;
    var merge_1 = _ref_mask_src_feature_merge;
    var reporters_1 = _ref_mask_src_util_reporters;
    var async_1 = _ref_mask_projects_mask_compo_src_compo_async;
    var anchor_1 = _ref_mask_projects_mask_compo_src_compo_anchor;
    var exports_1 = _ref_mask_src_parser_exports;
    function compo_dispose(compo) {
      if (null != compo.dispose) {
        compo.dispose();
      }
      anchor_1.Anchor.removeCompo(compo);
      var compos = compo.components;
      if (null != compos) {
        var i = compos.length;
        while (--i > -1) {
          compo_dispose(compos[i]);
        }
      }
      compo.parent = null;
      compo.model = null;
      compo.components = null;
      compo.disposed = true;
    }
    exports.compo_dispose = compo_dispose;
    function compo_detachChild(childCompo) {
      var parent = childCompo.parent;
      if (null == parent) {
        return;
      }
      parent = parent.components;
      if (null == parent) {
        return;
      }
      parent = (0, coll_1.coll_remove)(parent, childCompo);
      if (false === parent) {
        log_warn('<compo:remove> - i`m not in parents collection', childCompo);
      }
    }
    exports.compo_detachChild = compo_detachChild;
    function compo_ensureTemplate(compo) {
      if (null == compo.nodes) {
        compo.nodes = getTemplateProp_(compo);
        return;
      }
      var behaviour = compo.meta.template;
      if (null == behaviour || 'replace' === behaviour) {
        return;
      }
      var template = getTemplateProp_(compo);
      if (null == template) {
        return;
      }
      if ('merge' === behaviour) {
        compo.nodes = (0, merge_1.mask_merge)(template, compo.nodes, compo);
        return;
      }
      if ('join' === behaviour) {
        compo.nodes = [ template, compo.nodes ];
        return;
      }
      log_error('Invalid meta.nodes behaviour', behaviour);
    }
    exports.compo_ensureTemplate = compo_ensureTemplate;
    function compo_attachDisposer(compo, disposer) {
      if (null == compo.dispose) {
        compo.dispose = disposer;
        return;
      }
      var prev = compo.dispose;
      compo.dispose = function() {
        disposer.call(this);
        prev.call(this);
      };
    }
    exports.compo_attachDisposer = compo_attachDisposer;
    function compo_attach(compo, name, fn) {
      var current = (0, obj_1.obj_getProperty)(compo, name);
      if ((0, is_1.is_Function)(current)) {
        var wrapper = function() {
          var args = refs_1._Array_slice.call(arguments);
          fn.apply(compo, args);
          current.apply(compo, args);
        };
        (0, obj_1.obj_setProperty)(compo, name, wrapper);
        return;
      }
      if (null == current) {
        (0, obj_1.obj_setProperty)(compo, name, fn);
        return;
      }
      throw Error('Cann`t attach ' + name + ' to not a Function');
    }
    exports.compo_attach = compo_attach;
    function compo_removeElements(compo) {
      if (compo.$) {
        compo.$.remove();
        return;
      }
      var els = compo.elements;
      if (els) {
        var i = -1, imax = els.length;
        while (++i < imax) {
          if (els[i].parentNode) {
            els[i].parentNode.removeChild(els[i]);
          }
        }
        return;
      }
      var compos = compo.components;
      if (compos) {
        i = -1, imax = compos.length;
        while (++i < imax) {
          compo_removeElements(compos[i]);
        }
      }
    }
    exports.compo_removeElements = compo_removeElements;
    function compo_cleanElements(compo) {
      var els = compo.$ || compo.elements;
      if (null == els || 0 === els.length) {
        return;
      }
      var x = els[0];
      var parent = compo.parent;
      for (parent = compo.parent; null != parent; parent = parent.parent) {
        var arr = parent.$ || parent.elements;
        if (null == arr) {
          continue;
        }
        var i = (0, coll_1.coll_indexOf)(arr, x);
        if (-1 === i) {
          break;
        }
        arr.splice(i, 1);
        if (els.length > 1) {
          var cursor = 1;
          for (var j = i; j < arr.length; j++) {
            if (arr[j] === els[cursor]) {
              arr.splice(j, 1);
              j--;
              cursor++;
            }
          }
        }
      }
    }
    exports.compo_cleanElements = compo_cleanElements;
    function compo_prepairAsync(dfr, compo, ctx) {
      var resume = async_1.CompoStaticsAsync.pause(compo, ctx);
      dfr.then(resume, onError);
      function onError(error) {
        compo_errored(compo, error);
        (0, reporters_1.error_withCompo)(error, compo);
        resume();
      }
    }
    exports.compo_prepairAsync = compo_prepairAsync;
    function compo_errored(compo, error) {
      var msg = '[%] Failed.'.replace('%', compo.compoName || compo.tagName);
      if (error) {
        error = error.message || error.statusText || String(error);
        if (error) {
          msg += ' ' + error;
        }
      }
      compo.nodes = (0, reporters_1.reporter_createErrorNode)(msg);
      compo.renderEnd = compo.render = compo.renderStart = null;
    }
    exports.compo_errored = compo_errored;
    function getTemplateProp_(compo) {
      var template = compo.template;
      if (null == template) {
        var attr = compo.attr;
        if (null == attr) {
          return null;
        }
        template = attr.template;
        if (null == template) {
          return null;
        }
        delete compo.attr.template;
      }
      if ('object' === typeof template) {
        return template;
      }
      if ((0, is_1.is_String)(template)) {
        if (35 === template.charCodeAt(0) && /^#[\w\d_-]+$/.test(template)) {
          // #
          attr = document.getElementById(template.substring(1));
          if (null == attr) {
            log_warn('Template not found by id:', template);
            return null;
          }
          template = attr.innerHTML;
        }
        return (0, exports_1.parser_parse)(template);
      }
      log_warn('Invalid template', typeof template);
      return null;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_compo === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_compo) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_compo, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_compo = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_compo_meta;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_compo_meta ? _ref_mask_projects_mask_compo_src_util_compo_meta : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.compo_meta_prepairArgumentsHandler = exports.compo_meta_prepairAttributesHandler = exports.compo_meta_toAttributeKey = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var compo_1 = _ref_mask_projects_mask_compo_src_util_compo;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    var Di_1 = _ref_mask_src_feature_Di;
    var CompoProto_1 = _ref_mask_projects_mask_compo_src_compo_CompoProto;
    // == Meta Attribute and Property Handler
    exports.compo_meta_toAttributeKey = _getProperty;
    function compo_meta_prepairAttributesHandler(Proto, type) {
      var meta = getMetaProp_(Proto);
      var attr = meta.attributes;
      if (null != attr) {
        var hash = _createHash(Proto, attr, true);
        meta.readAttributes = _attr_setProperties_Delegate(hash);
      }
      var props = meta.properties;
      if (null != props) {
        hash = _createHash(Proto, attr, false);
        meta.readProperties = _attr_setProperties_Delegate(hash);
      }
    }
    exports.compo_meta_prepairAttributesHandler = compo_meta_prepairAttributesHandler;
    function _createHash(Proto, metaObj, isAttr) {
      var hash = {};
      for (var key in metaObj) {
        _attr_setProperty_Delegate(Proto, key, metaObj[key], isAttr, 
        /*out*/ hash);
      }
      return hash;
    }
    function _attr_setProperties_Delegate(hash) {
      return function(compo, attr, model, container) {
        for (var key in hash) {
          var fn = hash[key];
          var val = attr[key];
          fn = fn(compo, key, val, model, container, attr);
          if (null == fn) {
            continue;
          }
          _errored(compo, fn, key, val);
          return false;
        }
        return true;
      };
    }
    function _attr_setProperty_Delegate(Proto, metaKey, metaVal, isAttr, 
    /*out*/ hash) {
      var optional = 63 === metaKey.charCodeAt(0), // ?
      default_ = null, attrName = optional ? metaKey.substring(1) : metaKey;
      var property = isAttr ? _getProperty(attrName, metaVal) : attrName;
      var fn = null;
      isAttr = typeof metaVal;
      if ('string' === isAttr) {
        if ('string' === metaVal || 'number' === metaVal || 'boolean' === metaVal) {
          fn = _ensureFns[metaVal];
        } else {
          optional = true;
          default_ = metaVal;
          fn = _ensureFns_Delegate.any();
        }
      } else if ('boolean' === isAttr || 'number' === isAttr) {
        optional = true;
        fn = _ensureFns[isAttr];
        default_ = metaVal;
      } else if ('function' === isAttr) {
        fn = metaVal;
      } else if (null == metaVal) {
        fn = _ensureFns_Delegate.any();
      } else if (metaVal instanceof RegExp) {
        fn = _ensureFns_Delegate.regexp(metaVal);
      } else if ('object' === typeof metaVal) {
        fn = _ensureFns_Delegate.options(metaVal);
        default_ = metaVal['default'];
        if (void 0 !== default_) {
          optional = true;
        }
      }
      if (null == fn) {
        (0, reporters_1.log_error)('Function expected for the attr. handler', metaKey);
        return;
      }
      var factory_ = (0, is_1.is_Function)(default_) ? default_ : null;
      Proto[property] = null;
      Proto = null;
      hash[attrName] = function(compo, attrName, attrVal, model, container, attr) {
        if (null == attrVal) {
          if (false === optional) {
            return Error('Expected attribute '.concat(attrName));
          }
          if (null != factory_) {
            compo[property] = factory_.call(compo, model, container, attr);
            return null;
          }
          if (null != default_) {
            compo[property] = default_;
          }
          return null;
        }
        attr = fn.call(compo, attrVal, model, container, attrName);
        if (attr instanceof Error) {
          return attr;
        }
        compo[property] = attr;
        return null;
      };
    }
    function _toCamelCase_Replacer(full, char_) {
      return char_.toUpperCase();
    }
    function _getProperty(attrName, attrDef) {
      if (null != attrDef && 'function' !== typeof attrDef && null != attrDef.name) {
        return attrDef.name;
      }
      attrDef = attrName;
      if (120 !== attrDef.charCodeAt(0)) {
        // x
        attrDef = 'x-' + attrDef;
      }
      return attrDef.replace(/-(\w)/g, _toCamelCase_Replacer);
    }
    function _errored(compo, error, key, val) {
      error.message = ''.concat(compo.compoName, ' - attribute \'').concat(key, '\': ').concat(error.message);
      (0, compo_1.compo_errored)(compo, error);
      (0, reporters_1.log_error)(error.message, '. Current: ', val);
    }
    var _ensureFns = {
      string: function(x) {
        return 'string' === typeof x ? x : Error('String');
      },
      number: function(x) {
        x = Number(x);
        return x === x ? x : Error('Number');
      },
      boolean: function(x, compo, model, attrName) {
        if ('boolean' === typeof x) {
          return x;
        }
        if (x === attrName) {
          return true;
        }
        if ('true' === x || '1' === x) {
          return true;
        }
        if ('false' === x || '0' === x) {
          return false;
        }
        return Error('Boolean');
      }
    };
    var _ensureFns_Delegate = {
      regexp: function(rgx) {
        return function(x) {
          return rgx.test(x) ? x : Error('RegExp');
        };
      },
      any: function() {
        return function(x) {
          return x;
        };
      },
      options: function(opts) {
        var type = opts.type, def = opts.default || _defaults[type], validate = opts.validate, transform = opts.transform;
        return function(x, model, container, attrName) {
          if (!x) {
            return def;
          }
          if (null != type) {
            var fn = _ensureFns[type];
            if (null != fn) {
              x = fn.apply(this, arguments);
              if (x instanceof Error) {
                return x;
              }
            }
          }
          if (null != validate) {
            fn = validate.call(this, x, model, container);
            if (fn) {
              return Error(fn);
            }
          }
          if (null != transform) {
            x = transform.call(this, x, model, container);
          }
          return x;
        };
      }
    };
    var _defaults = {
      string: '',
      boolean: false,
      number: 0
    };
    // == Meta Attribute Handler
    function compo_meta_prepairArgumentsHandler(Proto) {
      Proto = getMetaProp_(Proto);
      var args = Proto.arguments;
      if (null != args) {
        var i = args.length;
        while (--i > -1) {
          if ('string' === typeof args[i]) {
            args[i] = {
              name: args[i],
              type: null
            };
          }
        }
        Proto.readArguments = _modelArgsBinding_Delegate(args);
      }
    }
    exports.compo_meta_prepairArgumentsHandler = compo_meta_prepairArgumentsHandler;
    function _modelArgsBinding_Delegate(args) {
      return function(expr, model, ctx, ctr) {
        return _modelArgsBinding(args, expr, model, ctx, ctr);
      };
    }
    function _modelArgsBinding(args, expr, model, ctx, ctr) {
      var arr = null;
      if (null == expr) {
        var i = args.length;
        arr = new Array(i);
        while (--i > -1) {
          arr[i] = (0, exports_1.expression_eval)(args[i].name, model, ctx, ctr);
        }
      } else {
        arr = (0, exports_1.expression_evalStatements)(expr, model, ctx, ctr);
      }
      var out = {}, arrMax = arr.length, argsMax = args.length, i = -1;
      while (++i < arrMax && i < argsMax) {
        var val = arr[i];
        if (null == val) {
          var type = args[i].type;
          if (null != type) {
            var Type = type;
            if ('string' === typeof type) {
              Type = (0, exports_1.expression_eval)(type, model, ctx, ctr);
              if (null == Type) {
                (0, reporters_1.error_withCompo)(type + ' was not resolved', ctr);
              } else {
                val = Di_1.Di.resolve(Type);
              }
            }
          }
        }
        out[args[i].name] = val;
      }
      return out;
    }
    function getMetaProp_(Proto) {
      var meta = Proto.meta;
      if (null == meta) {
        meta = Proto.meta = (0, obj_1.obj_create)(CompoProto_1.CompoProto.meta);
      }
      return meta;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_compo_meta === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_compo_meta) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_compo_meta, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_compo_meta = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_tween_Tween;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_tween_Tween ? _ref_mask_projects_mask_compo_src_tween_Tween : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Tween = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var is_1 = _ref_utils_src_is;
    var Tween = /** @class */ function() {
      function Tween(key, prop, start, end, transition) {
        var parts = /(\d+m?s)\s*([\w\-]+)?/.exec(transition);
        this.duration = _toMs(parts[1], transition);
        this.timing = _toTimingFn(parts[2]);
        this.start = +start;
        this.end = +end;
        this.diff = this.end - this.start;
        this.key = key;
        this.prop = prop;
        this.animating = true;
      }
      Tween.prototype.tick = function(timestamp, parent) {
        if (null == this.startedAt) {
          this.startedAt = timestamp;
        }
        timestamp -= this.startedAt;
        var x = this.timing(timestamp, this.start, this.diff, this.duration);
        if (timestamp >= this.duration) {
          this.animating = false;
          x = this.end;
        }
        parent.attr[this.key] = x;
        if (this.prop) {
          parent[this.prop] = x;
        }
      };
      return Tween;
    }();
    exports.Tween = Tween;
    /*2ms;3s*/
    function _toMs(str, easing) {
      if (null == str) {
        (0, reporters_1.log_error)('Easing: Invalid duration in ' + easing);
        return 0;
      }
      easing = parseFloat(str);
      if (str.indexOf('ms') > -1) {
        return easing;
      }
      if (str.indexOf('s') > -1) {
        return 1e3 * easing;
      }
      throw Error('Unsupported duration:' + str);
    }
    function _toTimingFn(str) {
      if (null == str) {
        return Fns.linear;
      }
      var fn = Fns[str];
      if (false === (0, is_1.is_Function)(fn)) {
        (0, reporters_1.log_error)('Unsupported timing:' + str + '. Available:' + Object.keys(Fns).join(','));
        return Fns.linear;
      }
      return fn;
    }
    // Easing functions by Robert Penner
    // Source: http://www.robertpenner.com/easing/
    // License: http://www.robertpenner.com/easing_terms_of_use.html
    var Fns = {
      // t: is the current time (or position) of the tween.
      // b: is the beginning value of the property.
      // c: is the change between the beginning and destination value of the property.
      // d: is the total time of the tween.
      // jshint eqeqeq: false, -W041: true
      linear: function(t, b, c, d) {
        return c * t / d + b;
      },
      linearEase: function(t, b, c, d) {
        return c * t / d + b;
      },
      easeInQuad: function(t, b, c, d) {
        return c * (t /= d) * t + b;
      },
      easeOutQuad: function(t, b, c, d) {
        return -c * (t /= d) * (t - 2) + b;
      },
      easeInOutQuad: function(t, b, c, d) {
        if ((t /= d / 2) < 1) {
          return c / 2 * t * t + b;
        }
        return -c / 2 * (--t * (t - 2) - 1) + b;
      },
      easeInCubic: function(t, b, c, d) {
        return c * (t /= d) * t * t + b;
      },
      easeOutCubic: function(t, b, c, d) {
        return c * ((t = t / d - 1) * t * t + 1) + b;
      },
      easeInOutCubic: function(t, b, c, d) {
        if ((t /= d / 2) < 1) {
          return c / 2 * t * t * t + b;
        }
        return c / 2 * ((t -= 2) * t * t + 2) + b;
      },
      easeInQuart: function(t, b, c, d) {
        return c * (t /= d) * t * t * t + b;
      },
      easeOutQuart: function(t, b, c, d) {
        return -c * ((t = t / d - 1) * t * t * t - 1) + b;
      },
      easeInOutQuart: function(t, b, c, d) {
        if ((t /= d / 2) < 1) {
          return c / 2 * t * t * t * t + b;
        }
        return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
      },
      easeInQuint: function(t, b, c, d) {
        return c * (t /= d) * t * t * t * t + b;
      },
      easeOutQuint: function(t, b, c, d) {
        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
      },
      easeInOutQuint: function(t, b, c, d) {
        if ((t /= d / 2) < 1) {
          return c / 2 * t * t * t * t * t + b;
        }
        return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
      },
      easeInSine: function(t, b, c, d) {
        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
      },
      easeOutSine: function(t, b, c, d) {
        return c * Math.sin(t / d * (Math.PI / 2)) + b;
      },
      easeInOutSine: function(t, b, c, d) {
        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
      },
      easeInExpo: function(t, b, c, d) {
        return 0 == t ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
      },
      easeOutExpo: function(t, b, c, d) {
        return t == d ? b + c : c * (1 - Math.pow(2, -10 * t / d)) + b;
      },
      easeInOutExpo: function(t, b, c, d) {
        if (0 == t) {
          return b;
        }
        if (t == d) {
          return b + c;
        }
        if ((t /= d / 2) < 1) {
          return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
        }
        return c / 2 * (2 - Math.pow(2, -10 * --t)) + b;
      },
      easeInCirc: function(t, b, c, d) {
        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
      },
      easeOutCirc: function(t, b, c, d) {
        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
      },
      easeInOutCirc: function(t, b, c, d) {
        if ((t /= d / 2) < 1) {
          return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
        }
        return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
      },
      easeInElastic: function(t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (0 == t) {
          return b;
        }
        if (1 == (t /= d)) {
          return b + c;
        }
        if (!p) {
          p = .3 * d;
        }
        if (a < Math.abs(c)) {
          a = c;
          s = p / 4;
        } else {
          s = p / (2 * Math.PI) * Math.asin(c / a);
        }
        return -(a * Math.pow(2, 10 * --t) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
      },
      easeOutElastic: function(t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (0 == t) {
          return b;
        }
        if (1 == (t /= d)) {
          return b + c;
        }
        if (!p) {
          p = .3 * d;
        }
        if (a < Math.abs(c)) {
          a = c;
          s = p / 4;
        } else {
          s = p / (2 * Math.PI) * Math.asin(c / a);
        }
        return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
      },
      easeInOutElastic: function(t, b, c, d) {
        // jshint eqeqeq: false, -W041: true
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (0 == t) {
          return b;
        }
        if (2 == (t /= d / 2)) {
          return b + c;
        }
        if (!p) {
          p = d * (.3 * 1.5);
        }
        if (a < Math.abs(c)) {
          a = c;
          s = p / 4;
        } else {
          s = p / (2 * Math.PI) * Math.asin(c / a);
        }
        if (t < 1) {
          return a * Math.pow(2, 10 * --t) * Math.sin((t * d - s) * (2 * Math.PI) / p) * -.5 + b;
        }
        return a * Math.pow(2, -10 * --t) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
      },
      easeInBack: function(t, b, c, d, s) {
        // jshint eqeqeq: false, -W041: true
        if (void 0 == s) {
          s = 1.70158;
        }
        return c * (t /= d) * t * ((s + 1) * t - s) + b;
      },
      easeOutBack: function(t, b, c, d, s) {
        // jshint eqeqeq: false, -W041: true
        if (void 0 == s) {
          s = 1.70158;
        }
        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
      },
      easeInOutBack: function(t, b, c, d, s) {
        // jshint eqeqeq: false, -W041: true
        if (void 0 == s) {
          s = 1.70158;
        }
        if ((t /= d / 2) < 1) {
          return c / 2 * (t * t * ((1 + (s *= 1.525)) * t - s)) + b;
        }
        return c / 2 * ((t -= 2) * t * ((1 + (s *= 1.525)) * t + s) + 2) + b;
      },
      easeInBounce: function(t, b, c, d) {
        return c - Fns.easeOutBounce(d - t, 0, c, d) + b;
      },
      easeOutBounce: function(t, b, c, d) {
        if ((t /= d) < 1 / 2.75) {
          return c * (7.5625 * t * t) + b;
        } else if (t < 2 / 2.75) {
          return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
        } else if (t < 2.5 / 2.75) {
          return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
        } else {
          return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
        }
      },
      easeInOutBounce: function(t, b, c, d) {
        if (t < d / 2) {
          return .5 * Fns.easeInBounce(2 * t, 0, c, d) + b;
        }
        return .5 * Fns.easeOutBounce(2 * t - d, 0, c, d) + .5 * c + b;
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_tween_Tween === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_tween_Tween) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_tween_Tween, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_tween_Tween = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_tween_TweenManager;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_tween_TweenManager ? _ref_mask_projects_mask_compo_src_tween_TweenManager : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.TweenManager = void 0;
    var class_1 = _ref_utils_src_class;
    var compo_1 = _ref_mask_projects_mask_compo_src_util_compo;
    var Tween_1 = _ref_mask_projects_mask_compo_src_tween_Tween;
    var ani_1 = _ref_mask_projects_mask_compo_src_util_ani;
    exports.TweenManager = (0, class_1.class_create)({
      animating: false,
      frame: null,
      constructor: function(compo) {
        this.parent = compo;
        this.tweens = {};
        this.tick = this.tick.bind(this);
        (0, compo_1.compo_attachDisposer)(compo, this.dispose.bind(this));
      },
      start: function(key, prop, start, end, easing) {
        // Tween is not disposable, as no resources are held. So if a tween already exists, it will be just overwritten.
        this.tweens[key] = new Tween_1.Tween(key, prop, start, end, easing);
        this.process();
      },
      process: function() {
        if (this.animating) {
          return;
        }
        this.animation = true;
        this.frame = ani_1.ani_requestFrame.call(null, this.tick);
      },
      dispose: function() {
        ani_1.ani_clearFrame.call(null, this.frame);
      },
      tick: function(timestamp) {
        var busy = false;
        for (var key in this.tweens) {
          var tween = this.tweens[key];
          if (null == tween) {
            continue;
          }
          tween.tick(timestamp, this.parent);
          if (false === tween.animating) {
            this.tweens[key] = null;
            continue;
          }
          busy = true;
        }
        if (this.parent.onEnterFrame) {
          this.parent.onEnterFrame();
        }
        if (busy) {
          this.frame = ani_1.ani_requestFrame.call(null, this.tick);
          return;
        }
        this.animating = false;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_tween_TweenManager === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_tween_TweenManager) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_tween_TweenManager, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_tween_TweenManager = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_ani;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_ani ? _ref_mask_projects_mask_compo_src_util_ani : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ani_updateAttr = exports.ani_clearFrame = exports.ani_requestFrame = void 0;
    var is_1 = _ref_utils_src_is;
    var refs_1 = _ref_utils_src_refs;
    var TweenManager_1 = _ref_mask_projects_mask_compo_src_tween_TweenManager;
    exports.ani_requestFrame = refs_1._global.requestAnimationFrame;
    exports.ani_clearFrame = refs_1._global.cancelAnimationFrame;
    function ani_updateAttr(compo, key, prop, val, meta) {
      var transition = compo.attr[key + '-transition'];
      if (null == transition && (0, is_1.is_Object)(meta)) {
        transition = meta.transition;
      }
      if (null == transition) {
        compo.attr[key] = val;
        if (null != prop) {
          compo[prop] = val;
        }
        _refresh(compo);
        return;
      }
      meta = compo.__tweens;
      if (null == meta) {
        meta = compo.__tweens = new TweenManager_1.TweenManager(compo);
      }
      compo = compo[prop];
      meta.start(key, prop, compo, val, transition);
    }
    exports.ani_updateAttr = ani_updateAttr;
    function _refresh(compo) {
      if (null == compo.onEnterFrame) {
        return;
      }
      if (null != compo.__frame) {
        exports.ani_clearFrame.call(null, compo.__frame);
      }
      compo.__frame = exports.ani_requestFrame.call(null, compo.onEnterFrame);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_ani === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_ani) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_ani, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_ani = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_dfr;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_dfr ? _ref_mask_projects_mask_compo_src_util_dfr : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.dfr_isBusy = void 0;
    var is_1 = _ref_utils_src_is;
    var refs_1 = _ref_utils_src_refs;
    var reporters_1 = _ref_mask_src_util_reporters;
    function dfr_isBusy(dfr) {
      if (null == dfr || 'function' !== typeof dfr.then) {
        return false;
        // Class.Deferred
      }
      if ((0, is_1.is_Function)(dfr.isBusy)) {
        return dfr.isBusy();
        // jQuery Deferred
      }
      if ((0, is_1.is_Function)(dfr.state)) {
        return 'pending' === dfr.state();
      }
      if (dfr instanceof Promise) {
        return true;
      }
      (0, reporters_1.log_warn)('Class, jQuery or native promise expected');
      return false;
    }
    exports.dfr_isBusy = dfr_isBusy;
    var Promise = refs_1._global.Promise;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_dfr === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_dfr) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_dfr, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_dfr = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_domLib;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_domLib ? _ref_mask_projects_mask_compo_src_util_domLib : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.domLib_on = exports.domLib_find = void 0;
    var Handler_1 = _ref_mask_projects_mask_compo_src_keyboard_Handler;
    /**
 *    Combine .filter + .find
 */
    function domLib_find($set, selector) {
      return $set.filter(selector).add($set.find(selector));
    }
    exports.domLib_find = domLib_find;
    function domLib_on($set, type, selector, fn) {
      if (null == selector) {
        return $set.on(type, fn);
      }
      if (Handler_1.KeyboardHandler.supports(type, selector)) {
        return $set.each(function(i, el) {
          Handler_1.KeyboardHandler.on(el, type, selector, fn);
        });
      }
      return $set.on(type, selector, fn).filter(selector).on(type, fn);
    }
    exports.domLib_on = domLib_on;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_domLib === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_domLib) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_domLib, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_domLib = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_events;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_events ? _ref_mask_projects_mask_compo_src_compo_events : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Events_ = void 0;
    var fn_1 = _ref_utils_src_fn;
    var domLib_1 = _ref_mask_projects_mask_compo_src_util_domLib;
    exports.Events_ = {
      on: function(component, events, $el) {
        if (null == $el) {
          $el = component.$;
        }
        var isarray = events instanceof Array, length = isarray ? events.length : 1;
        for (var x, i = 0; isarray ? i < length : i < 1; i++) {
          x = isarray ? events[i] : events;
          if (x instanceof Array) {
            // generic jQuery .on Arguments
            if (null != EventDecorator) {
              x[0] = EventDecorator(x[0]);
            }
            $el.on.apply($el, x);
            continue;
          }
          for (var key in x) {
            var type, selector, fn = 'string' === typeof x[key] ? component[x[key]] : x[key], semicolon = key.indexOf(':');
            if (-1 !== semicolon) {
              type = key.substring(0, semicolon);
              selector = key.substring(semicolon + 1).trim();
            } else {
              type = key;
            }
            if (null != EventDecorator) {
              type = EventDecorator(type);
            }
            (0, domLib_1.domLib_on)($el, type, selector, (0, fn_1.fn_proxy)(fn, component));
          }
        }
      },
      setEventDecorator: function(x) {
        EventDecorator = x;
      }
    };
    var EventDecorator = null;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_events === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_events) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_events, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_events = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_jcompo_jCompo;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_jcompo_jCompo ? _ref_mask_projects_mask_compo_src_jcompo_jCompo : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.domLib_initialize = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_src_dom_exports;
    var exports_2 = _ref_mask_src_renderer_exports;
    var scope_vars_1 = _ref_mask_projects_mask_compo_src_scope_vars;
    var anchor_1 = _ref_mask_projects_mask_compo_src_compo_anchor;
    var dom_1 = _ref_mask_projects_mask_compo_src_util_dom;
    var traverse_1 = _ref_mask_projects_mask_compo_src_util_traverse;
    var selector_1 = _ref_mask_projects_mask_compo_src_util_selector;
    var exports_3 = _ref_mask_projects_mask_compo_src_signal_exports;
    function domLib_initialize() {
      if (null == scope_vars_1.domLib || null == scope_vars_1.domLib.fn) {
        return;
      }
      scope_vars_1.domLib.fn.compo = function(selector) {
        if (0 === this.length) {
          return null;
        }
        var compo = anchor_1.Anchor.resolveCompo(this[0], true);
        return null == selector ? compo : (0, traverse_1.find_findSingle)(compo, (0, 
        selector_1.selector_parse)(selector, exports_1.Dom.CONTROLLER, 'up'));
      };
      scope_vars_1.domLib.fn.model = function(selector) {
        var compo = this.compo(selector);
        if (null == compo) {
          return null;
        }
        var model = compo.model;
        while (null == model && compo.parent) {
          compo = compo.parent;
          model = compo.model;
        }
        return model;
      };
      // insert
      (function() {
        var jQ_Methods = [ 'append', 'prepend', 'before', 'after' ];
        [ 'appendMask', 'prependMask', 'beforeMask', 'afterMask' ].forEach(function(method, index) {
          scope_vars_1.domLib.fn[method] = function(template, model, ctr, ctx) {
            if (0 === this.length) {
              return this;
            }
            if (this.length > 1) {}
            if (null == ctr) {
              ctr = index < 2 ? this.compo() : this.parent().compo();
            }
            var isUnsafe = false;
            if (null == ctr) {
              ctr = {};
              isUnsafe = true;
            }
            if (null == ctr.components) {
              ctr.components = [];
            }
            var compos = ctr.components, i = compos.length, template = (0, exports_2.renderer_render)(template, model, ctx, null, ctr);
            var model = this[jQ_Methods[index]](template), imax = compos.length;
            for (;i < imax; i++) {
              exports_3.CompoSignals.signal.emitIn(compos[i], 'domInsert');
            }
            if (isUnsafe && 0 !== imax) {
              // if DEBUG
              (0, reporters_1.log_warn)('$.', method, '- parent controller was not found in Elements DOM.', 'This can lead to memory leaks.');
              (0, reporters_1.log_warn)('Specify the controller directly, via $.', method, '(template[, model, controller, ctx])');
              // endif
            }
            return model;
          };
        });
      })();
      // remove
      (function() {
        var jq_remove = scope_vars_1.domLib.fn.remove, jq_empty = scope_vars_1.domLib.fn.empty;
        scope_vars_1.domLib.fn.removeAndDispose = function() {
          this.each(each_tryDispose);
          return jq_remove.call(this);
        };
        scope_vars_1.domLib.fn.emptyAndDispose = function() {
          this.each(each_tryDisposeChildren);
          return jq_empty.call(this);
        };
        function each_tryDispose(i, el) {
          (0, dom_1.node_tryDispose)(el);
        }
        function each_tryDisposeChildren(i, el) {
          (0, dom_1.node_tryDisposeChildren)(el);
        }
      })();
    }
    exports.domLib_initialize = domLib_initialize;
    // try to initialize the dom lib, or is then called from `setDOMLibrary`
    domLib_initialize();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_jcompo_jCompo === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_jcompo_jCompo) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_jcompo_jCompo, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_jcompo_jCompo = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_find;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_find ? _ref_mask_projects_mask_compo_src_compo_find : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.compo_child = exports.compo_children = exports.compo_closest = exports.compo_findAll = exports.compo_find = void 0;
    var exports_1 = _ref_mask_src_dom_exports;
    var selector_1 = _ref_mask_projects_mask_compo_src_util_selector;
    var traverse_1 = _ref_mask_projects_mask_compo_src_util_traverse;
    function compo_find(compo, selector) {
      return (0, traverse_1.find_findSingle)(compo, (0, selector_1.selector_parse)(selector, exports_1.Dom.CONTROLLER, 'down'));
    }
    exports.compo_find = compo_find;
    function compo_findAll(compo, selector) {
      return (0, traverse_1.find_findAll)(compo, (0, selector_1.selector_parse)(selector, exports_1.Dom.CONTROLLER, 'down'));
    }
    exports.compo_findAll = compo_findAll;
    function compo_closest(compo, selector) {
      return (0, traverse_1.find_findSingle)(compo, (0, selector_1.selector_parse)(selector, exports_1.Dom.CONTROLLER, 'up'));
    }
    exports.compo_closest = compo_closest;
    function compo_children(compo, selector) {
      return (0, traverse_1.find_findChildren)(compo, (0, selector_1.selector_parse)(selector, exports_1.Dom.CONTROLLER));
    }
    exports.compo_children = compo_children;
    function compo_child(compo, selector) {
      return (0, traverse_1.find_findChild)(compo, (0, selector_1.selector_parse)(selector, exports_1.Dom.CONTROLLER));
    }
    exports.compo_child = compo_child;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_find === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_find) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_find, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_find = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_EventsDeco;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_EventsDeco ? _ref_mask_projects_mask_compo_src_compo_EventsDeco : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.EventsDeco = void 0;
    var hasTouch = function() {
      if ('undefined' === typeof document || null == document) {
        return false;
      }
      if ('createTouch' in document) {
        return true;
      }
      try {
        return !!document.createEvent('TouchEvent').initTouchEvent;
      } catch (error) {
        return false;
      }
    }();
    exports.EventsDeco = {
      touch: function(type) {
        if (false === hasTouch) {
          return type;
        }
        if ('click' === type) {
          return 'touchend';
        }
        if ('mousedown' === type) {
          return 'touchstart';
        }
        if ('mouseup' === type) {
          return 'touchend';
        }
        if ('mousemove' === type) {
          return 'touchmove';
        }
        return type;
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_EventsDeco === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_EventsDeco) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_EventsDeco, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_EventsDeco = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_CompoConfig;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_CompoConfig ? _ref_mask_projects_mask_compo_src_compo_CompoConfig : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.CompoConfig = void 0;
    var domLib_1 = _ref_mask_projects_mask_compo_src_util_domLib;
    var scope_vars_1 = _ref_mask_projects_mask_compo_src_scope_vars;
    var jCompo_1 = _ref_mask_projects_mask_compo_src_jcompo_jCompo;
    var find_1 = _ref_mask_projects_mask_compo_src_compo_find;
    var events_1 = _ref_mask_projects_mask_compo_src_compo_events;
    var EventsDeco_1 = _ref_mask_projects_mask_compo_src_compo_EventsDeco;
    exports.CompoConfig = {
      selectors: {
        $: function(compo, selector) {
          compo = (0, domLib_1.domLib_find)(compo.$, selector);
          return compo;
        },
        compo: function(compo, selector) {
          compo = (0, find_1.compo_find)(compo, selector);
          return compo;
        }
      },
      /**
     *    @default, global $ is used
     *    IDOMLibrary = {
     *    {fn}(elements) - create dom-elements wrapper,
     *    on(event, selector, fn) - @see jQuery 'on'
     *    }
     */
      setDOMLibrary: function(lib) {
        if (scope_vars_1.domLib === lib) {
          return;
        }
        (0, scope_vars_1.setDomLib)(lib);
        (0, jCompo_1.domLib_initialize)();
      },
      getDOMLibrary: function() {
        return scope_vars_1.domLib;
      },
      eventDecorator: function(mix) {
        if ('function' === typeof mix) {
          events_1.Events_.setEventDecorator(mix);
          return;
        }
        if ('string' === typeof mix) {
          console.error('EventDecorators are not used. Touch&Mouse support is already integrated');
          events_1.Events_.setEventDecorator(EventsDeco_1.EventsDeco[mix]);
          return;
        }
        if ('boolean' === typeof mix && false === mix) {
          events_1.Events_.setEventDecorator(null);
          return;
        }
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_CompoConfig === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_CompoConfig) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_CompoConfig, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_CompoConfig = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_children;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_children ? _ref_mask_projects_mask_compo_src_compo_children : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Children_ = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var events_1 = _ref_mask_projects_mask_compo_src_compo_events;
    var CompoConfig_1 = _ref_mask_projects_mask_compo_src_compo_CompoConfig;
    exports.Children_ = {
      /**
    *    Component children. Example:
    *
    *    Class({
    *        Base: Compo,
    *        Construct: function(){
    *            this.compos = {
    *                panel: '$: .container',  // querying with DOMLib
    *                timePicker: 'compo: timePicker', // querying with Compo selector
    *                button: '#button' // querying with querySelector***
    *            }
    *        }
    *    });
    *
    */
      select: function(component, compos) {
        for (var name in compos) {
          var data = compos[name], events = null, selector = null;
          if (data instanceof Array) {
            console.error('obsolete');
            selector = data[0];
            events = data.splice(1);
          }
          if ('string' === typeof data) {
            selector = data;
          }
          if (null == data || null == selector) {
            (0, reporters_1.log_error)('Unknown component child', name, compos[name]);
            (0, reporters_1.log_warn)('Is this object shared within multiple compo classes? Define it in constructor!');
            return;
          }
          data = selector.indexOf(':');
          var engine = CompoConfig_1.CompoConfig.selectors[selector.substring(0, data)];
          if (null == engine) {
            var $els = component.$;
            var el = void 0;
            for (var i = 0; i < $els.length; i++) {
              var x = $els[i];
              el = x.querySelector(selector);
              if (null != el) {
                break;
              }
              if (x.matches(selector)) {
                el = x;
                break;
              }
            }
            component.compos[name] = el;
          } else {
            selector = selector.substring(++data).trim();
            component.compos[name] = engine(component, selector);
          }
          data = component.compos[name];
          if (null != events) {
            if (null != data.$) {
              data = data.$;
            }
            events_1.Events_.on(component, events, data);
          }
        }
      },
      /** Deprecated: refs are implemented by accessors */
      selectSelf: function(self, refs) {
        var compos = refs.compos;
        if (compos) {
          for (var prop in compos) {
            self[prop] = CompoConfig_1.CompoConfig.selectors.compo(self, compos[prop]);
          }
        }
        var q = refs.queries;
        if (q) {
          for (var prop in q) {
            self[prop] = CompoConfig_1.CompoConfig.selectors.$(self, q[prop]);
          }
        }
        var els = refs.elements;
        if (els) {
          for (var prop in els) {
            var selector = els[prop];
            var x = self.$.find(selector);
            if ((null === x || void 0 === x ? void 0 : x.length) > 0) {
              self[prop] = x[0];
              continue;
            }
            x = self.$.filter(selector);
            self[prop] = null === x || void 0 === x ? void 0 : x[0];
          }
        }
      },
      compos: function(self, selector) {
        return CompoConfig_1.CompoConfig.selectors.compo(self, selector);
      },
      queries: function(self, selector) {
        return CompoConfig_1.CompoConfig.selectors.$(self, selector);
      },
      elements: function(self, selector) {
        var x = self.$.find(selector);
        if ((null === x || void 0 === x ? void 0 : x.length) > 0) {
          return x[0];
        }
        x = self.$.filter(selector);
        return null === x || void 0 === x ? void 0 : x[0];
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_children === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_children) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_children, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_children = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_CompoProto;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_CompoProto ? _ref_mask_projects_mask_compo_src_compo_CompoProto : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.CompoProto = void 0;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var compo_meta_1 = _ref_mask_projects_mask_compo_src_util_compo_meta;
    var ani_1 = _ref_mask_projects_mask_compo_src_util_ani;
    var compo_1 = _ref_mask_projects_mask_compo_src_util_compo;
    var dfr_1 = _ref_mask_projects_mask_compo_src_util_dfr;
    var reporters_1 = _ref_mask_src_util_reporters;
    var refs_1 = _ref_utils_src_refs;
    var anchor_1 = _ref_mask_projects_mask_compo_src_compo_anchor;
    var exports_1 = _ref_mask_projects_mask_compo_src_signal_exports;
    var Handler_1 = _ref_mask_projects_mask_compo_src_keyboard_Handler;
    var selector_1 = _ref_mask_projects_mask_compo_src_util_selector;
    var traverse_1 = _ref_mask_projects_mask_compo_src_util_traverse;
    var exports_2 = _ref_mask_src_dom_exports;
    var exports_3 = _ref_mask_projects_expression_src_exports;
    var scope_vars_1 = _ref_mask_projects_mask_compo_src_scope_vars;
    var children_1 = _ref_mask_projects_mask_compo_src_compo_children;
    var events_1 = _ref_mask_projects_mask_compo_src_compo_events;
    var find_1 = _ref_mask_projects_mask_compo_src_compo_find;
    var exports_4 = _ref_mask_src_renderer_exports;
    var exports_5 = _ref_mask_src_parser_exports;
    exports.CompoProto = {
      type: exports_2.Dom.CONTROLLER,
      __constructed: false,
      __resource: null,
      __frame: null,
      __tweens: null,
      ID: null,
      $: null,
      tagName: null,
      compoName: null,
      parent: null,
      node: null,
      nodes: null,
      components: null,
      expression: null,
      attr: null,
      model: null,
      scope: null,
      slots: null,
      pipes: null,
      compos: null,
      events: null,
      hotkeys: null,
      async: false,
      await: null,
      resume: null,
      disposed: false,
      meta: null,
      getAttribute: function(key) {
        var _a = null === (_a = this.meta.attributes) || void 0 === _a ? void 0 : _a[key];
        if (null == _a) {
          return this.attr[key];
        }
        key = (0, compo_meta_1.compo_meta_toAttributeKey)(key, _a);
        return this[key];
      },
      setAttribute: function(key, val) {
        var _b;
        var prop = null;
        var _a = null === (_a = this.meta.attributes) || void 0 === _a ? void 0 : _a[key];
        if (null != _a) {
          prop = (0, compo_meta_1.compo_meta_toAttributeKey)(key, _a);
        } else {
          _a = null === (_b = this.meta.properties) || void 0 === _b ? void 0 : _b[key];
          if (null != _a) {
            prop = key;
          }
        }
        (0, ani_1.ani_updateAttr)(this, key, prop, val, _a);
        if (this.onAttributeSet) {
          this.onAttributeSet(key, val);
        }
      },
      onAttributeSet: null,
      onRenderStart: null,
      onRenderStartClient: null,
      onRenderEnd: null,
      onRenderEndServer: null,
      onEnterFrame: null,
      render: null,
      renderStart: function(model, ctx, container) {
        (0, compo_1.compo_ensureTemplate)(this);
        if ((0, is_1.is_Function)(this.onRenderStart)) {
          model = this.onRenderStart(model, ctx, container);
          if (void 0 !== model && (0, dfr_1.dfr_isBusy)(model)) {
            (0, compo_1.compo_prepairAsync)(model, this, ctx);
          }
        }
      },
      renderStartClient: function(model, ctx, container) {
        if ((0, is_1.is_Function)(this.onRenderStartClient)) {
          model = this.onRenderStartClient(model, ctx, container);
          if (void 0 !== model && (0, dfr_1.dfr_isBusy)(model)) {
            (0, compo_1.compo_prepairAsync)(model, this, ctx);
          }
        }
      },
      renderEnd: function(elements, model, ctx, container) {
        var _a;
        anchor_1.Anchor.create(this);
        this.$ = (0, scope_vars_1.domLib)(elements);
        if (null != this.events) {
          events_1.Events_.on(this, this.events);
        }
        if (null != this.compos) {
          children_1.Children_.select(this, this.compos);
        }
        if (null != (null === (_a = this.meta) || void 0 === _a ? void 0 : _a.refs)) {
          children_1.Children_.selectSelf(this, this.meta.refs);
        }
        if (null != this.hotkeys) {
          Handler_1.KeyboardHandler.hotkeys(this, this.hotkeys);
        }
        if ((0, is_1.is_Function)(this.onRenderEnd)) {
          this.onRenderEnd(elements, model, ctx, container);
        }
        if ((0, is_1.is_Function)(this.onEnterFrame)) {
          this.onEnterFrame = this.onEnterFrame.bind(this);
          this.onEnterFrame();
        }
      },
      appendTo: function(el) {
        this.$.appendTo(el);
        this.emitIn('domInsert');
        return this;
      },
      append: function(template, model, selector) {
        if (null == this.$) {
          var ast = (0, is_1.is_String)(template) ? (0, exports_5.parser_parse)(template) : template;
          var parent = this;
          if (selector) {
            parent = (0, traverse_1.find_findSingle)(this, (0, selector_1.selector_parse)(selector, exports_2.Dom.CONTROLLER, 'down'));
            if (null == parent) {
              (0, reporters_1.log_error)('Compo::append: Container not found');
              return this;
            }
          }
          parent.nodes = [ parent.nodes, ast ];
          return this;
        }
        ast = (0, exports_4.renderer_render)(template, model, null, null, this);
        parent = selector ? this.$.find(selector) : this.$;
        parent.append(ast);
        // @todo do not emit to created compos before
        this.emitIn('domInsert');
        return this;
      },
      find: function(selector) {
        return (0, find_1.compo_find)(this, selector);
      },
      findAll: function(selector) {
        return (0, find_1.compo_findAll)(this, selector);
      },
      closest: function(selector) {
        return (0, find_1.compo_closest)(this, selector);
      },
      on: function() {
        var x = refs_1._Array_slice.call(arguments);
        if (arguments.length < 3) {
          (0, reporters_1.log_error)('Invalid Arguments Exception @use .on(type,selector,fn)');
          return this;
        }
        if (null != this.$) {
          events_1.Events_.on(this, [ x ]);
        }
        if (null == this.events) {
          this.events = [ x ];
        } else if ((0, is_1.is_Array)(this.events)) {
          this.events.push(x);
        } else {
          this.events = [ x, this.events ];
        }
        return this;
      },
      remove: function() {
        (0, compo_1.compo_cleanElements)(this);
        (0, compo_1.compo_removeElements)(this);
        (0, compo_1.compo_detachChild)(this);
        (0, compo_1.compo_dispose)(this);
        this.$ = null;
        return this;
      },
      slotState: function(slotName, isActive) {
        exports_1.CompoSignals.slot.toggle(this, slotName, isActive);
        return this;
      },
      signalState: function(signalName, isActive) {
        exports_1.CompoSignals.signal.toggle(this, signalName, isActive);
        return this;
      },
      emitOut: function(signalName, a1, a2, a3, a4) {
        exports_1.CompoSignals.signal.emitOut(this, signalName, this, [ a1, a2, a3, a4 ]);
        return this;
      },
      emitIn: function(signalName, a1, a2, a3, a4) {
        var args = [];
        for (var _i = 5; _i < arguments.length; _i++) {
          args[_i - 5] = arguments[_i];
        }
        exports_1.CompoSignals.signal.emitIn(this, signalName, this, [ a1, a2, a3, a4 ]);
        return this;
      },
      $scope: function(path) {
        return (0, exports_3.expression_eval)('$scope?.' + path, null, null, this);
      },
      $eval: function(expr, model, ctx) {
        return (0, exports_3.expression_eval)(expr, model || this.model, ctx, this);
      },
      attach: function(name, fn) {
        (0, compo_1.compo_attach)(this, name, fn);
      },
      serializeState: function() {
        if (this.scope) {
          return {
            scope: this.scope
          };
        }
      },
      deserializeState: function(bundle) {
        if (null != bundle && null != bundle.scope) {
          this.scope = (0, obj_1.obj_extend)(this.scope, bundle.scope);
        }
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_CompoProto === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_CompoProto) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_CompoProto, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_CompoProto = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_pipes;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_pipes ? _ref_mask_projects_mask_compo_src_compo_pipes : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Pipes = exports.PipeCtor = exports.Pipe = void 0;
    var refs_1 = _ref_utils_src_refs;
    var exports_1 = _ref_mask_src_custom_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var dom_1 = _ref_mask_projects_mask_compo_src_util_dom;
    var compo_1 = _ref_mask_projects_mask_compo_src_util_compo;
    var _collection = {};
    (0, exports_1.customAttr_register)('x-pipe-signal', 'client', function(node, attrValue, model, ctx, element, ctr) {
      var arr = attrValue.split(';'), imax = arr.length, i = -1;
      while (++i < imax) {
        x = arr[i].trim();
        if ('' === x) {
          continue;
        }
        var x, i_colon = x.indexOf(':'), event = x.substring(0, i_colon), i_colon = x.substring(i_colon + 1).trim(), dot = i_colon.indexOf('.');
        if (-1 === dot) {
          (0, reporters_1.log_error)('Pipe-slot is invalid: {0} Usage e.g. "click: pipeName.pipeSignal"', x);
          return;
        }
        x = i_colon.substring(0, dot);
        i_colon = i_colon.substring(++dot);
        // if DEBUG
        !event && (0, reporters_1.log_error)('Pipe-slot is invalid. Event type is not set', attrValue);
        // endif
        (0, dom_1.dom_addEventListener)(element, event, _createListener(x, i_colon));
      }
    });
    function _createListener(pipe, signal) {
      return function(event) {
        new Pipe(pipe).emit(signal, event);
      };
    }
    function pipe_attach(pipeName, ctr) {
      if (null == ctr.pipes[pipeName]) {
        (0, reporters_1.log_error)('Controller has no pipes to be added to collection', pipeName, ctr);
        return;
      }
      if (null == _collection[pipeName]) {
        _collection[pipeName] = [];
      }
      _collection[pipeName].push(ctr);
    }
    function pipe_detach(pipeName, ctr) {
      var pipe = _collection[pipeName], i = pipe.length;
      while (--i > -1) {
        if (pipe[i] === ctr) {
          pipe.splice(i, 1);
        }
      }
    }
    function _removeController(ctr) {
      var pipes = ctr.pipes;
      for (var key in pipes) {
        pipe_detach(key, ctr);
      }
    }
    function _removeControllerDelegate(ctr) {
      return function() {
        _removeController(ctr);
        ctr = null;
      };
    }
    function _addController(ctr) {
      var pipes = ctr.pipes;
      // if DEBUG
      if (null == pipes) {
        (0, reporters_1.log_error)('Controller has no pipes', ctr);
        return;
      }
      // endif
      for (var key in pipes) {
        pipe_attach(key, ctr);
      }
      (0, compo_1.compo_attachDisposer)(ctr, _removeControllerDelegate(ctr));
    }
    var Pipe = /** @class */ function() {
      function Pipe(name) {
        this.name = name;
      }
      Pipe.prototype.emit = function(signal, a, b, c) {
        var controllers = _collection[this.name], name = this.name, args = refs_1._Array_slice.call(arguments, 1);
        if (null == controllers) {
          //if DEBUG
          (0, reporters_1.log_warn)('Pipe.emit: No signals were bound to:', name);
          //endif
          return;
        }
        var i = controllers.length, called = false;
        while (-1 !== --i) {
          var ctr = controllers[i];
          var slots = ctr.pipes[name];
          if (null == slots) {
            continue;
          }
          slots = slots[signal];
          if (null != slots) {
            slots.apply(ctr, args);
            called = true;
          }
        }
        // if DEBUG
        if (false === called) {
          (0, reporters_1.log_warn)('Pipe `%s` has not slots for `%s`', name, signal);
          // endif
        }
      };
      return Pipe;
    }();
    exports.Pipe = Pipe;
    function PipeCtor(name) {
      return new Pipe(name);
    }
    exports.PipeCtor = PipeCtor;
    PipeCtor.addController = _addController;
    PipeCtor.removeController = _removeController;
    exports.Pipes = {
      addController: _addController,
      removeController: _removeController,
      pipe: PipeCtor
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_pipes === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_pipes) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_pipes, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_pipes = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_compo_create;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_compo_create ? _ref_mask_projects_mask_compo_src_util_compo_create : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.compo_baseConstructor = exports.compo_prepairProperties = void 0;
    var obj_1 = _ref_utils_src_obj;
    var scope_vars_1 = _ref_mask_projects_mask_compo_src_scope_vars;
    var compo_meta_1 = _ref_mask_projects_mask_compo_src_util_compo_meta;
    var pipes_1 = _ref_mask_projects_mask_compo_src_compo_pipes;
    // export function compo_create(arguments_: any[]) {
    //     var argLength = arguments_.length,
    //         Proto = arguments_[argLength - 1],
    //         Ctor,
    //         hasBase;
    //     if (argLength > 1)
    //         hasBase = compo_inherit(
    //             Proto,
    //             _Array_slice.call(arguments_, 0, argLength - 1)
    //         );
    //     if (Proto == null) Proto = {};
    //     var include = _resolve_External('include');
    //     if (include != null) Proto.__resource = include.url;
    //     compo_prepairProperties(Proto);
    //     Ctor = Proto.hasOwnProperty('constructor') ? Proto.constructor : null;
    //     Ctor = compo_createConstructor(Ctor, Proto, hasBase);
    //     obj_extendDefaults(Proto, CompoProto);
    //     Ctor.prototype = Proto;
    //     Proto = null;
    //     return Ctor;
    // }
    function compo_prepairProperties(Proto) {
      for (var key in Proto.attr) {
        Proto.attr[key] = (0, scope_vars_1._mask_ensureTmplFn)(Proto.attr[key]);
      }
      var slots = Proto.slots;
      for (var key in slots) {
        if ('string' === typeof slots[key]) {
          slots[key] = Proto[slots[key]];
        }
      }
      (0, compo_meta_1.compo_meta_prepairAttributesHandler)(Proto);
      (0, compo_meta_1.compo_meta_prepairArgumentsHandler)(Proto);
    }
    exports.compo_prepairProperties = compo_prepairProperties;
    // export function compo_createConstructor(Ctor, proto, hasBaseAlready) {
    //     return function CompoBase(node, model, ctx, container, ctr) {
    //         if (Ctor != null) {
    //             var overriden = Ctor.call(this, node, model, ctx, container, ctr);
    //             if (overriden != null) return overriden;
    //         }
    //         if (hasBaseAlready === true) {
    //             return;
    //         }
    //         if (this.compos != null) {
    //             this.compos = obj_create(this.compos);
    //         }
    //         if (this.pipes != null) {
    //             Pipes.addController(this);
    //         }
    //         if (this.attr != null) {
    //             this.attr = obj_create(this.attr);
    //         }
    //         if (this.scope != null) {
    //             this.scope = obj_create(this.scope);
    //         }
    //     };
    // }
    function compo_baseConstructor() {
      if (true === this.__constructed) {
        return;
      }
      this.__constructed = true;
      if (null != this.compos) {
        this.compos = (0, obj_1.obj_create)(this.compos);
      }
      if (null != this.pipes) {
        pipes_1.Pipes.addController(this);
      }
      if (null != this.attr) {
        this.attr = (0, obj_1.obj_create)(this.attr);
      }
      if (null != this.scope) {
        this.scope = (0, obj_1.obj_create)(this.scope);
      }
    }
    exports.compo_baseConstructor = compo_baseConstructor;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_compo_create === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_compo_create) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_compo_create, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_compo_create = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_DomLite;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_DomLite ? _ref_mask_projects_mask_compo_src_DomLite : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.DomLite = void 0;
    var is_1 = _ref_utils_src_is;
    var refs_1 = _ref_utils_src_refs;
    var reporters_1 = _ref_mask_src_util_reporters;
    var scope_vars_1 = _ref_mask_projects_mask_compo_src_scope_vars;
    var jCompo_1 = _ref_mask_projects_mask_compo_src_jcompo_jCompo;
    (function(document) {
      if (is_1.is_NODE) {
        return;
      }
      exports.DomLite = function(mix) {
        if (this instanceof exports.DomLite === false) {
          return new exports.DomLite(mix);
        }
        if ('string' === typeof mix) {
          mix = document.querySelectorAll(mix);
        }
        return this.add(mix);
      };
      if (null == scope_vars_1.domLib) {
        (0, scope_vars_1.setDomLib)(exports.DomLite);
      }
      var Proto = exports.DomLite.fn = {
        constructor: exports.DomLite,
        length: 0,
        add: function(mix) {
          if (null == mix) {
            return this;
          }
          if (true === (0, is_1.is_Array)(mix)) {
            return each(mix, this.add, this);
          }
          var type = mix.nodeType;
          if (11 /* Node.DOCUMENT_FRAGMENT_NODE */ === type) {
            return each(mix.childNodes, this.add, this);
          }
          if (null == type) {
            if ('number' === typeof mix.length) {
              return each(mix, this.add, this);
            }
            (0, reporters_1.log_warn)('Uknown domlite object');
            return this;
          }
          this[this.length++] = mix;
          return this;
        },
        on: function() {
          return binder.call(this, on, delegate, arguments);
        },
        off: function() {
          return binder.call(this, off, undelegate, arguments);
        },
        find: function(sel) {
          return each(this, function(node) {
            this.add(_$$.call(node, sel));
          }, new exports.DomLite());
        },
        filter: function(sel) {
          return each(this, function(node, index) {
            true === _is(node, sel) && this.add(node);
          }, new exports.DomLite());
        },
        parent: function() {
          var x = this[0];
          return new exports.DomLite(x && x.parentNode);
        },
        children: function(sel) {
          var set = each(this, function(node) {
            this.add(node.childNodes);
          }, new exports.DomLite());
          return null == sel ? set : set.filter(sel);
        },
        closest: function(selector) {
          var x = this[0], dom = new exports.DomLite();
          while (null != x && null != x.parentNode) {
            x = x.parentNode;
            if (_is(x, selector)) {
              return dom.add(x);
            }
          }
          return dom;
        },
        next: function(selector) {
          var x = this[0], dom = new exports.DomLite();
          while (null != x && null != x.nextElementSibling) {
            x = x.nextElementSibling;
            if (null == selector) {
              return dom.add(x);
            }
            if (_is(x, selector)) {
              return dom.add(x);
            }
          }
          return dom;
        },
        remove: function() {
          return each(this, function(x) {
            x.parentNode.removeChild(x);
          });
        },
        text: function(mix) {
          if (0 === arguments.length) {
            return aggr('', this, function(txt, x) {
              return txt + x.textContent;
            });
          }
          return each(this, function(x) {
            x.textContent = mix;
          });
        },
        html: function(mix) {
          if (0 === arguments.length) {
            return aggr('', this, function(txt, x) {
              return txt + x.innerHTML;
            });
          }
          return each(this, function(x) {
            x.innerHTML = mix;
          });
        },
        val: function(mix) {
          if (0 === arguments.length) {
            return 0 === this.length ? null : this[0].value;
          }
          if (0 !== this.length) {
            this[0].value = mix;
          }
          return this;
        },
        focus: function() {
          return each(this, function(x) {
            x.focus && x.focus();
          });
        },
        get: function(i) {
          return this[i];
        },
        toArray: function() {
          return Array.from(this);
        }
      };
      (function() {
        each([ 'show', 'hide' ], function(method) {
          Proto[method] = function() {
            return each(this, function(x) {
              x.style.display = 'hide' === method ? 'none' : '';
            });
          };
        });
      })();
      (function() {
        var Manip = {
          append: function(node, el) {
            after_(node, node.lastChild, el);
          },
          prepend: function(node, el) {
            before_(node, node.firstChild, el);
          },
          after: function(node, el) {
            after_(node.parentNode, node, el);
          },
          before: function(node, el) {
            before_(node.parentNode, node, el);
          }
        };
        each([ 'append', 'prepend', 'before', 'after' ], function(method) {
          var fn = Manip[method];
          Proto[method] = function(mix) {
            var isArray = (0, is_1.is_Array)(mix);
            return each(this, function(node) {
              if (isArray) {
                each(mix, function(el) {
                  fn(node, el);
                });
                return;
              }
              fn(node, mix);
            });
          };
        });
        function before_(parent, anchor, el) {
          if (null == parent || null == el) {
            return;
          }
          parent.insertBefore(el, anchor);
        }
        function after_(parent, anchor, el) {
          anchor = null != anchor ? anchor.nextSibling : null;
          before_(parent, anchor, el);
        }
      })();
      function each(arr, fn, ctx) {
        if (null == arr) {
          return ctx || arr;
        }
        var imax = arr.length, i = -1;
        while (++i < imax) {
          fn.call(ctx || arr, arr[i], i);
        }
        return ctx || arr;
      }
      function aggr(seed, arr, fn, ctx) {
        each(arr, function(x, i) {
          seed = fn.call(ctx || arr, seed, arr[i], i);
        });
        return seed;
      }
      function indexOf(arr, fn, ctx) {
        if (null == arr) {
          return -1;
        }
        var imax = arr.length, i = -1;
        while (++i < imax) {
          if (true === fn.call(ctx || arr, arr[i], i)) {
            return i;
          }
        }
        return -1;
      }
      var docEl = document.documentElement;
      var _$$ = docEl.querySelectorAll;
      var _is = function() {
        var matchesSelector = docEl.webkitMatchesSelector || docEl.mozMatchesSelector || docEl.msMatchesSelector || docEl.oMatchesSelector || docEl.matchesSelector;
        return function(el, selector) {
          return null == el || 1 !== el.nodeType ? false : matchesSelector.call(el, selector);
        };
      }();
      /* Events */
      var binder, on, off, delegate, undelegate;
      (function() {
        binder = function(bind, bindSelector, args) {
          var fn, length = args.length;
          if (2 === length) {
            fn = bind;
          }
          if (3 === length) {
            fn = bindSelector;
          }
          if (null != fn) {
            return each(this, function(node) {
              fn.apply((0, exports.DomLite)(node), args);
            });
          }
          (0, reporters_1.log_error)('`DomLite.on|off` - invalid arguments count');
          return this;
        };
        on = function(type, fn) {
          return run(this, _addEvent, type, fn);
        };
        off = function(type, fn) {
          return run(this, _remEvent, type, fn);
        };
        delegate = function(type, selector, fn) {
          function guard(event) {
            var el = event.target, current = event.currentTarget;
            if (current === el) {
              return;
            }
            while (null != el && el !== current) {
              if (_is(el, selector)) {
                fn(event);
                return;
              }
              el = el.parentNode;
            }
          }
          (fn._guards || (fn._guards = [])).push(guard);
          return on.call(this, type, guard);
        };
        undelegate = function(type, selector, fn) {
          return each(fn._quards, function(guard) {
            off.call(this, type, guard);
          }, this);
        };
        function run(set, handler, type, fn) {
          return each(set, function(node) {
            handler.call(node, type, fn, false);
          });
        }
        var _addEvent = docEl.addEventListener, _remEvent = docEl.removeEventListener;
      })();
      /* class handler */
      (function() {
        var isClassListSupported = null != docEl.classList;
        var hasClass = true === isClassListSupported ? function(node, klass) {
          return node.classList.contains(klass);
        } : function(node, klass) {
          return -1 !== (' ' + node.className + ' ').indexOf(' ' + klass + ' ');
        };
        Proto['hasClass'] = function(klass) {
          return -1 !== indexOf(this, function(node) {
            return hasClass(node, klass);
          });
        };
        var Shim;
        (function() {
          Shim = {
            add: function(node, klass) {
              if (false === hasClass(node, klass)) {
                add(node, klass);
              }
            },
            remove: function(node, klass) {
              if (true === hasClass(node, klass)) {
                remove(node, klass);
              }
            },
            toggle: function(node, klass) {
              var fn = true === hasClass(node, klass) ? remove : add;
              fn(node, klass);
            }
          };
          function add(node, klass) {
            node.className += ' ' + klass;
          }
          function remove(node, klass) {
            node.className = (' ' + node.className + ' ').replace(' ' + klass + ' ', ' ');
          }
        })();
        each([ 'add', 'remove', 'toggle' ], function(method) {
          var mutatorFn = false === isClassListSupported ? Shim[method] : function(node, klass) {
            node = node.classList;
            node[method].call(node, klass);
          };
          Proto[method + 'Class'] = function(klass) {
            return each(this, function(node) {
              mutatorFn(node, klass);
            });
          };
        });
      })();
      // Events
      (function() {
        var createEvent = function(type) {
          var event = document.createEvent('Event');
          event.initEvent(type, true, true);
          return event;
        };
        var create = function(type, data) {
          if (null == data) {
            return createEvent(type);
          }
          var event = document.createEvent('CustomEvent');
          event.initCustomEvent(type, true, true, data);
          return event;
        };
        var dispatch = function(node, event) {
          node.dispatchEvent(event);
        };
        Proto['trigger'] = function(type, data) {
          var event = create(type, data);
          return each(this, function(node) {
            dispatch(node, event);
          });
        };
      })();
      // Attributes
      (function() {
        Proto['attr'] = function(name, val) {
          if (void 0 === val) {
            return this[0] && this[0].getAttribute(name);
          }
          return each(this, function(node) {
            node.setAttribute(name, val);
          });
        };
        Proto['removeAttr'] = function(name) {
          return each(this, function(node) {
            node.removeAttribute(name);
          });
        };
      })();
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(Proto, Array.prototype);
      } else if (Proto.__proto__) {
        Proto.__proto__ = Array.prototype;
      }
      exports.DomLite.prototype = Proto;
      (0, jCompo_1.domLib_initialize)();
    })(refs_1._document);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_DomLite === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_DomLite) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_DomLite, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_DomLite = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_util_compo_ceateExt;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_util_compo_ceateExt ? _ref_mask_projects_mask_compo_src_util_compo_ceateExt : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.compo_prepairProperties = exports.compo_createExt = void 0;
    var obj_1 = _ref_utils_src_obj;
    var is_1 = _ref_utils_src_is;
    var fn_1 = _ref_utils_src_fn;
    var reporters_1 = _ref_mask_src_util_reporters;
    var env_class_1 = _ref_mask_src_util_env_class;
    var merge_1 = _ref_mask_src_feature_merge;
    var exports_1 = _ref_mask_src_custom_exports;
    var scope_vars_1 = _ref_mask_projects_mask_compo_src_scope_vars;
    var CompoProto_1 = _ref_mask_projects_mask_compo_src_compo_CompoProto;
    var compo_create_1 = _ref_mask_projects_mask_compo_src_util_compo_create;
    var compo_meta_1 = _ref_mask_projects_mask_compo_src_util_compo_meta;
    var protos = [];
    var getProtoOf = Object.getPrototypeOf;
    function compo_createExt(Proto, Extends) {
      if (null == Extends || 0 === Extends.length) {
        return compo_createSingle(Proto);
      }
      var classes = [];
      for (var i = 0; i < Extends.length; i++) {
        if ('string' === typeof Extends[i]) {
          var x = Extends[i] = (0, exports_1.customTag_get)(Extends[i]);
          if (null != x && 'Resolver' === x.name) {
            (0, reporters_1.log_error)('Inheritance error: private component');
            Extends[i] = {};
          }
        }
        if ('function' === typeof Extends[i]) {
          classes.push(Extends[i]);
        }
      }
      var ProtoCtor = Proto.hasOwnProperty('constructor') ? Proto.constructor : null;
      var Base = 0 === classes.length ? null : classes.pop();
      var beforeFn = compo_create_1.compo_baseConstructor;
      if (null == Base) {
        Base = beforeFn;
        beforeFn = null;
      }
      var Ctor = (0, env_class_1.env_class_wrapCtors)(Base, beforeFn, ProtoCtor, classes);
      var BaseProto = Base.prototype;
      protos.length = 0;
      for (i = 0; i < Extends.length; i++) {
        x = Extends[i];
        if (x === Base) {
          continue;
        }
        if ('function' === typeof x) {
          var proto = null == getProtoOf ? x.prototype : fillProtoHash(x.prototype, (0, 
          obj_1.obj_create)(null));
          protos.push(proto);
          continue;
        }
        protos.push(x);
      }
      var inheritMethods = (0, obj_1.obj_create)(null);
      inheritBase_(Proto, BaseProto, inheritMethods);
      // merge prototype
      for (i = protos.length - 1; i > -1; i--) {
        var source = protos[i];
        inheritMiddProto_(Proto, BaseProto, source, inheritMethods);
      }
      // inherit methods
      for (var key in inheritMethods) {
        var outerFn = null;
        var l = protos.length;
        for (i = 0; i < l + 2; i++) {
          x = i < l ? protos[i] : null;
          if (i === l) {
            x = BaseProto;
          }
          if (i === l + 1) {
            x = Proto;
          }
          var fn = x[key];
          if (null == fn) {
            continue;
          }
          if (null == outerFn) {
            outerFn = fn;
            continue;
          }
          outerFn = wrapInheritedFn(fn, outerFn);
        }
        Proto[key] = outerFn;
      }
      // merge templates
      var template = null;
      for (i = protos.length - 1; i > -1; i--) {
        template = mergeNodes(protos[i], template);
      }
      template = mergeNodes(BaseProto, template);
      template = mergeNodes(Proto, template);
      if (null != template) {
        Proto.template = template;
        Proto.nodes = null;
        Ctor.prototype.nodes = null;
      }
      // do we need this?
      beforeFn = (0, scope_vars_1._resolve_External)('include');
      if (null != beforeFn) {
        Proto.__resource = beforeFn.url;
      }
      compo_prepairProperties(Proto);
      ProtoCtor = Proto.meta;
      if (null == ProtoCtor) {
        ProtoCtor = Proto.meta = {};
      }
      if (null == ProtoCtor.template) {
        ProtoCtor.template = 'merge';
      }
      for (var key in Proto) {
        if ('constructor' === key) {
          continue;
        }
        var val = Proto[key];
        if (null != val) {
          Ctor.prototype[key] = Proto[key];
        }
      }
      for (var key in CompoProto_1.CompoProto) {
        if (null == Ctor.prototype[key]) {
          Ctor.prototype[key] = CompoProto_1.CompoProto[key];
        }
      }
      //obj_extendDefaults(Ctor.prototype, CompoProto);
      return Ctor;
    }
    exports.compo_createExt = compo_createExt;
    function compo_createSingle(Proto) {
      var ProtoCtor = Proto.hasOwnProperty('constructor') ? Proto.constructor : null;
      var Ctor = function CompoBase() {
        compo_create_1.compo_baseConstructor.apply(this, arguments);
        if (ProtoCtor) {
          ProtoCtor.apply(this, arguments);
        }
      };
      var include = (0, scope_vars_1._resolve_External)('include');
      if (null != include) {
        Proto.__resource = include.url;
      }
      compo_prepairProperties(Proto);
      Ctor.prototype = Proto;
      Ctor.prototype.constructor = Ctor;
      (0, obj_1.obj_extendDefaults)(Ctor.prototype, CompoProto_1.CompoProto);
      return Ctor;
    }
    function inheritMiddProto_(Proto, BaseProto, source, inheritMethods) {
      for (var key in source) {
        if ('constructor' === key || 'template' === key || 'nodes' === key) {
          continue;
        }
        var targetVal = Proto[key];
        if (void 0 === targetVal) {
          targetVal = BaseProto[key];
        }
        var sourceVal = source[key];
        if (null == targetVal) {
          Proto[key] = sourceVal;
          continue;
        }
        if ('function' === typeof targetVal) {
          Proto.super = null;
        }
        key = mergeProperty(Proto, key, targetVal, sourceVal, inheritMethods);
        if ('function' === key) {
          Proto.super = null;
        }
      }
    }
    function inheritBase_(Proto, BaseProto, inheritMethods) {
      for (var key in Proto) {
        if ('constructor' === key || 'template' === key || 'nodes' === key) {
          continue;
        }
        var baseProtoVal = BaseProto[key];
        if (null == baseProtoVal) {
          continue;
        }
        var protoVal = Proto[key];
        if (null == protoVal) {
          // Keep fields in base proto if not overriden
          continue;
        }
        key = mergeProperty(Proto, key, protoVal, baseProtoVal, inheritMethods);
        if ('function' === key) {
          Proto.super = null;
        }
      }
    }
    function mergeProperty(target, key, targetVal, sourceVal, inheritMethods) {
      var type = typeof sourceVal;
      if ('function' === type) {
        switch (key) {
         case 'renderStart':
         case 'renderEnd':
         case 'emitIn':
         case 'emitOut':
         case 'components':
         case 'nodes':
         case 'template':
         case 'find':
         case 'closest':
         case 'on':
         case 'remove':
         case 'slotState':
         case 'signalState':
         case 'append':
         case 'appendTo':
          // is sealed
          return;

         case 'serializeState':
         case 'deserializeState':
          if (sourceVal !== CompoProto_1.CompoProto[key]) {
            target[key] = sourceVal;
          }
          return;
        }
        if ('onRenderStart' === key || 'onRenderEnd' === key) {
          target[key] = wrapAutocallFn(targetVal, sourceVal);
          return;
        }
        inheritMethods[key] = 1;
        return type;
      }
      if ('object' !== type) {
        return null;
      }
      switch (key) {
       case 'slots':
       case 'pipes':
       case 'events':
       case 'attr':
        inheritInternals_(targetVal, sourceVal, key);
        return null;
      }
      defaults_(targetVal, sourceVal);
      return null;
    }
    function inheritInternals_(target, source, name) {
      if (null == target || null == source) {
        return;
      }
      for (var key in source) {
        var sourceVal = source[key];
        var targetVal = target[key];
        if (null == targetVal) {
          target[key] = sourceVal;
          continue;
        }
        if ('pipes' === name) {
          inheritInternals_(target[key], sourceVal, 'pipe');
          continue;
        }
        targetVal = typeof sourceVal;
        if ('function' === targetVal) {
          var fnAutoCall = false;
          if ('slots' === name || 'events' === name || 'pipe' === name) {
            fnAutoCall = true;
          }
          fnAutoCall = fnAutoCall ? wrapAutocallFn : wrapInheritedFn;
          target[key] = fnAutoCall(target[key], sourceVal);
          continue;
        }
        if ('object' !== targetVal) {
          continue;
        }
        defaults_(target[key], sourceVal);
      }
    }
    function defaults_(target, source) {
      var targetV, sourceV;
      for (var key in source) {
        targetV = target[key];
        sourceV = source[key];
        if (null == targetV) {
          target[key] = sourceV;
          continue;
        }
        if ((0, is_1.is_rawObject)(targetV) && (0, is_1.is_rawObject)(sourceV)) {
          defaults_(targetV, sourceV);
          continue;
        }
      }
    }
    function fillProtoHash(proto, hash) {
      if (null == getProtoOf) {
        return proto;
      }
      var keys = Object.getOwnPropertyNames(proto);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (null != hash[key]) {
          continue;
        }
        hash[key] = proto[key];
      }
      var next = getProtoOf(proto);
      if (null == next || next === Object.prototype) {
        return hash;
      }
      return fillProtoHash(next, hash);
    }
    function wrapInheritedFn(outerFn, innerFn) {
      return function() {
        this.super = innerFn;
        var x = (0, fn_1.fn_apply)(outerFn, this, arguments);
        this.super = null;
        return x;
      };
    }
    function wrapAutocallFn(outerFn, innerFn) {
      if (null == outerFn) {
        return innerFn;
      }
      return function() {
        var x = (0, fn_1.fn_apply)(innerFn, this, arguments);
        var y = (0, fn_1.fn_apply)(outerFn, this, arguments);
        return void 0 === y ? x : y;
      };
    }
    function mergeNodes(target, baseTemplate) {
      var targetNodes = null == target ? null : target.template || target.nodes;
      return null == targetNodes || null == baseTemplate ? targetNodes || baseTemplate : (0, 
      merge_1.mask_merge)(baseTemplate, targetNodes, target, {
        extending: true
      });
    }
    function compo_prepairProperties(Proto) {
      for (var key in Proto.attr) {
        Proto.attr[key] = (0, scope_vars_1._mask_ensureTmplFn)(Proto.attr[key]);
      }
      var slots = Proto.slots;
      for (var key in slots) {
        if ('string' === typeof slots[key]) {
          slots[key] = Proto[slots[key]];
        }
      }
      (0, compo_meta_1.compo_meta_prepairAttributesHandler)(Proto);
      (0, compo_meta_1.compo_meta_prepairArgumentsHandler)(Proto);
    }
    exports.compo_prepairProperties = compo_prepairProperties;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_util_compo_ceateExt === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_util_compo_ceateExt) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_util_compo_ceateExt, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_util_compo_ceateExt = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_CompoStaticsGc;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_CompoStaticsGc ? _ref_mask_projects_mask_compo_src_compo_CompoStaticsGc : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Gc = void 0;
    var compo_1 = _ref_mask_projects_mask_compo_src_util_compo;
    (function(Gc) {
      function using(compo, x) {
        if (null == x.dispose) {
          console.warn('Expects `disposable` instance');
          return x;
        }
        (0, compo_1.compo_attach)(compo, 'dispose', function() {
          x && x.dispose();
          x = null;
        });
      }
      Gc.using = using;
      function on(compo, emitter) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }
        var fn = emitter.on || emitter.addListener || emitter.addEventListener || emitter.bind;
        var fin = emitter.off || emitter.removeListener || emitter.removeEventListener || emitter.unbind;
        if (null == fn || null === fin) {
          console.warn('Expects `emitter` instance with any of the methods: on, addListener, addEventListener, bind');
          return;
        }
        fn.apply(emitter, args);
        (0, compo_1.compo_attach)(compo, 'dispose', function() {
          emitter && fin.apply(emitter, args);
          emitter = null;
        });
      }
      Gc.on = on;
      function onMany(compo, emitter, events) {
        var fn = emitter.on || emitter.addListener || emitter.addEventListener || emitter.bind;
        var fin = emitter.off || emitter.removeListener || emitter.removeEventListener || emitter.unbind;
        if (null == fn || null === fin) {
          console.warn('Expects `emitter` instance with any of the methods: on, addListener, addEventListener, bind');
          return;
        }
        for (var key in events) {
          var eventFn = events[key];
          fn.call(emitter, key, eventFn);
        }
        (0, compo_1.compo_attach)(compo, 'dispose', function() {
          for (var key in events) {
            var eventFn = events[key];
            emitter && fin.call(emitter, key, eventFn);
          }
          emitter = null;
        });
      }
      Gc.onMany = onMany;
      function subscribe(compo, observable) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }
        if (null == observable.subscribe) {
          console.warn('Expects `IObservable` instance with subscribe/unsubscribe methods');
          return;
        }
        var result = observable.subscribe.apply(observable, args);
        if (null == observable.unsubscribe && (null == result || null == result.dispose)) {
          throw Error('Invalid subscription: don`t know how to unsubscribe');
        }
        (0, compo_1.compo_attach)(compo, 'dispose', function() {
          if (null == observable) {
            return;
          }
          if (result && result.dispose) {
            result.dispose();
            result = null;
            observable = null;
            return;
          }
          if (observable.unsubscribe) {
            observable.unsubscribe(args[0]);
            observable = null;
            result = null;
          }
        });
      }
      Gc.subscribe = subscribe;
    })(exports.Gc || (exports.Gc = {}));
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_CompoStaticsGc === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_CompoStaticsGc) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_CompoStaticsGc, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_CompoStaticsGc = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_CompoStatics;
  (function() {
    // ensure AMD is not active for the model, so that any UMD exports as commonjs
    var define = null;
    var exports = null != _ref_mask_projects_mask_compo_src_compo_CompoStatics ? _ref_mask_projects_mask_compo_src_compo_CompoStatics : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.CompoStatics = void 0;
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_src_dom_exports;
    var exports_3 = _ref_mask_src_renderer_exports;
    var compo_1 = _ref_mask_projects_mask_compo_src_util_compo;
    var dom_1 = _ref_mask_projects_mask_compo_src_util_dom;
    var exports_4 = _ref_mask_projects_mask_compo_src_signal_exports;
    var DomLite_1 = _ref_mask_projects_mask_compo_src_DomLite;
    var compo_ceateExt_1 = _ref_mask_projects_mask_compo_src_util_compo_ceateExt;
    var async_1 = _ref_mask_projects_mask_compo_src_compo_async;
    var find_1 = _ref_mask_projects_mask_compo_src_compo_find;
    var anchor_1 = _ref_mask_projects_mask_compo_src_compo_anchor;
    var CompoConfig_1 = _ref_mask_projects_mask_compo_src_compo_CompoConfig;
    var pipes_1 = _ref_mask_projects_mask_compo_src_compo_pipes;
    var Component_1 = _ref_mask_projects_mask_compo_src_compo_Component;
    var CompoStaticsGc_1 = _ref_mask_projects_mask_compo_src_compo_CompoStaticsGc;
    exports.CompoStatics = {
      create: function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var Base = args.pop();
        return (0, compo_ceateExt_1.compo_createExt)(Base, args);
      },
      createExt: function(Proto, args) {
        return (0, compo_ceateExt_1.compo_createExt)(Proto, args);
      },
      createClass: function() {
        throw Error('@Obsolete: createClass');
      },
      initialize: function(mix, model, ctx, container, parent) {
        if (null == mix) {
          throw Error('Undefined is not a component');
        }
        if (null == container) {
          if (ctx && null != ctx.nodeType) {
            container = ctx;
            ctx = null;
          } else if (model && null != model.nodeType) {
            container = model;
            model = null;
          }
        }
        var node;
        function createNode(compo) {
          node = {
            controller: compo,
            type: exports_2.Dom.COMPONENT
          };
        }
        if ('string' === typeof mix) {
          if (/^[^\s]+$/.test(mix)) {
            var compo = (0, exports_1.customTag_get)(mix);
            if (null == compo) {
              throw Error('Component not found: ' + mix);
            }
            createNode(compo);
          } else {
            createNode((0, compo_ceateExt_1.compo_createExt)({
              template: mix
            }));
          }
        } else if ('function' === typeof mix) {
          createNode(mix);
        }
        if (null == parent && null != container) {
          parent = anchor_1.Anchor.resolveCompo(container);
        }
        if (null == parent) {
          parent = new Component_1.Component();
        }
        compo = (0, exports_3.renderer_render)(node, model, ctx, null, parent), 
        mix = parent.components[parent.components.length - 1];
        if (null != container) {
          container.appendChild(compo);
          exports_4.CompoSignals.signal.emitIn(mix, 'domInsert');
        }
        return mix;
      },
      find: find_1.compo_find,
      findAll: find_1.compo_findAll,
      closest: find_1.compo_closest,
      children: find_1.compo_children,
      child: find_1.compo_child,
      dispose: compo_1.compo_dispose,
      ensureTemplate: compo_1.compo_ensureTemplate,
      attachDisposer: compo_1.compo_attachDisposer,
      attach: compo_1.compo_attach,
      gc: CompoStaticsGc_1.Gc,
      element: {
        getCompo: function(el) {
          return anchor_1.Anchor.resolveCompo(el, true);
        },
        getModel: function(el) {
          var compo = anchor_1.Anchor.resolveCompo(el, true);
          if (null == compo) {
            return null;
          }
          var model = compo.model;
          while (null == model && null != compo.parent) {
            compo = compo.parent;
            model = compo.model;
          }
          return model;
        }
      },
      config: CompoConfig_1.CompoConfig,
      pipe: pipes_1.Pipes.pipe,
      resource: function(compo) {
        var owner = compo;
        while (null != owner) {
          if (owner.resource) {
            return owner.resource;
          }
          owner = owner.parent;
        }
        return include.instance();
      },
      plugin: function(source) {
        // if DEBUG
        eval(source);
        // endif
      },
      Dom: {
        addEventListener: dom_1.dom_addEventListener
      },
      signal: exports_4.CompoSignals.signal,
      slot: exports_4.CompoSignals.slot,
      DomLite: DomLite_1.DomLite,
      pause: async_1.CompoStaticsAsync.pause,
      resume: async_1.CompoStaticsAsync.resume,
      await: async_1.CompoStaticsAsync.await
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_CompoStatics === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_CompoStatics) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_CompoStatics, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_CompoStatics = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_deco_component_decorators;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_deco_component_decorators ? _ref_mask_projects_mask_compo_src_deco_component_decorators : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
      if (pack || 2 === arguments.length) {
        for (var ar, i = 0, l = from.length; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) {
              ar = Array.prototype.slice.call(from, 0, i);
            }
            ar[i] = from[i];
          }
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.deco_refQuery = exports.deco_refElement = exports.deco_refCompo = exports.deco_attr = exports.deco_hotkey = exports.deco_event = exports.deco_pipe = exports.deco_slotPrivate = exports.deco_slot = void 0;
    var obj_1 = _ref_utils_src_obj;
    var children_1 = _ref_mask_projects_mask_compo_src_compo_children;
    function deco_slot(mix) {
      return function(target, propertyKey, descriptor) {
        var _a = null !== (_a = target.slots) && void 0 !== _a ? _a : target.slots = {};
        var name = 'string' === typeof mix ? mix : null === mix || void 0 === mix ? void 0 : mix.name;
        var _b = 'string' !== typeof mix ? null !== (_b = null === mix || void 0 === mix ? void 0 : mix.private) && void 0 !== _b ? _b : false : false;
        var viaProperty = null == descriptor;
        var fn = viaProperty ? target[propertyKey] : descriptor.value;
        _a[null !== name && void 0 !== name ? name : propertyKey] = !_b ? fn : function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          fn.call.apply(fn, __spreadArray([ this ], args, false));
          return false;
        };
        return descriptor;
      };
    }
    exports.deco_slot = deco_slot;
    function deco_slotPrivate(name) {
      return deco_slot({
        name: name,
        private: true
      });
    }
    exports.deco_slotPrivate = deco_slotPrivate;
    /** Tip: use constants instead string literals for arguments */
    function deco_pipe(pipeName, signalName) {
      return function(target, propertyKey, descriptor) {
        var _a = null !== (_a = target.pipes) && void 0 !== _a ? _a : target.pipes = {};
        var _b = null !== (_b = _a[pipeName]) && void 0 !== _b ? _b : _a[pipeName] = {};
        _a = null == descriptor;
        _a = _a ? target[propertyKey] : descriptor.value;
        _b[null !== signalName && void 0 !== signalName ? signalName : propertyKey] = _a;
        return descriptor;
      };
    }
    exports.deco_pipe = deco_pipe;
    /**
 * @param selector event or delegated event - "click: .some"
 */
    function deco_event(selector) {
      return function(target, propertyKey, descriptor) {
        var _a = null !== (_a = target.events) && void 0 !== _a ? _a : target.events = {};
        var viaProperty = null == descriptor;
        viaProperty = viaProperty ? target[propertyKey] : descriptor.value;
        _a[selector] = viaProperty;
        return descriptor;
      };
    }
    exports.deco_event = deco_event;
    /**
 * @param selector event or delegated event - "click: .some"
 */
    function deco_hotkey(hotkey) {
      return function(target, propertyKey, descriptor) {
        var _a = null !== (_a = target.hotkeys) && void 0 !== _a ? _a : target.hotkeys = {};
        var viaProperty = null == descriptor;
        viaProperty = viaProperty ? target[propertyKey] : descriptor.value;
        _a[hotkey] = viaProperty;
        return descriptor;
      };
    }
    exports.deco_hotkey = deco_hotkey;
    function deco_attr(opts) {
      return function(target, propertyKey, descriptor) {
        target = ensureMeta(target, 'attributes');
        var name = null === opts || void 0 === opts ? void 0 : opts.name;
        if (null == name) {
          name = propertyKey[0] + propertyKey.substring(1).replace(/[A-Z]/g, function(c) {
            return '_'.concat(c.toLowerCase());
          });
        }
        target[name] = (0, obj_1.obj_extend)(opts, {
          name: propertyKey
        });
      };
    }
    exports.deco_attr = deco_attr;
    function deco_refCompo(selector) {
      return function(target, propertyKey, descriptor) {
        ensureRef(target, propertyKey, selector, 'compos');
      };
    }
    exports.deco_refCompo = deco_refCompo;
    function deco_refElement(selector) {
      return function(target, propertyKey, descriptor) {
        ensureRef(target, propertyKey, selector, 'elements');
      };
    }
    exports.deco_refElement = deco_refElement;
    function deco_refQuery(selector) {
      return function(target, propertyKey, descriptor) {
        ensureRef(target, propertyKey, selector, 'queries');
      };
    }
    exports.deco_refQuery = deco_refQuery;
    function ensureMeta(proto, name) {
      var m = proto.meta;
      if (null == m) {
        m = proto.meta = (proto = {}, proto[name] = {}, proto);
      }
      return null !== (proto = m[name]) && void 0 !== proto ? proto : m[name] = {};
    }
    function ensureRef(proto, key, selector, refName) {
      Object.defineProperty(proto, key, {
        configurable: true,
        enumerable: true,
        get: function() {
          var val = children_1.Children_[refName](this, selector);
          if (null != val) {
            Object.defineProperty(this, key, {
              configurable: true,
              enumerable: true,
              value: val
            });
          }
          return val;
        },
        set: function(val) {
          if (null != val) {
            Object.defineProperty(this, key, {
              value: val
            });
          }
        }
      });
      // let refs = ensureMeta(proto, 'refs');
      // let ref = refs[refName] ?? (refs[refName] = {});
      // ref[key] = selector;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_deco_component_decorators === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_deco_component_decorators) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_deco_component_decorators, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_deco_component_decorators = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_Component;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_Component ? _ref_mask_projects_mask_compo_src_compo_Component : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Component = void 0;
    var class_1 = _ref_utils_src_class;
    var obj_1 = _ref_utils_src_obj;
    var compo_create_1 = _ref_mask_projects_mask_compo_src_util_compo_create;
    var CompoProto_1 = _ref_mask_projects_mask_compo_src_compo_CompoProto;
    var CompoStatics_1 = _ref_mask_projects_mask_compo_src_compo_CompoStatics;
    var exports_1 = _ref_mask_projects_mask_compo_src_signal_exports;
    var component_decorators_1 = _ref_mask_projects_mask_compo_src_deco_component_decorators;
    class_1 = /** @class */ function(_super) {
      __extends(Component, _super);
      function Component() {
        var _this = _super.call(this) || this;
        if (true !== _this.__constructed) {
          _this.__constructed = true;
          (0, compo_create_1.compo_prepairProperties)(_this);
        }
        if (null != _this.pipes) {
          CompoStatics_1.CompoStatics.pipe.addController(_this);
        }
        if (null != _this.compos) {
          _this.compos = (0, obj_1.obj_create)(_this.compos);
        }
        if (null != _this.attr) {
          _this.attr = (0, obj_1.obj_create)(_this.attr);
        }
        if (null != _this.scope) {
          _this.scope = (0, obj_1.obj_create)(_this.scope);
        }
        return _this;
      }
      Component.prototype.emitIn = function(signal) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        exports_1.CompoSignals.signal.emitIn(this, signal, this, args);
        return this;
      };
      Component.prototype.emitOut = function(signal) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        exports_1.CompoSignals.signal.emitOut(this, signal, this, args);
        return this;
      };
      Component.create = CompoStatics_1.CompoStatics.create;
      Component.createExt = CompoStatics_1.CompoStatics.createExt;
      Component.createClass = CompoStatics_1.CompoStatics.createClass;
      Component.initialize = CompoStatics_1.CompoStatics.initialize;
      Component.find = CompoStatics_1.CompoStatics.find;
      Component.findAll = CompoStatics_1.CompoStatics.findAll;
      Component.closest = CompoStatics_1.CompoStatics.closest;
      Component.children = CompoStatics_1.CompoStatics.children;
      Component.child = CompoStatics_1.CompoStatics.child;
      Component.dispose = CompoStatics_1.CompoStatics.dispose;
      Component.ensureTemplate = CompoStatics_1.CompoStatics.ensureTemplate;
      Component.attachDisposer = CompoStatics_1.CompoStatics.attachDisposer;
      Component.attach = CompoStatics_1.CompoStatics.attach;
      Component.gc = CompoStatics_1.CompoStatics.gc;
      Component.element = CompoStatics_1.CompoStatics.element;
      Component.config = CompoStatics_1.CompoStatics.config;
      Component.pipe = CompoStatics_1.CompoStatics.pipe;
      Component.resource = CompoStatics_1.CompoStatics.resource;
      Component.plugin = CompoStatics_1.CompoStatics.plugin;
      Component.Dom = CompoStatics_1.CompoStatics.Dom;
      Component.signal = CompoStatics_1.CompoStatics.signal;
      Component.slot = CompoStatics_1.CompoStatics.slot;
      Component.DomLite = CompoStatics_1.CompoStatics.DomLite;
      Component.pause = CompoStatics_1.CompoStatics.pause;
      Component.resume = CompoStatics_1.CompoStatics.resume;
      Component.await = CompoStatics_1.CompoStatics.await;
      Component.deco = {
        pipe: component_decorators_1.deco_pipe,
        slot: component_decorators_1.deco_slot,
        slotPrivate: component_decorators_1.deco_slotPrivate,
        attr: component_decorators_1.deco_attr,
        event: component_decorators_1.deco_event,
        hotkey: component_decorators_1.deco_hotkey,
        refCompo: component_decorators_1.deco_refCompo,
        refElement: component_decorators_1.deco_refElement,
        refQuery: component_decorators_1.deco_refQuery
      };
      return Component;
    }((0, class_1.class_create)(CompoProto_1.CompoProto));
    exports.Component = class_1;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_Component === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_Component) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_Component, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_Component = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_compo_Compo;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_compo_Compo ? _ref_mask_projects_mask_compo_src_compo_Compo : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Compo = void 0;
    var obj_1 = _ref_utils_src_obj;
    var CompoProto_1 = _ref_mask_projects_mask_compo_src_compo_CompoProto;
    var CompoStatics_1 = _ref_mask_projects_mask_compo_src_compo_CompoStatics;
    var compo_ceateExt_1 = _ref_mask_projects_mask_compo_src_util_compo_ceateExt;
    exports.Compo = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (this instanceof exports.Compo) {
        // used in Class({Base: Compo})
        return void 0;
      }
      var Base = args.pop();
      return (0, compo_ceateExt_1.compo_createExt)(Base, args);
    };
    exports.Compo.prototype = CompoProto_1.CompoProto;
    (0, obj_1.obj_extend)(exports.Compo, CompoStatics_1.CompoStatics);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_compo_Compo === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_compo_Compo) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_compo_Compo, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_compo_Compo = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_compo_src_exports;
  (function() {
    var exports = null != _ref_mask_projects_mask_compo_src_exports ? _ref_mask_projects_mask_compo_src_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.domLib = exports.Compo = exports.Component = exports.CompoProto = void 0;
    var CompoProto_1 = _ref_mask_projects_mask_compo_src_compo_CompoProto;
    Object.defineProperty(exports, 'CompoProto', {
      enumerable: true,
      get: function() {
        return CompoProto_1.CompoProto;
      }
    });
    var Component_1 = _ref_mask_projects_mask_compo_src_compo_Component;
    Object.defineProperty(exports, 'Component', {
      enumerable: true,
      get: function() {
        return Component_1.Component;
      }
    });
    var Compo_1 = _ref_mask_projects_mask_compo_src_compo_Compo;
    Object.defineProperty(exports, 'Compo', {
      enumerable: true,
      get: function() {
        return Compo_1.Compo;
      }
    });
    var scope_vars_1 = _ref_mask_projects_mask_compo_src_scope_vars;
    Object.defineProperty(exports, 'domLib', {
      enumerable: true,
      get: function() {
        return scope_vars_1.domLib;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_compo_src_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_compo_src_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_compo_src_exports, module.exports);
    } else {
      _ref_mask_projects_mask_compo_src_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_handlers_debug;
  (function() {
    var exports = null != _ref_mask_src_handlers_debug ? _ref_mask_src_handlers_debug : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_src_custom_exports;
    exports.custom_Statements['log'] = {
      render: function(node, model, ctx, container, controller) {
        node = (0, exports_2.expression_evalStatements)(node.expression, model, ctx, controller);
        node.unshift('Mask::Log');
        console.log.apply(console, node);
      }
    };
    (0, exports_3.customTag_register)('debugger', {
      render: function(model, ctx, container, compo) {
        debugger;
      }
    });
    (0, exports_3.customTag_register)(':utest', /** @class */ function() {
      function class_1() {}
      class_1.prototype.render = function(model, ctx, container) {
        if (container.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
          container = container.childNodes;
        }
        this.$ = $(container);
      };
      return class_1;
    }());
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_handlers_debug === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_handlers_debug) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_handlers_debug, module.exports);
    } else {
      _ref_mask_src_handlers_debug = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_handlers_define;
  (function() {
    var exports = null != _ref_mask_src_handlers_define ? _ref_mask_src_handlers_define : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var class_1 = _ref_utils_src_class;
    var Define_1 = _ref_mask_src_feature_Define;
    var fn_1 = _ref_utils_src_fn;
    exports.custom_Tags['define'] = (0, class_1.class_create)({
      meta: {
        serializeNodes: true
      },
      constructor: function(node, model, ctx, el, ctr) {
        Define_1.Define.registerGlobal(node, model, ctr);
      },
      render: fn_1.fn_doNothing
    });
    exports.custom_Tags['let'] = (0, class_1.class_create)({
      meta: {
        serializeNodes: true
      },
      constructor: function(node, model, ctx, el, ctr) {
        Define_1.Define.registerScoped(node, model, ctr);
      },
      render: fn_1.fn_doNothing
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_handlers_define === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_handlers_define) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_handlers_define, module.exports);
    } else {
      _ref_mask_src_handlers_define = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_handlers_html;
  (function() {
    var exports = null != _ref_mask_src_handlers_html ? _ref_mask_src_handlers_html : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    exports = _ref_mask_src_custom_exports;
    var Compo = {
      meta: {
        mode: 'server:all'
      },
      render: function(model, ctx, container) {
        this.html = (0, jMask_1.jMask)(this.nodes).text(model, ctx, this);
        if (container.insertAdjacentHTML) {
          container.insertAdjacentHTML('beforeend', this.html);
          return;
        }
        if (container.ownerDocument) {
          var child, model = document.createElement('div');
          model.innerHTML = this.html;
          child = model.firstChild;
          while (null != child) {
            container.appendChild(child);
            child = child.nextSibling;
          }
        }
      },
      toHtml: function() {
        return this.html || '';
      },
      html: null
    };
    (0, exports.customTag_register)(':html', Compo);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_handlers_html === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_handlers_html) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_handlers_html, module.exports);
    } else {
      _ref_mask_src_handlers_html = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_handlers_content;
  (function() {
    var exports = null != _ref_mask_src_handlers_content ? _ref_mask_src_handlers_content : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_utils_src_class;
    var is_1 = _ref_utils_src_is;
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_src_dom_exports;
    var exports_3 = _ref_mask_src_custom_exports;
    var css_1 = _ref_mask_src_util_css;
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    exports_1 = (0, exports.class_create)(exports_1.customTag_Base, {
      meta: {
        mode: 'server'
      },
      tagName: null,
      id: null,
      body: null,
      constructor: function(node, model, ctx, el, ctr) {
        var content = node.content;
        if (null == content && node.nodes) {
          var x = node.nodes[0];
          if (x.type === exports_2.Dom.TEXTNODE) {
            content = x.content;
          } else {
            content = (0, jMask_1.jMask)(x.nodes).text(model, ctr);
          }
        }
        this.id = node.id;
        this.body = (0, is_1.is_Function)(content) ? content('node', model, ctx, el, ctr) : content;
        if ('style' === this.tagName) {
          this.body = (0, css_1.css_ensureScopedStyles)(this.body, node, el);
        }
      }
    });
    var GlobalContent = (0, exports.class_create)(exports_1, {
      render: function(model, ctx, el) {
        manager_get(ctx, el).append(this.tagName, this);
      }
    });
    exports_1 = (0, exports.class_create)(exports_1, {
      render: function(model, ctx, el) {
        render(this.tagName, this.attr, this.body, null, el);
      }
    });
    exports_3.custom_Tags['style'] = (0, exports.class_create)(GlobalContent, {
      tagName: 'style'
    });
    exports_3.custom_Tags['script'] = (0, exports.class_create)(exports_1, {
      tagName: 'script'
    });
    var manager_get;
    (function() {
      var manager;
      var KEY = '__contentManager';
      manager_get = function(ctx, el) {
        var _a;
        if (null == ctx || is_1.is_DOM) {
          return null !== manager && void 0 !== manager ? manager : manager = new Manager(document.body);
        }
        return null !== (_a = ctx[KEY]) && void 0 !== _a ? _a : ctx[KEY] = new Manager(el);
      };
      var Manager = /** @class */ function() {
        function Manager(el) {
          var _a;
          this.ids = {};
          this.container = null !== (_a = el.ownerDocument.body) && void 0 !== _a ? _a : el;
        }
        Manager.prototype.append = function(tagName, node) {
          var id = node.id;
          var el = this.ids[id];
          if (void 0 !== el) {
            return el;
          }
          el = render(tagName, node.attr, node.body, node.id, this.container);
          this.ids[id] = el;
        };
        return Manager;
      }();
    })();
    function render(tagName, attr, body, id, container) {
      var el = document.createElement(tagName);
      el.textContent = body;
      for (var key in attr) {
        var val = attr[key];
        if (null != val) {
          el.setAttribute(key, val);
        }
      }
      if (id) {
        el.setAttribute('id', id);
      }
      container.appendChild(el);
      return el;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_handlers_content === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_handlers_content) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_handlers_content, module.exports);
    } else {
      _ref_mask_src_handlers_content = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_handlers_var;
  (function() {
    var exports = null != _ref_mask_src_handlers_var ? _ref_mask_src_handlers_var : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var exports_1 = _ref_mask_src_custom_exports;
    var class_1 = _ref_utils_src_class;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    (function() {
      // TODO: refactor methods, use MaskNode Serialization instead Model Serialization
      exports_1.custom_Tags['var'] = (0, class_1.class_create)(exports_1.customTag_Base, {
        renderStart: function(model, ctx) {
          set(this, this.attr, true, model, ctx);
        },
        onRenderStartClient: function() {
          set(this, this.model, false);
        }
      });
      function set(self, source, doEval, model, ctx) {
        // set data also to model, so that it will be serialized in NodeJS
        self.model = {};
        var parent = self.parent;
        var scope = parent.scope;
        if (null == scope) {
          scope = parent.scope = {};
        }
        for (var key in source) {
          self.model[key] = scope[key] = false === doEval ? source[key] : (0, exports_2.expression_eval)(source[key], model, ctx, parent);
        }
      }
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_handlers_var === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_handlers_var) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_handlers_var, module.exports);
    } else {
      _ref_mask_src_handlers_var = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_handlers_svg;
  (function() {
    var exports = null != _ref_mask_src_handlers_svg ? _ref_mask_src_handlers_svg : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var exports_1 = _ref_mask_src_builder_exports;
    exports = _ref_mask_src_custom_exports;
    var Compo = {
      meta: {
        mode: 'server:all'
      },
      render: function(model, ctx, container, ctr, children) {
        var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        for (var key in this.attr) {
          svg.setAttribute(key, this.attr[key]);
        }
        (0, exports_1.builder_buildSVG)(this.nodes, model, ctx, svg, ctr, children);
        container.appendChild(svg);
      }
    };
    (0, exports.customTag_register)('svg', Compo);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_handlers_svg === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_handlers_svg) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_handlers_svg, module.exports);
    } else {
      _ref_mask_src_handlers_svg = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_handlers_template;
  (function() {
    var exports = null != _ref_mask_src_handlers_template ? _ref_mask_src_handlers_template : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Templates = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_src_custom_exports;
    var attr_1 = _ref_mask_src_util_attr;
    var merge_1 = _ref_mask_src_feature_merge;
    var exports_3 = _ref_mask_src_builder_exports;
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    var cache_ = {};
    exports.Templates = {
      get: function(id) {
        return cache_[id];
      },
      resolve: function(node, id) {
        var nodes = cache_[id];
        if (null != nodes) {
          return nodes;
        }
        var selector = ':template[id=' + id + ']', parent = node.parent, tmpl = null;
        while (null != parent) {
          tmpl = (0, jMask_1.jMask)(parent.nodes).filter(selector).get(0);
          if (null != tmpl) {
            return tmpl.nodes;
          }
          parent = parent.parent;
        }
        (0, reporters_1.log_warn)('Template was not found', id);
        return null;
      },
      register: function(id, nodes) {
        if (null == id) {
          (0, reporters_1.log_warn)('`:template` must define the `id` attr');
          return;
        }
        cache_[id] = nodes;
      }
    };
    (0, exports_1.customTag_register)(':template', {
      render: function() {
        exports.Templates.register(this.attr.id, this.nodes);
      }
    });
    (0, exports_1.customTag_register)(':import', {
      renderStart: function() {
        var id = this.attr.id;
        if (null == id) {
          (0, reporters_1.log_error)('`:import` shoud reference the template via id attr');
          return;
        }
        this.nodes = exports.Templates.resolve(this, id);
      }
    });
    exports_2.custom_Statements['include'] = {
      render: function(node, model, ctx, container, ctr, els) {
        var name = (0, attr_1.attr_first)(node.attr);
        var Compo = (0, exports_1.customTag_get)(name, ctr);
        var template;
        if (null != Compo) {
          template = Compo.prototype.template || Compo.prototype.nodes;
          if (null != template) {
            template = (0, merge_1.mask_merge)(template, node.nodes);
          }
        } else {
          template = exports.Templates.get(name);
        }
        if (null != template) {
          (0, exports_3.builder_build)(template, model, ctx, container, ctr, els);
        }
      }
    };
    (0, exports_1.customTag_register)('layout:master', {
      meta: {
        mode: 'server'
      },
      render: function() {
        var name = this.attr.id || (0, attr_1.attr_first)(this.attr);
        exports.Templates.register(name, this.nodes);
      }
    });
    (0, exports_1.customTag_register)('layout:view', {
      meta: {
        mode: 'server'
      },
      render: function(model, ctx, container, ctr, els) {
        var nodes = exports.Templates.get(this.attr.master);
        nodes = (0, merge_1.mask_merge)(nodes, this.nodes, null, {
          extending: true
        });
        (0, exports_3.builder_build)(nodes, model, ctx, container, ctr, els);
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_handlers_template === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_handlers_template) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_handlers_template, module.exports);
    } else {
      _ref_mask_src_handlers_template = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_handlers_exports;
  (function() {
    var exports = null != _ref_mask_src_handlers_exports ? _ref_mask_src_handlers_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Templates = void 0;
    _ref_mask_src_handlers_debug;
    _ref_mask_src_handlers_define;
    _ref_mask_src_handlers_html;
    _ref_mask_src_handlers_content;
    _ref_mask_src_handlers_var;
    _ref_mask_src_handlers_svg;
    var template_1 = _ref_mask_src_handlers_template;
    Object.defineProperty(exports, 'Templates', {
      enumerable: true,
      get: function() {
        return template_1.Templates;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_handlers_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_handlers_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_handlers_exports, module.exports);
    } else {
      _ref_mask_src_handlers_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_decorators_store;
  (function() {
    var exports = null != _ref_mask_src_feature_decorators_store ? _ref_mask_src_feature_decorators_store : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._store = void 0;
    exports._store = {};
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_decorators_store === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_decorators_store) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_decorators_store, module.exports);
    } else {
      _ref_mask_src_feature_decorators_store = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_decorators_utils;
  (function() {
    var exports = null != _ref_mask_src_feature_decorators_utils ? _ref_mask_src_feature_decorators_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._getDecoType = exports._getDecorator = void 0;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var store_1 = _ref_mask_src_feature_decorators_store;
    var exports_2 = _ref_mask_src_custom_exports;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    function _getDecorator(decoNode, model, ctx, ctr) {
      var expr = decoNode.expression;
      ctr = (0, exports_1.expression_eval)(expr, store_1._store, null, ctr);
      if (null == ctr) {
        (0, reporters_1.error_withNode)('Decorator not resolved', decoNode);
        return null;
      }
      if (-1 === expr.indexOf('(') && isFactory(ctr)) {
        return initialize(ctr);
      }
      return ctr;
    }
    exports._getDecorator = _getDecorator;
    function _getDecoType(node) {
      var tagName = node.tagName, node = node.type;
      if ('function' === tagName || 'slot' === tagName || 'event' === tagName || 'pipe' === tagName) {
        return 'METHOD';
      }
      if ((1 === node || 15 === node) && null != exports_2.custom_Tags[tagName]) {
        node = 4;
      }
      if (1 === node && null != exports_2.custom_Statements[tagName]) {
        node = 15;
      }
      if (1 === node) {
        return 'NODE';
      }
      if (4 === node) {
        return 'COMPO';
      }
      return null;
    }
    exports._getDecoType = _getDecoType;
    function isFactory(deco) {
      return true === deco.isFactory;
    }
    function initialize(deco) {
      if ((0, is_1.is_Function)(deco)) {
        return new deco();
      }
      // is object
      var self = (0, obj_1.obj_create)(deco);
      if (deco.hasOwnProperty('constructor')) {
        deco = deco.constructor.call(self);
        if (null != deco) {
          return deco;
        }
      }
      return self;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_decorators_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_decorators_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_decorators_utils, module.exports);
    } else {
      _ref_mask_src_feature_decorators_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_decorators_wrappers;
  (function() {
    var exports = null != _ref_mask_src_feature_decorators_wrappers ? _ref_mask_src_feature_decorators_wrappers : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._wrapper_CompoBuilder = exports._wrapper_NodeBuilder = exports._wrapper_Fn = exports._wrapMany = void 0;
    var is_1 = _ref_utils_src_is;
    var reporters_1 = _ref_mask_src_util_reporters;
    var refs_1 = _ref_utils_src_refs;
    var utils_1 = _ref_mask_src_feature_decorators_utils;
    function _wrapMany(wrapperFn, decorators, fn, target, key, model, ctx, ctr) {
      var _fn = fn, i = decorators.length;
      while (-1 !== --i) {
        _fn = wrap(wrapperFn, decorators[i], _fn, target, key, model, ctx, ctr);
      }
      return _fn;
    }
    exports._wrapMany = _wrapMany;
    function _wrapper_Fn(decoNode, deco, innerFn, target, key) {
      if ((0, is_1.is_Function)(deco)) {
        if (deco.length > 1) {
          var descriptor = {
            value: innerFn
          };
          var result = deco(target, key, descriptor);
          if (null == result) {
            if (target[key] !== innerFn) {
              return target[key];
            }
            return descriptor.value;
          }
          if (null == result.value) {
            (0, reporters_1.error_withNode)('Decorator should return value descriptor', decoNode);
            return innerFn;
          }
          return result.value;
        }
        return deco(innerFn) || innerFn;
      }
      var beforeInvoke = deco.beforeInvoke, afterInvoke = deco.afterInvoke;
      if (beforeInvoke || afterInvoke) {
        return function() {
          var args = refs_1._Array_slice.call(arguments);
          if (null != beforeInvoke) {
            var overridenArgs = beforeInvoke.apply(this, args);
            if ((0, is_1.is_Array)(overridenArgs)) {
              args = overridenArgs;
            }
          }
          overridenArgs = innerFn.apply(this, args);
          if (null != afterInvoke) {
            args = afterInvoke.call(this, overridenArgs);
            if (void 0 !== args) {
              overridenArgs = args;
            }
          }
          return overridenArgs;
        };
      }
      (0, reporters_1.error_withNode)('Invalid function decorator', decoNode);
    }
    exports._wrapper_Fn = _wrapper_Fn;
    function _wrapper_NodeBuilder(decoNode, deco, builderFn) {
      var beforeRender, afterRender, decoCtx;
      if ((0, is_1.is_Function)(deco)) {
        afterRender = deco;
      } else if ((0, is_1.is_Object)(deco)) {
        beforeRender = deco.beforeRender;
        afterRender = deco.afterRender;
        decoCtx = deco;
      }
      if (beforeRender || afterRender) {
        return create(decoCtx, beforeRender, afterRender, builderFn);
      }
      (0, reporters_1.error_withNode)('Invalid node decorator', decoNode);
    }
    exports._wrapper_NodeBuilder = _wrapper_NodeBuilder;
    function _wrapper_CompoBuilder(decoNode, deco, builderFn) {
      var beforeRender, afterRender, decoCtx;
      if ((0, is_1.is_Function)(deco)) {
        beforeRender = deco;
      } else if ((0, is_1.is_Object)(deco)) {
        beforeRender = deco.beforeRender;
        afterRender = deco.afterRender;
        decoCtx = deco;
      }
      if (beforeRender || afterRender) {
        return create(decoCtx, beforeRender, afterRender, builderFn);
      }
      (0, reporters_1.error_withNode)('Invalid node decorator', decoNode);
    }
    exports._wrapper_CompoBuilder = _wrapper_CompoBuilder;
    function wrap(wrapperFn, decoratorNode, innerFn, target, key, model, ctx, ctr) {
      model = (0, utils_1._getDecorator)(decoratorNode, model, ctx, ctr);
      if (null == model) {
        return innerFn;
      }
      return wrapperFn(decoratorNode, model, innerFn, target, key) || innerFn;
    }
    function create(decoCtx, beforeFn, afterFn, builderFn) {
      return function(node, model, ctx, el, ctr, els) {
        if (null != beforeFn) {
          var mix = beforeFn.call(decoCtx, node, model, ctx, el, ctr, els);
          if (null != mix) {
            if ('tagName' in mix) {
              console.warn('@obsolete: Before FN in decorator should return compound object with node?, container?, controller?, model? properties');
              node = mix;
            } else {
              if (mix.model) {
                model = mix.model;
              }
              if (mix.node) {
                node = mix.node;
              }
              if (mix.container) {
                el = mix.container;
              }
              if (mix.controller) {
                ctr = mix.controller;
              }
            }
          }
        }
        if (null == els) {
          els = [];
        }
        builderFn(node, model, ctx, el, ctr, els);
        if (null != afterFn) {
          afterFn.call(decoCtx, els[els.length - 1], model, ctr);
        }
      };
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_decorators_wrappers === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_decorators_wrappers) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_decorators_wrappers, module.exports);
    } else {
      _ref_mask_src_feature_decorators_wrappers = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_methods_source_url;
  (function() {
    var exports = null != _ref_mask_src_feature_methods_source_url ? _ref_mask_src_feature_methods_source_url : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.sourceUrl_get = void 0;
    var refs_1 = _ref_utils_src_refs;
    function sourceUrl_get(node) {
      //if DEBUG
      var tag = node.tagName;
      tag = 'let' === tag || 'define' === tag ? forDefine : forNode;
      tag = tag(node), node = _sourceUrls[tag];
      if (void 0 !== node) {
        node = ++_sourceUrls[tag];
      }
      if (null != node) {
        tag += '_' + node;
      }
      _sourceUrls[tag] = 1;
      return '\n//# sourceURL=' + ORIGIN + '/controllers/' + tag;
      //endif
    }
    exports.sourceUrl_get = sourceUrl_get;
    var ORIGIN = refs_1._global.location && refs_1._global.location.origin || 'dynamic://MaskJS';
    //if DEBUG
    function forDefine(node) {
      var x = node, node = x.tagName + '_' + x.name;
      if ('let' === x.tagName) {
        while (null != (x = x.parent) && 'define' !== x.tagName) {}
        if (null != x) {
          node = x.tagName + '_' + x.name + '-' + node;
        }
      }
      return node;
    }
    function forNode(node) {
      var url = node.tagName + '_' + node.name, x = node, i = 0;
      while (null != (x = x.parent) && ++i < 10) {
        var tag = x.tagName;
        if ('let' === tag || 'define' === tag) {
          url = x.name + '.' + url;
          continue;
        }
        if (0 === i) {
          url = x.tagName + '_' + url;
        }
      }
      return url;
    }
    var _sourceUrls = {};
    //endif
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_methods_source_url === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_methods_source_url) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_methods_source_url, module.exports);
    } else {
      _ref_mask_src_feature_methods_source_url = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_methods_utils;
  (function() {
    var exports = null != _ref_mask_src_feature_methods_utils ? _ref_mask_src_feature_methods_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._args_toCode = void 0;
    function _args_toCode(args) {
      var str = '';
      if (null == args || 0 === args.length) {
        return str;
      }
      var imax = args.length, i = -1;
      while (++i < imax) {
        if (i > 0) {
          str += ',';
        }
        str += args[i].prop;
      }
      return str;
    }
    exports._args_toCode = _args_toCode;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_methods_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_methods_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_methods_utils, module.exports);
    } else {
      _ref_mask_src_feature_methods_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_methods_scope_refs;
  (function() {
    var exports = null != _ref_mask_src_feature_methods_scope_refs ? _ref_mask_src_feature_methods_scope_refs : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.scopeRefs_getImportVars = void 0;
    function scopeRefs_getImportVars(owner, out_) {
      var imports = getImports(owner);
      if (null == imports) {
        return;
      }
      var out = out_ || [ [], [] ], imax = imports.length, i = -1;
      while (++i < imax) {
        var import_ = imports[i];
        var type = import_.type;
        if ('script' !== type && 'data' !== type && 'text' !== type && 'mask' !== type) {
          continue;
        }
        import_.eachExport(register);
      }
      function register(varName) {
        var val = this.getExport(varName);
        out[0].push(varName);
        out[1].push(val);
      }
    }
    exports.scopeRefs_getImportVars = scopeRefs_getImportVars;
    function getImports(owner) {
      if (owner.importItems) {
        return owner.importItems;
      }
      var x = owner;
      while (null != x && 'imports' !== x.tagName) {
        x = x.parent;
      }
      return null == x ? null : x.importItems;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_methods_scope_refs === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_methods_scope_refs) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_methods_scope_refs, module.exports);
    } else {
      _ref_mask_src_feature_methods_scope_refs = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_Di;
  (function() {
    var exports = null != _ref_mask_src_feature_Di ? _ref_mask_src_feature_Di : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Di = void 0;
    var is_1 = _ref_utils_src_is;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    var env_class_1 = _ref_mask_src_util_env_class;
    exports.Di = {
      resolve: function(Type) {
        return _di.resolve(Type);
      },
      setResolver: function(di) {
        _di = di;
      },
      deco: {
        injectableClass: function(mix) {
          if ((0, is_1.is_Function)(mix)) {
            return createInjectableClassWrapper(mix);
          }
          return function(Ctor) {
            return createInjectableClassWrapper(Ctor, mix);
          };
        }
      }
    };
    var _di = {
      resolve: function(Type) {
        if ('function' === typeof Type) {
          return new Type();
        }
        return Type;
      }
    };
    function createInjectableClassWrapper(Ctor, types) {
      return (0, env_class_1.env_class_overrideArgs)(Ctor, function(node, model, ctx, el, parent) {
        var args = [];
        if (null != node.expression) {
          args = (0, exports_1.expression_evalStatements)(node.expression, model, ctx, parent, node);
        }
        if (null != types) {
          if (null == args) {
            args = new Array(types.length);
          }
          for (var i = 0; i < types.length; i++) {
            if (null === types[i] || null != args[i]) {
              continue;
            }
            args[i] = _di.resolve(types[i]);
          }
        }
        return args;
      });
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_Di === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_Di) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_Di, module.exports);
    } else {
      _ref_mask_src_feature_Di = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_methods_define_methods;
  (function() {
    var exports = null != _ref_mask_src_feature_methods_define_methods ? _ref_mask_src_feature_methods_define_methods : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.defMethods_compile = exports.defMethods_getSource = void 0;
    var refs_1 = _ref_utils_src_refs;
    var config_1 = _ref_mask_src_api_config;
    var source_url_1 = _ref_mask_src_feature_methods_source_url;
    var utils_1 = _ref_mask_src_feature_methods_utils;
    var exports_1 = _ref_mask_src_dom_exports;
    var exports_2 = _ref_mask_src_feature_decorators_exports;
    var scope_refs_1 = _ref_mask_src_feature_methods_scope_refs;
    var exports_3 = _ref_mask_projects_expression_src_exports;
    var Di_1 = _ref_mask_src_feature_Di;
    function defMethods_getSource(defNode, defProto, model, owner) {
      var nodes = getFnNodes(defNode.nodes);
      if (null == nodes || 0 === nodes.length) {
        return;
      }
      var body = createFnBody(defNode, nodes);
      var sourceUrl = (0, source_url_1.sourceUrl_get)(defNode);
      // [[name],[value]]
      defProto = getScopeVars(defNode, defProto, model, owner);
      model = createFnWrapperCode(defNode, body, defProto[0]);
      owner = config_1.__cfg.preprocessor.script;
      if (owner) {
        model = owner(model);
      }
      if (null != sourceUrl) {
        model += sourceUrl;
      }
      return [ model, nodes, defProto[1] ];
    }
    exports.defMethods_getSource = defMethods_getSource;
    function defMethods_compile(defNode, defProto, model, owner) {
      defNode = defMethods_getSource(defNode, defProto, model, owner);
      if (null == defNode) {
        return;
      }
      var defProto = defNode[0], nodes = defNode[1], model = defNode[2], owner = Function('return ' + defProto), defNode = owner(), fns = defNode.apply(null, model), imax = nodes.length, i = -1;
      while (++i < imax) {
        var node = nodes[i];
        var fn = fns[i];
        if ('constructor' === node.name) {
          fn = wrapDi(fn, node);
        }
        node.fn = fn;
      }
    }
    exports.defMethods_compile = defMethods_compile;
    function createFnBody(defineNode, nodes) {
      var code = 'return [\n', localVars = createFnLocalVars(defineNode), i = -1, imax = nodes.length;
      while (++i < imax) {
        var node = nodes[i], name = (node.tagName, node.getFnName()), body = node.body, argMetas = node.args;
        if (node.flagAsync) {
          code += 'async ';
        }
        code += 'function ' + name + ' (' + (0, utils_1._args_toCode)(argMetas) + ') {\n';
        code += localVars + body;
        code += '\n}' + (i === imax - 1 ? '' : ',') + '\n';
      }
      code += '];\n';
      return code;
    }
    function createFnWrapperCode(defineNode, body, args) {
      defineNode = defineNode.name.replace(/[:$]/g, '_') + 'Controller';
      defineNode = 'function ' + defineNode + ' (' + args.join(',') + ') {\n';
      defineNode += body;
      defineNode += '\n}';
      return defineNode;
    }
    function createFnLocalVars(defineNode) {
      var args = defineNode.arguments;
      if (null == args) {
        return '';
      }
      var imax = args.length, i = -1;
      if (0 === imax) {
        return '';
      }
      var prop, str = 'var ';
      while (++i < imax) {
        prop = args[i].name;
        str += prop + ' = this.model.' + prop;
        str += i === imax - 1 ? ';\n' : ',\n    ';
      }
      return str;
    }
    function getFnNodes(nodes) {
      if (null == nodes) {
        return null;
      }
      var arr, imax = nodes.length, i = -1;
      while (++i < imax) {
        var node = nodes[i];
        if (node.type === exports_1.Dom.DECORATOR) {
          var start = i;
          i = exports_2.Decorator.goToNode(nodes, i, imax);
          node = nodes[i];
          if (false === isFn(node.tagName)) {
            continue;
          }
          node.decorators = refs_1._Array_slice.call(nodes, start, i);
        }
        if (false === isFn(node.tagName) || null != node.fn) {
          continue;
        }
        if (null == arr) {
          arr = [];
        }
        arr.push(node);
      }
      return arr;
    }
    function getScopeVars(defNode, defProto, model, owner) {
      var out = [ [], [] ];
      (0, scope_refs_1.scopeRefs_getImportVars)(owner, out);
      return out;
    }
    function isFn(name) {
      return 'function' === name || 'slot' === name || 'event' === name || 'pipe' === name;
    }
    function wrapDi(fn, fnNode) {
      fnNode = fnNode.args;
      if (null == fnNode) {
        return fn;
      }
      return createDiFn(fnNode, fn);
    }
    var createDiFn;
    (function() {
      createDiFn = function(argMetas, fn) {
        return function() {
          var args = mergeArgs(argMetas, refs_1._Array_slice.call(arguments));
          return fn.apply(this, args);
        };
      };
      function mergeArgs(argMetas, args) {
        var model = args[1];
        var controller = args[4];
        var tLength = argMetas.length, aLength = args.length, max = tLength > aLength ? tLength : aLength, arr = new Array(max), i = -1;
        while (++i < max) {
          // injections are resolved first.
          if (i < tLength && null != argMetas[i].type) {
            var Type = (0, exports_3.expression_eval)(argMetas[i].type, model, null, controller);
            arr[i] = Di_1.Di.resolve(Type);
            continue;
          }
          if (i < aLength && null != args[i]) {
            arr[i] = args[i];
            continue;
          }
        }
        return arr;
      }
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_methods_define_methods === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_methods_define_methods) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_methods_define_methods, module.exports);
    } else {
      _ref_mask_src_feature_methods_define_methods = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_methods_node_method;
  (function() {
    var exports = null != _ref_mask_src_feature_methods_node_method ? _ref_mask_src_feature_methods_node_method : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.nodeMethod_compile = exports.nodeMethod_getSource = void 0;
    var source_url_1 = _ref_mask_src_feature_methods_source_url;
    var utils_1 = _ref_mask_src_feature_methods_utils;
    var scope_refs_1 = _ref_mask_src_feature_methods_scope_refs;
    var config_1 = _ref_mask_src_api_config;
    function nodeMethod_getSource(node, model, owner) {
      var sourceUrl = (0, source_url_1.sourceUrl_get)(node), name = node.getFnName(), args = node.args, body = node.body, code = '';
      if (node.flagAsync) {
        code += 'async ';
      }
      code += 'function ' + name + ' (' + (0, utils_1._args_toCode)(args) + ') {\n';
      code += body;
      code += '\n}';
      node = config_1.__cfg.preprocessor.script;
      if (node) {
        code = node(code);
      }
      if (null != sourceUrl) {
        code += sourceUrl;
      }
      return code;
    }
    exports.nodeMethod_getSource = nodeMethod_getSource;
    function nodeMethod_compile(node, model, owner) {
      var fn = node.fn;
      if (null != fn) {
        return fn;
      }
      fn = getScopeVars(node, node, owner), model = nodeMethod_getSource(node, model, owner), 
      owner = fn[0], fn = fn[1], owner = owner.concat([ 'return ' + model ]), model = Function.apply(null, owner);
      return node.fn = model.apply(null, fn);
    }
    exports.nodeMethod_compile = nodeMethod_compile;
    function getScopeVars(node, model, owner) {
      var out = [ [], [] ];
      (0, scope_refs_1.scopeRefs_getImportVars)(owner, out);
      return out;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_methods_node_method === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_methods_node_method) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_methods_node_method, module.exports);
    } else {
      _ref_mask_src_feature_methods_node_method = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_methods_parsers;
  (function() {
    var exports = null != _ref_mask_src_feature_methods_parsers ? _ref_mask_src_feature_methods_parsers : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_utils_src_class;
    var exports_1 = _ref_mask_src_dom_exports;
    var exports_2 = _ref_mask_src_custom_exports;
    var exports_3 = _ref_mask_src_parser_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var node_method_1 = _ref_mask_src_feature_methods_node_method;
    function create(tagName) {
      return function(str, i, imax, parent) {
        var start = str.indexOf('{', i) + 1, head = parseHead(
        //tagName, str.substring(i, start - 1)
        tagName, str, i, start);
        if (null == head) {
          (0, reporters_1.parser_error)('Method head syntax error', str, i);
        }
        i = (0, exports_3.cursor_groupEnd)(str, start, imax, 123, 125), imax = str.substring(start, i), 
        str = null == head ? null : new MethodNode(tagName, head, imax, parent);
        return [ str, i + 1, 0 ];
      };
    }
    var parseHead;
    (function() {
      var lex_ = (0, exports_3.parser_ObjectLexer)('?($$flags{async:async;binding:private|public;self:self;static:static})$$methodName<accessor>? (?$$args[$$prop<token>?(? :? $$type<accessor>)](,))? ');
      parseHead = function(name, str, i, imax) {
        var head = new MethodHead();
        str = lex_(str, i, imax, head, true);
        return str === i ? null : head;
      };
    })();
    function MethodHead() {
      this.methodName = null;
      this.args = null;
      this.async = null;
      this.binding = null;
    }
    var MethodNode = (0, exports.class_create)(exports_1.Dom.Component.prototype, {
      name: null,
      body: null,
      args: null,
      types: null,
      fn: null,
      flagAsync: false,
      flagPrivate: false,
      flagPublic: false,
      flagStatic: false,
      flagSelf: false,
      constructor: function(tagName, head, body, parent) {
        this.tagName = tagName;
        this.name = head.methodName;
        this.args = head.args;
        this.types = head.types;
        this.flagSelf = 'self' === head.self;
        this.flagAsync = 'async' === head.async;
        this.flagStatic = 'static' === head.static;
        this.flagPublic = 'public' === head.binding;
        this.flagPrivate = 'private' === head.binding;
        this.body = body;
        this.parent = parent;
      },
      getFnSource: function() {
        return (0, node_method_1.nodeMethod_getSource)(this, null, this.parent);
      },
      compile: function(model, owner) {
        return (0, node_method_1.nodeMethod_compile)(this, model, owner);
      },
      getFnName: function() {
        var tag = this.tagName, name = this.name;
        return 'event' === tag || 'pipe' === tag ? name.replace(/[^\w_$]/g, '_') : name;
      },
      stringify: function(stream) {
        var str = this.tagName + ' ';
        if (this.flagSelf) {
          str += 'self ';
        }
        if (this.flagAsync) {
          str += 'async ';
        }
        if (this.flagPublic) {
          str += 'public ';
        }
        if (this.flagStatic) {
          str += 'static ';
        }
        if (this.flagPrivate) {
          str += 'private ';
        }
        stream.write(str + this.name);
        stream.format(' ');
        stream.print('(');
        stream.printArgs(this.args);
        stream.print(')');
        stream.openBlock('{');
        stream.print(this.body);
        stream.closeBlock('}');
      }
    });
    exports_2.custom_Parsers['slot'] = create('slot');
    exports_2.custom_Parsers['pipe'] = create('pipe');
    exports_2.custom_Parsers['event'] = create('event');
    exports_2.custom_Parsers['function'] = create('function');
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_methods_parsers === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_methods_parsers) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_methods_parsers, module.exports);
    } else {
      _ref_mask_src_feature_methods_parsers = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_methods_handlers;
  (function() {
    var exports = null != _ref_mask_src_feature_methods_handlers ? _ref_mask_src_feature_methods_handlers : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var class_1 = _ref_utils_src_class;
    var exports_1 = _ref_mask_src_custom_exports;
    var node_method_1 = _ref_mask_src_feature_methods_node_method;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_2 = _ref_mask_projects_mask_compo_src_exports;
    var Method = (0, class_1.class_create)({
      meta: {
        serializeNodes: true
      },
      constructor: function(node, model, ctx, el, parent) {
        this.fn = (0, node_method_1.nodeMethod_compile)(node, model, parent);
        this.name = node.name;
      }
    });
    exports_1.custom_Tags['slot'] = (0, class_1.class_create)(Method, {
      renderEnd: function() {
        var ctr = this.parent, slots = ctr.slots;
        if (null == slots) {
          slots = ctr.slots = {};
        }
        slots[this.name] = this.fn;
      }
    });
    (function() {
      function parse(def) {
        var rgx = /^\s*([\w]+)[:\$]+([\w]+)\s*$/, parts = rgx.exec(def), name = parts && parts[1], signal = parts && parts[2];
        if (null == parts || null == name || null == signal) {
          (0, reporters_1.log_error)('PipeCompo. Invalid name.', def, 'Expect', rgx.toString());
          return null;
        }
        return [ name, signal ];
      }
      function attach(node, ctr) {
        var pipes = ctr.pipes;
        if (null == pipes) {
          pipes = ctr.pipes = {};
        }
        var signal = parse(node.name);
        if (null == signal) {
          return;
        }
        var name = signal[0], signal = signal[1], ctr = ctr.pipes[name];
        if (null == ctr) {
          ctr = pipes[name] = {};
        }
        ctr[signal] = node.fn;
      }
      exports_1.custom_Tags['pipe'] = (0, class_1.class_create)(Method, {
        renderEnd: function() {
          attach(this, this.parent);
        }
      });
      exports_1.custom_Tags.pipe.attach = attach;
    })();
    exports_1.custom_Tags['event'] = (0, class_1.class_create)(Method, {
      renderEnd: function(els, model, ctx, el, ctr) {
        this.fn = this.fn.bind(this.parent);
        var name = this.name, params = null, i = name.indexOf(':');
        if (-1 !== i) {
          params = name.substring(i + 1).trim();
          name = name.substring(0, i).trim();
        }
        exports_2.Component.Dom.addEventListener(el, name, this.fn, params, ctr);
      }
    });
    exports_1.custom_Tags['function'] = (0, class_1.class_create)(Method, {
      renderEnd: function() {
        this.parent[this.name] = this.fn;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_methods_handlers === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_methods_handlers) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_methods_handlers, module.exports);
    } else {
      _ref_mask_src_feature_methods_handlers = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_methods_exports;
  (function() {
    var exports = null != _ref_mask_src_feature_methods_exports ? _ref_mask_src_feature_methods_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Methods = void 0;
    var define_methods_1 = _ref_mask_src_feature_methods_define_methods;
    var node_method_1 = _ref_mask_src_feature_methods_node_method;
    _ref_mask_src_feature_methods_parsers;
    _ref_mask_src_feature_methods_handlers;
    exports.Methods = {
      getSourceForDefine: define_methods_1.defMethods_getSource,
      compileForDefine: define_methods_1.defMethods_compile,
      getSourceForNode: node_method_1.nodeMethod_getSource,
      compileForNode: node_method_1.nodeMethod_compile
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_methods_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_methods_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_methods_exports, module.exports);
    } else {
      _ref_mask_src_feature_methods_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_decorators_exports;
  (function() {
    var exports = null != _ref_mask_src_feature_decorators_exports ? _ref_mask_src_feature_decorators_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Decorator = void 0;
    var refs_1 = _ref_utils_src_refs;
    var class_1 = _ref_utils_src_class;
    var is_1 = _ref_utils_src_is;
    var reporters_1 = _ref_mask_src_util_reporters;
    var wrappers_1 = _ref_mask_src_feature_decorators_wrappers;
    var utils_1 = _ref_mask_src_feature_decorators_utils;
    var store_1 = _ref_mask_src_feature_decorators_store;
    var exports_1 = _ref_mask_src_feature_methods_exports;
    exports.Decorator = {
      getDecoType: utils_1._getDecoType,
      define: function(key, mix) {
        if ((0, is_1.is_Object)(mix)) {
          mix = (0, class_1.class_create)(mix);
          mix.isFactory = true;
        }
        if ((0, is_1.is_Function)(mix) && mix.isFactory) {
          // Wrap the function, as it could be a class, and decorator expression cann`t contain 'new' keyword.
          store_1._store[key] = function() {
            return new (mix.bind.apply(mix, [ null ].concat(refs_1._Array_slice.call(arguments))))();
          };
          store_1._store[key].isFactory = true;
          return;
        }
        store_1._store[key] = mix;
      },
      goToNode: function(nodes, start, imax) {
        var i = start;
        while (++i < imax && 16 === nodes[i].type) {}
        if (i === imax) {
          (0, reporters_1.error_withNode)('No node to decorate', nodes[start]);
          return i;
        }
        return i;
      },
      wrapMethodNode: function(decorators, node, model, ctx, ctr) {
        if (node.fn) {
          return node.fn;
        }
        var fn = exports_1.Methods.compileForNode(node, model, ctr);
        return node.fn = this.wrapMethod(decorators, fn, node, 'fn', model, ctx, ctr);
      },
      wrapMethod: function(decorators, fn, target, key, model, ctx, ctr) {
        return (0, wrappers_1._wrapMany)(wrappers_1._wrapper_Fn, decorators, fn, target, key, model, ctx, ctr);
      },
      wrapNodeBuilder: function(decorators, builderFn, model, ctx, ctr) {
        return (0, wrappers_1._wrapMany)(wrappers_1._wrapper_NodeBuilder, decorators, builderFn, null, null, model, ctx, ctr);
      },
      wrapCompoBuilder: function(decorators, builderFn, model, ctx, ctr) {
        return (0, wrappers_1._wrapMany)(wrappers_1._wrapper_CompoBuilder, decorators, builderFn, null, null, model, ctx, ctr);
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_decorators_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_decorators_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_decorators_exports, module.exports);
    } else {
      _ref_mask_src_feature_decorators_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_Define;
  (function() {
    var exports = null != _ref_mask_src_feature_Define ? _ref_mask_src_feature_Define : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Define = void 0;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var refs_1 = _ref_utils_src_refs;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_src_dom_exports;
    var exports_2 = _ref_mask_src_custom_exports;
    var exports_3 = _ref_mask_src_parser_exports;
    var exports_4 = _ref_mask_projects_expression_src_exports;
    var merge_1 = _ref_mask_src_feature_merge;
    var exports_5 = _ref_mask_src_feature_decorators_exports;
    var exports_6 = _ref_mask_src_feature_methods_exports;
    var exports_7 = _ref_mask_projects_mask_compo_src_exports;
    exports.Define = {
      create: function(node, model, ctr, Base) {
        return compo_fromNode(node, model, ctr, Base);
      },
      registerGlobal: function(node, model, ctr, Base) {
        model = exports.Define.create(node, model, ctr, Base);
        (0, exports_2.customTag_register)(node.name, model);
      },
      registerScoped: function(node, model, ctr, Base) {
        model = exports.Define.create(node, model, ctr, Base);
        (0, exports_2.customTag_registerScoped)(ctr, node.name, model);
      }
    };
    function compo_prototype(node, compoName, tagName, attr, nodes, owner, model, Base) {
      var arr = [];
      var selfFns = null;
      var Proto = (0, obj_1.obj_extend)({
        tagName: tagName,
        compoName: compoName,
        template: arr,
        attr: attr,
        location: trav_location(owner),
        meta: {
          template: 'merge',
          arguments: node.arguments,
          statics: null
        },
        constructor: function DefineBase() {
          if (null != selfFns) {
            var i = selfFns.length;
            while (-1 !== --i) {
              var key = selfFns[i];
              this[key] = this[key].bind(this);
            }
          }
        },
        renderStart: function(model_, ctx, el) {
          exports_7.Component.prototype.renderStart.call(this, model_, ctx, el);
          if (this.nodes === this.template && 'copy' !== this.meta.template) {
            this.nodes = (0, merge_1.mask_merge)(this.nodes, [], this, null, mergeStats);
            if (mergeStats.placeholders.$isEmpty) {
              this.meta.template = 'copy';
            }
          }
        },
        getHandler: null
      }, Base);
      exports_6.Methods.compileForDefine(node, Proto, model, owner);
      var imax = null == nodes ? 0 : nodes.length;
      for (var i = 0; i < imax; i++) {
        var decorators = null;
        var x = nodes[i];
        if (null == x) {
          continue;
        }
        if (x.type === exports_1.Dom.DECORATOR) {
          var start = i;
          i = exports_5.Decorator.goToNode(nodes, i, imax);
          decorators = refs_1._Array_slice.call(nodes, start, i);
          x = nodes[i];
        }
        start = x.tagName;
        if ('function' === start) {
          if ('constructor' === start) {
            Proto.constructor = joinFns([ Proto.constructor, x.fn ]);
            continue;
          }
          var fn = x.fn;
          Proto[x.name] = fn;
          if (null != x.decorators) {
            var result = exports_5.Decorator.wrapMethod(x.decorators, fn, Proto, x.name, model, null, owner);
            if ((0, is_1.is_Function)(result)) {
              Proto[x.name] = result;
            }
          }
          if (x.flagSelf) {
            selfFns = selfFns || [];
            selfFns.push(x.name);
          }
          if (x.flagStatic) {
            if (null == Proto.meta.statics) {
              Proto.meta.statics = {};
            }
            Proto.meta.statics[x.name] = fn;
          }
          continue;
        }
        if ('slot' === start || 'event' === start) {
          if ('event' === start && null != Proto.tagName) {
            // bind the event later via the component
            arr.push(x);
            continue;
          }
          fn = start + 's';
          var fns = Proto[fn];
          if (null == fns) {
            fns = Proto[fn] = {};
          }
          fns[x.name] = x.flagPrivate ? slot_privateWrap(x.fn) : x.fn;
          if (null != x.decorators) {
            result = exports_5.Decorator.wrapMethod(x.decorators, x.fn, fns, x.name, model, null, owner);
            if ((0, is_1.is_Function)(result)) {
              fns[x.name] = result;
            }
          }
          continue;
        }
        if ('pipe' === start) {
          exports_2.custom_Tags.pipe.attach(x, Proto);
          continue;
        }
        if ('define' === start || 'let' === start) {
          fns = 'define' === start ? exports.Define.registerGlobal : exports.Define.registerScoped;
          fns(x, model, Proto);
          continue;
        }
        if ('var' === start) {
          var obj = x.getObject(model, null, owner), key = void 0, val = void 0;
          for (key in obj) {
            val = obj[key];
            if ('meta' === key || 'model' === key || 'attr' === key || 'compos' === key) {
              Proto[key] = (0, obj_1.obj_extend)(Proto[key], val);
              continue;
            }
            if ('scope' === key) {
              if ((0, is_1.is_Object)(val)) {
                Proto.scope = (0, obj_1.obj_extend)(Proto.scope, val);
                continue;
              }
            }
            var scope = Proto.scope;
            if (null == scope) {
              Proto.scope = scope = {};
            }
            scope[key] = val;
            Proto[key] = val;
          }
          continue;
        }
        if (null != decorators) {
          arr.push.apply(arr, decorators);
        }
        arr.push(x);
      }
      return Proto;
    }
    function compo_extends(extends_, model, ctr) {
      var args = [];
      if (null == extends_) {
        return args;
      }
      var x, imax = extends_.length, i = -1;
      while (++i < imax) {
        x = extends_[i];
        if (x.compo) {
          var compo = (0, exports_2.customTag_get)(x.compo, ctr);
          if (null != compo) {
            args.unshift(compo);
            continue;
          }
          compo = (0, exports_4.expression_eval)(x.compo, model, null, ctr);
          if (null != compo) {
            args.unshift(compo);
            continue;
          }
          (0, reporters_1.log_error)('Nor component, nor scoped data is resolved:', x.compo);
          continue;
        }
      }
      return args;
    }
    function compo_fromNode(node, model, ctr, Base) {
      var extends_ = node['extends'], as_ = (node['arguments'], node['as']);
      if (null != as_) {
        as_ = (0, exports_3.parser_parse)(as_);
        tagName = as_.tagName;
        attr = (0, obj_1.obj_extend)(node.attr, as_.attr);
      }
      var as_ = node.name, as_ = compo_prototype(node, as_, tagName, attr, node.nodes, ctr, model, Base), tagName = compo_extends(extends_, model, ctr);
      var attr = exports_7.Component.createExt(as_, tagName);
      if (as_.meta.statics) {
        (0, obj_1.obj_extend)(attr, as_.meta.statics);
      }
      return attr;
    }
    function trav_location(ctr) {
      while (null != ctr) {
        if (ctr.location) {
          return ctr.location;
        }
        if (ctr.resource && ctr.resource.location) {
          return ctr.resource.location;
        }
        ctr = ctr.parent;
      }
      return null;
    }
    function slot_privateWrap(fn) {
      return function(mix) {
        if (null != mix && null != mix.stopPropagation) {
          mix.stopPropagation();
        }
        fn.apply(this, arguments);
        return false;
      };
    }
    function joinFns(fns) {
      return function() {
        var args = refs_1._Array_slice.call(arguments), imax = fns.length, i = -1;
        while (++i < imax) {
          fns[i].apply(this, args);
        }
      };
    }
    var mergeStats = {
      placeholders: {
        $isEmpty: true
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_Define === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_Define) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_Define, module.exports);
    } else {
      _ref_mask_src_feature_Define = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_merge;
  (function() {
    var exports = null != _ref_mask_src_feature_merge ? _ref_mask_src_feature_merge : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.mask_merge = void 0;
    var exports_1 = _ref_mask_src_parser_exports;
    var is_1 = _ref_utils_src_is;
    var exports_2 = _ref_mask_src_dom_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var obj_1 = _ref_utils_src_obj;
    var exports_3 = _ref_mask_projects_expression_src_exports;
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    var attr_1 = _ref_mask_src_util_attr;
    var exports_4 = _ref_mask_src_custom_exports;
    var exports_5 = _ref_mask_src_parser_exports;
    var exports_6 = _ref_mask_src_handlers_exports;
    /**
 * Join two Mask templates or DOM trees
 * @param {(string|MaskNode)} a - first template
 * @param {(string|MaskNode)} b - second template
 * @param {(MaskNode|Component)} [owner]
 * @param {object} [opts]
 * @param {bool} [opts.extending=false] - Clean the merged tree from all unused placeholders
 * @param {obj} [stats] - Output holder, if merge info is requred
 * @returns {MaskNode} New joined Mask DOM tree
 * @memberOf mask
 * @method merge
 */
    function mask_merge(a, b, owner, opts, stats) {
      if ('string' === typeof a) {
        a = (0, exports_1.parser_parse)(a);
      }
      if ('string' === typeof b) {
        b = (0, exports_1.parser_parse)(b);
      }
      if (null == a || (0, is_1.is_ArrayLike)(a) && 0 === a.length) {
        return b;
      }
      b = _resolvePlaceholders(b, b, new Placeholders(null, b, opts));
      opts = _merge(a, b, owner);
      if (null != stats) {
        stats.placeholders = b;
      }
      a = b.$extra;
      if (null != a && 0 !== a.length) {
        if ((0, is_1.is_Array)(opts)) {
          return opts.concat(a);
        }
        return [ opts ].concat(a);
      }
      return opts;
    }
    exports.mask_merge = mask_merge;
    var tag_ELSE = '@else', tag_IF = '@if', tag_EACH = '@each', tag_PLACEHOLDER = '@placeholder', dom_NODE = exports_2.Dom.NODE, dom_TEXTNODE = exports_2.Dom.TEXTNODE, dom_FRAGMENT = exports_2.Dom.FRAGMENT, dom_STATEMENT = exports_2.Dom.STATEMENT, dom_COMPONENT = exports_2.Dom.COMPONENT, dom_DECORATOR = exports_2.Dom.DECORATOR;
    function _merge(node, placeholders, tmplNode, clonedParent) {
      if (null == node) {
        return null;
      }
      var fn;
      if ((0, is_1.is_Array)(node)) {
        fn = _mergeArray;
      } else {
        switch (node.type) {
         case dom_TEXTNODE:
          fn = _cloneTextNode;
          break;

         case dom_DECORATOR:
          fn = _cloneDecorator;
          break;

         case dom_NODE:
         case dom_STATEMENT:
          fn = _mergeNode;
          break;

         case dom_FRAGMENT:
          fn = _mergeFragment;
          break;

         case dom_COMPONENT:
          fn = _mergeComponent;
          break;
        }
      }
      if (void 0 !== fn) {
        return fn(node, placeholders, tmplNode, clonedParent);
      }
      (0, reporters_1.log_warn)('Unknown type', node.type);
      return null;
    }
    function _mergeArray(nodes, placeholders, tmplNode, clonedParent) {
      if (null == nodes) {
        return null;
      }
      var x, node, fragment = [], imax = nodes.length, i = -1;
      while (++i < imax) {
        node = nodes[i];
        if (node.tagName === tag_ELSE) {
          // check previous
          if (null != x) {
            continue;
          }
          if (node.expression && !eval_(node.expression, placeholders, tmplNode)) {
            continue;
          }
          x = _merge(nodes[i].nodes, placeholders, tmplNode, clonedParent);
        } else {
          x = _merge(node, placeholders, tmplNode, clonedParent);
        }
        appendAny(fragment, x);
      }
      return fragment;
    }
    function _mergeFragment(frag, placeholders, tmplNode, clonedParent) {
      var fragment = new exports_2.Dom.Fragment();
      fragment.parent = clonedParent;
      fragment.nodes = _mergeArray(frag.nodes, placeholders, tmplNode, fragment);
      return fragment;
    }
    function _mergeComponent(node, placeholders, tmplNode, clonedParent) {
      if (null == node.nodes) {
        return node;
      }
      var cloned = new exports_2.Dom.Component();
      (0, obj_1.obj_extend)(cloned, node);
      cloned.nodes = _merge(cloned.nodes, placeholders, tmplNode, clonedParent);
      return cloned;
    }
    function _mergeNode(node, placeholders, tmplNode, clonedParent) {
      var tagName = node.tagName;
      if (64 !== tagName.charCodeAt(0)) {
        // @
        return _cloneNode(node, placeholders, tmplNode, clonedParent);
      }
      placeholders.$isEmpty = false;
      var parentIsCompo = clonedParent && null != placeholders.$compos[clonedParent.tagName];
      if (parentIsCompo) {
        var isSimpleNode = null == node.nodes || 0 === node.nodes.length;
        if (false === isSimpleNode) {
          // Interpolate component slots
          return _cloneNode(node, placeholders, tmplNode, clonedParent);
        }
      }
      isSimpleNode = node.attr.id;
      if (tagName === tag_PLACEHOLDER && null == isSimpleNode) {
        if (null != tmplNode) {
          var tagName_ = tmplNode.tagName;
          if (null != tagName_ && 64 /*@*/ === tmplNode.tagName.charCodeAt(0)) {
            return tmplNode.nodes;
          }
        }
        isSimpleNode = '$root';
        placeholders.$extra = null;
      }
      if (tag_EACH === tagName) {
        var x, arr = placeholders.$getNode(node.expression);
        if (null == arr) {
          if (null == node.attr.optional) {
            (0, reporters_1.error_withNode)('No template node: @' + node.expression, node);
          }
          return null;
        }
        if (false === (0, is_1.is_Array)(arr)) {
          x = arr;
          return _merge(node.nodes, _resolvePlaceholders(x.nodes, x.nodes, new Placeholders(placeholders)), x, clonedParent);
        }
        var fragment = new exports_2.Dom.Fragment(), imax = arr.length, i = -1;
        while (++i < imax) {
          x = arr[i];
          appendAny(fragment, _merge(node.nodes, _resolvePlaceholders(x, x, new Placeholders(placeholders)), x, clonedParent));
        }
        return fragment;
      }
      if (tag_IF === tagName) {
        var val = eval_(node.expression, placeholders, tmplNode);
        return val ? _merge(node.nodes, placeholders, tmplNode, clonedParent) : null;
      }
      if (null == isSimpleNode) {
        isSimpleNode = tagName.substring(1);
      }
      val = placeholders.$getNode(isSimpleNode, node.expression);
      if (null == val) {
        if (true === placeholders.opts.extending || parentIsCompo) {
          return node;
        }
        return null;
      }
      if (val.parent) {
        _modifyParents(clonedParent, val.parent);
      }
      var wrapperNode, tagName = val.nodes;
      if (void 0 !== node.attr.as) {
        tagName_ = node.attr.as;
        wrapperNode = {
          type: dom_NODE,
          tagName: tagName_,
          attr: _mergeAttr(node.attr, val.attr, placeholders, tmplNode),
          parent: clonedParent,
          nodes: tagName
        };
        wrapperNode.attr.as = null;
      }
      if (null == node.nodes) {
        return _merge(wrapperNode || tagName, placeholders, tmplNode, clonedParent);
      }
      isSimpleNode = _merge(node.nodes, _resolvePlaceholders(tagName, tagName, new Placeholders(placeholders)), val, wrapperNode || clonedParent);
      if (null != wrapperNode) {
        wrapperNode.nodes = isSimpleNode;
        return wrapperNode;
      }
      return isSimpleNode;
    }
    function _mergeAttr(a, b, placeholders, tmplNode) {
      if (null == a || null == b) {
        return a || b;
      }
      var out = interpolate_obj_(a, placeholders, tmplNode);
      for (var key in b) {
        out[key] = interpolate_str_(b[key], placeholders, tmplNode);
      }
      return out;
    }
    function _cloneNode(node, placeholders, tmplNode, clonedParent) {
      var tagName = node.tagName || node.compoName;
      var deepClone = true;
      switch (tagName) {
       case ':template':
        var id = interpolate_str_(node.attr.id, placeholders, tmplNode);
        exports_6.Templates.register(id, node.nodes);
        return null;

       case ':import':
        id = interpolate_str_(node.attr.id, placeholders, tmplNode), id = exports_6.Templates.resolve(node, id);
        return _merge(id, placeholders, tmplNode, clonedParent);

       case 'function':
       case 'define':
       case 'let':
       case 'var':
       case 'import':
       case 'script':
       case 'style':
       case 'slot':
       case 'event':
       case 'await':
        return node;

       case 'include':
        tagName = node.attr.id;
        if (null == tagName) {
          tagName = (0, attr_1.attr_first)(node.attr);
        }
        tagName = interpolate_str_(tagName, placeholders, tmplNode);
        var handler = (0, exports_4.customTag_get)(tagName, tmplNode);
        if (null != handler) {
          var proto = handler.prototype;
          id = proto.template || proto.nodes;
          placeholders.$isEmpty = false;
          var next = _resolvePlaceholders(node.nodes, node.nodes, new Placeholders(placeholders, node.nodes));
          return _merge(id, next, tmplNode, clonedParent);
        }
        break;

       default:
        handler = (0, exports_4.customTag_get)(tagName, tmplNode);
        if (null != handler) {
          placeholders.$compos[tagName] = handler;
          proto = handler.prototype;
          if (proto && null != proto.meta && 'merge' !== proto.meta.template) {
            deepClone = false;
          }
        }
        break;
      }
      var outnode = _cloneNodeShallow(node, clonedParent, placeholders, tmplNode);
      if (true === deepClone && outnode.nodes) {
        outnode.nodes = _merge(node.nodes, placeholders, tmplNode, outnode);
      }
      return outnode;
    }
    function _cloneNodeShallow(node, clonedParent, placeholders, tmplNode) {
      return {
        type: node.type,
        tagName: node.tagName,
        attr: interpolate_obj_(node.attr, placeholders, tmplNode),
        props: null == node.props ? null : interpolate_obj_(node.props, placeholders, tmplNode),
        expression: interpolate_str_(node.expression, placeholders, tmplNode),
        controller: node.controller,
        // use original parent, to preserve the module scope for the node of each template
        parent: node.parent || clonedParent,
        nodes: node.nodes,
        sourceIndex: node.sourceIndex
      };
    }
    function _cloneTextNode(node, placeholders, tmplNode, clonedParent) {
      return {
        type: node.type,
        content: interpolate_str_(node.content, placeholders, tmplNode),
        parent: node.parent || clonedParent,
        sourceIndex: node.sourceIndex
      };
    }
    function _cloneDecorator(node, placeholders, tmplNode, clonedParent) {
      clonedParent = new exports_2.Dom.DecoratorNode(node.expression, clonedParent || node.parent);
      clonedParent.sourceIndex = node.sourceIndex;
      return clonedParent;
    }
    function interpolate_obj_(obj, placeholders, node) {
      var clone = (0, obj_1._Object_create)(obj);
      for (var key in clone) {
        var x = clone[key];
        if (null == x) {
          continue;
        }
        if ('@[...attr]' === key) {
          // When `node` is component, the original node is under `node` property
          var attr = (node.node || node).attr;
          for (var key_1 in attr) {
            var val = attr[key_1];
            if ('class' === key_1) {
              var current = clone[key_1];
              if (null != current) {
                var isFn = false;
                if ((0, is_1.is_Function)(current)) {
                  isFn = true;
                  current = current();
                }
                if ((0, is_1.is_Function)(val)) {
                  isFn = true;
                  val = val();
                }
                current += ' ' + val;
                clone[key_1] = isFn ? (0, exports_1.parser_ensureTemplateFunction)(current) : current;
                continue;
              }
            }
            clone[key_1] = val;
          }
          clone[key] = null;
          continue;
        }
        clone[key] = interpolate_str_(x, placeholders, node);
      }
      return clone;
    }
    function interpolate_str_(mix, placeholders, node) {
      var index = -1, isFn = false, str = mix;
      if ('function' === typeof mix) {
        isFn = true;
        str = mix();
      }
      if ('string' !== typeof str || -1 === (index = str.indexOf('@'))) {
        return mix;
      }
      if (null != placeholders) {
        placeholders.$isEmpty = false;
      }
      var c, result = str.substring(0, index), length = str.length, isBlockEntry = 91 === str.charCodeAt(index + 1), // [
      last = -1;
      while (index < length) {
        // interpolation
        last = index;
        if (true === isBlockEntry) {
          index = (0, exports_5.cursor_groupEnd)(str, index + 2, length, 91, 93);
          // []
          if (-1 === index) {
            index = length;
          }
          last += 2;
        } else {
          while (index < length) {
            c = str.charCodeAt(++index);
            if (36 === c || 95 === c || 46 === c) {
              // $ _ .
              continue;
            }
            if (48 <= c && c <= 57 || // 0-9
            65 <= c && c <= 90 || // A-Z
            97 <= c && c <= 122) {
              // a-z
              continue;
            }
            break;
          }
        }
        var expr = str.substring(last, index);
        var fn = isBlockEntry ? eval_ : interpolate_;
        fn = fn(expr, placeholders, node);
        if (null != fn) {
          if ((0, is_1.is_Function)(fn)) {
            isFn = true;
            fn = fn();
          }
          result += fn;
        } else if (true === placeholders.opts.extending || false === isBlockEntry) {
          // leave not block entries inplace, handles emails etc.
          result += isBlockEntry ? '@[' + expr + ']' : expr;
        }
        // tail
        last = isBlockEntry ? index + 1 : index;
        index = str.indexOf('@', index);
        if (-1 === index) {
          index = length;
        }
        result += str.substring(last, index);
      }
      return isFn ? (0, exports_1.parser_ensureTemplateFunction)(result) : result;
    }
    function interpolate_(path, placeholders, node) {
      var index = path.indexOf('.');
      if (-1 === index) {
        (0, reporters_1.log_warn)('Merge templates. Accessing node', path);
        return null;
      }
      var tagName = path.substring(0, index), id = tagName.substring(1), path = path.substring(index + 1), index = null;
      if (null != node) {
        if ('@attr' === tagName) {
          return interpolate_getAttr_(node, placeholders, path);
        } else if ('@counter' === tagName) {
          return interpolate_getCounter_(path);
        } else if (tagName === node.tagName) {
          index = node;
        }
      }
      if (null == index) {
        index = placeholders.$getNode(id);
      }
      if (null == index) {
        //- log_error('Merge templates. Node not found', tagName);
        return null;
      }
      return (0, obj_1.obj_getProperty)(index, path);
    }
    function interpolate_getAttr_(node, placeholders, prop) {
      var x = node.attr && node.attr[prop];
      var el = placeholders;
      while (null == x && null != el) {
        x = el.attr && el.attr[prop];
        el = el.parent;
      }
      return x;
    }
    var interpolate_getCounter_;
    (function() {
      var _counters = {};
      interpolate_getCounter_ = function(prop) {
        var i = _counters[prop] || 0;
        return _counters[prop] = ++i;
      };
    })();
    function appendAny(node, mix) {
      if (null == mix) {
        return;
      }
      if ('function' === typeof mix.concat) {
        var imax = mix.length;
        for (var i = 0; i < imax; i++) {
          appendAny(node, mix[i]);
        }
        return;
      }
      if (mix.type === dom_FRAGMENT) {
        appendAny(node, mix.nodes);
        return;
      }
      if ('function' === typeof node.appendChild) {
        node.appendChild(mix);
        return;
      }
      var l = node.length;
      if (l > 0) {
        l = node[l - 1];
        l.nextSibling = mix;
      }
      node.push(mix);
    }
    var RESERVED = ' else placeholder each attr if parent scope';
    function _resolvePlaceholders(root, node, placeholders) {
      if (null == node) {
        return placeholders;
      }
      if ((0, is_1.is_Array)(node)) {
        var imax = node.length, i = -1;
        while (++i < imax) {
          _resolvePlaceholders(node === root ? node[i] : root, node[i], placeholders);
        }
        return placeholders;
      }
      var type = node.type;
      if (type === dom_TEXTNODE) {
        return placeholders;
      }
      if (type === dom_NODE) {
        type = node.tagName;
        if (null != type && 64 === type.charCodeAt(0)) {
          // @
          placeholders.$count++;
          type = type.substring(1);
          // if DEBUG
          if (-1 !== RESERVED.indexOf(' ' + type + ' ')) {
            (0, reporters_1.log_error)('MaskMerge. Reserved Name', type);
            // endif
          }
          var x = {
            tagName: node.tagName,
            parent: _getParentModifiers(root, node),
            nodes: node.nodes,
            attr: node.attr,
            expression: node.expression,
            type: node.type
          };
          if (null == placeholders[type]) {
            placeholders[type] = x;
          } else {
            var current = placeholders[type];
            if ((0, is_1.is_Array)(current)) {
              current.push(x);
            } else {
              placeholders[type] = [ current, x ];
            }
          }
          return placeholders;
        }
      }
      type = placeholders.$count;
      current = _resolvePlaceholders(root, node.nodes, placeholders);
      if (root === node && type === placeholders.$count) {
        placeholders.$extra.push(root);
      }
      return current;
    }
    function _getParentModifiers(root, node) {
      if (node === root) {
        return null;
      }
      var current, parents, parent = node.parent;
      while (true) {
        if (null == parent) {
          break;
        }
        if (parent === root && root.type !== dom_NODE) {
          break;
        }
        var p = {
          type: parent.type,
          tagName: parent.tagName,
          attr: parent.attr,
          controller: parent.controller,
          expression: parent.expression,
          nodes: null,
          parent: null
        };
        if (null == parents) {
          current = parents = p;
        } else {
          current.parent = p;
          current = p;
        }
        parent = parent.parent;
      }
      return parents;
    }
    function _modifyParents(clonedParent, parents) {
      var nodeParent = clonedParent, modParent = parents;
      while (null != nodeParent && null != modParent) {
        if (modParent.tagName) {
          nodeParent.tagName = modParent.tagName;
        }
        if (modParent.expression) {
          nodeParent.expression = modParent.expression;
        }
        for (var key in modParent.attr) {
          nodeParent.attr[key] = modParent.attr[key];
        }
        nodeParent = nodeParent.parent;
        modParent = modParent.parent;
      }
    }
    function eval_(expr, placeholders, tmplNode) {
      if (null != tmplNode) {
        placeholders.attr = tmplNode.attr;
      }
      return (0, exports_3.expression_eval)(expr, placeholders, null, placeholders);
    }
    function Placeholders(parent, nodes, opts) {
      var $root = null;
      if (null != nodes) {
        $root = new exports_2.Dom.Node(tag_PLACEHOLDER);
        $root.nodes = nodes;
      }
      this.scope = this;
      this.parent = parent;
      this.$root = $root || parent && parent.$root;
      this.$extra = [];
      this.$compos = {};
      if (null != opts) {
        this.opts = opts;
      } else if (null != parent) {
        this.opts = parent.opts;
      }
    }
    Placeholders.prototype = {
      opts: {
        extending: false
      },
      parent: null,
      attr: null,
      scope: null,
      $root: null,
      $extra: null,
      $count: 0,
      $isEmpty: true,
      $compos: null,
      $getNode: function(id, filter) {
        var node, ctx = this;
        while (null != ctx) {
          node = ctx[id];
          if (null != node) {
            break;
          }
          ctx = ctx.parent;
        }
        if (null != filter && null != node) {
          node = {
            nodes: (0, jMask_1.jMask)(node.nodes).filter(filter)
          };
        }
        return node;
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_merge === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_merge) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_merge, module.exports);
    } else {
      _ref_mask_src_feature_merge = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_parsers_content_style;
  (function() {
    var exports = null != _ref_mask_src_parser_parsers_content_style ? _ref_mask_src_parser_parsers_content_style : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Style = void 0;
    var interpolation_1 = _ref_mask_src_parser_interpolation;
    exports.Style = {
      transform: function(body, attr, parent) {
        if (null != attr.self) {
          attr = parent.attr.style;
          parent.attr.style = (0, interpolation_1.parser_ensureTemplateFunction)((attr || '') + body);
          return null;
        }
        return body;
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_parsers_content_style === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_parsers_content_style) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_parsers_content_style, module.exports);
    } else {
      _ref_mask_src_parser_parsers_content_style = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_parsers_content;
  (function() {
    var exports = null != _ref_mask_src_parser_parsers_content ? _ref_mask_src_parser_parsers_content : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var config_1 = _ref_mask_src_api_config;
    var is_1 = _ref_utils_src_is;
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_src_dom_exports;
    var style_1 = _ref_mask_src_parser_parsers_content_style;
    var reporters_1 = _ref_mask_src_util_reporters;
    var cursor_1 = _ref_mask_src_parser_cursor;
    var const_1 = _ref_mask_src_parser_const;
    var attributes_1 = _ref_mask_src_parser_mask_partials_attributes;
    var interpolation_1 = _ref_mask_src_parser_interpolation;
    var literal_1 = _ref_mask_src_parser_mask_partials_literal;
    exports.custom_Parsers['style'] = createParser('style', style_1.Style.transform);
    exports.custom_Parsers['script'] = createParser('script');
    var ContentNode = /** @class */ function(_super) {
      __extends(ContentNode, _super);
      function ContentNode() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.content = null;
        _this.id = null;
        return _this;
      }
      ContentNode.prototype.stringify = function(stream) {
        stream.processHead(this);
        var body = this.content;
        if (null == body) {
          stream.print(';');
          return;
        }
        if ((0, is_1.is_Function)(body)) {
          body = body();
        }
        stream.openBlock('{');
        stream.print(body);
        stream.closeBlock('}');
        return;
      };
      return ContentNode;
    }(exports_2.Dom.Node);
    var COUNTER = 0;
    var PRFX = '_cm_';
    function createParser(name, transform) {
      return function(str, i, imax, parent) {
        var attr, body, c, start = i;
        while (i < imax) {
          c = str.charCodeAt(i);
          if (123 === c || 59 === c || 62 === c) {
            //{;>
            break;
          }
          i++;
        }
        attr = (0, attributes_1.parser_parseAttr)(str, start, i);
        for (var key in attr) {
          attr[key] = (0, interpolation_1.parser_ensureTemplateFunction)(attr[key]);
        }
        if (62 === c) {
          var start = (0, cursor_1.cursor_skipWhitespace)(str, i + 1, imax);
          start = str.charCodeAt(start);
          if (34 !== start && 39 !== start) {
            // "'
            start = new exports_2.Dom.Node(name, parent);
            start.attr = attr;
            // `>` handle single without literal as generic mask node
            return [ start, i, const_1.go_tag ];
          }
        }
        start = i;
        hasBody = 123 === c || 62 === c;
        if (hasBody) {
          i++;
          if (123 === c) {
            start = (0, cursor_1.cursor_groupEnd)(str, i, imax, 123, 125); //{}
            body = str.substring(i, start);
          }
          if (62 === c) {
            var hasBody = (0, literal_1.parser_parseLiteral)(str, i, imax);
            if (null == hasBody) {
              return null;
            }
            start = hasBody[1];
            body = hasBody[0];
            // move cursor one back to be consistance with the group
            --start;
          }
          if (null != transform) {
            body = transform(body, attr, parent);
            if (null == body) {
              return [ null, start + 1 ];
            }
          }
          body = preprocess(name, body);
          if ('script' !== name) {
            body = (0, interpolation_1.parser_ensureTemplateFunction)(body);
          }
        }
        hasBody = new ContentNode(name, parent);
        hasBody.content = body;
        hasBody.attr = attr;
        hasBody.id = PRFX + ++COUNTER;
        return [ hasBody, start + 1, 0 ];
      };
    }
    function preprocess(name, body) {
      name = config_1.__cfg.preprocessor[name];
      if (null == name) {
        return body;
      }
      name = name(body);
      if (null == name) {
        (0, reporters_1.log_error)('Preprocessor must return a string');
        return body;
      }
      return name;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_parsers_content === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_parsers_content) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_parsers_content, module.exports);
    } else {
      _ref_mask_src_parser_parsers_content = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_parsers_define;
  (function() {
    var exports = null != _ref_mask_src_parser_parsers_define ? _ref_mask_src_parser_parsers_define : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var exports_1 = _ref_mask_src_dom_exports;
    var exports_2 = _ref_mask_src_custom_exports;
    var const_1 = _ref_mask_src_parser_const;
    var class_1 = _ref_utils_src_class;
    var ObjectLexer_1 = _ref_mask_src_parser_object_ObjectLexer;
    (function() {
      createParser('define');
      createParser('let');
      function createParser(tagName) {
        exports_2.custom_Parsers[tagName] = function(str, i, imax, parent) {
          parent = new DefineNode(tagName, parent);
          str = lex_(str, i, imax, parent);
          return [ parent, str, const_1.go_tag ];
        };
      }
      var lex_ = (0, ObjectLexer_1.parser_ObjectLexer)('$name', '? ?(($$arguments[$$name<token>?(? :? $$type<accessor>)](,)))?(as $$as(*()))?(extends $$extends[$$compo<accessor>](,))', '{');
      var DefineNode = (0, class_1.class_create)(exports_1.Dom.Node, {
        as: null,
        name: null,
        extends: null,
        arguments: null,
        stringify: function(stream) {
          var extends_ = this['extends'], args_ = this['arguments'], as_ = this['as'], str = '';
          if (null != args_ && 0 !== args_.length) {
            str += ' (';
            str += toCommaSeperated(args_, get_arg);
            str += ')';
          }
          if (null != as_ && 0 !== as_.length) {
            str += ' as (' + as_ + ')';
          }
          if (null != extends_ && 0 !== extends_.length) {
            str += ' extends ';
            str += toCommaSeperated(extends_, get_compo);
          }
          args_ = this.tagName + ' ' + this.name + str;
          stream.write(args_);
          stream.openBlock('{');
          stream.process(this.nodes);
          stream.closeBlock('}');
        }
      });
      function toCommaSeperated(arr, getter) {
        var imax = arr.length, i = -1, str = '';
        while (++i < imax) {
          str += getter(arr[i]);
          if (i < imax - 1) {
            str += ', ';
          }
        }
        return str;
      }
      function get_compo(x) {
        return x.compo;
      }
      function get_arg(x) {
        var arg = x.name;
        if (null != x.type) {
          arg += ': ' + x.type;
        }
        return arg;
      }
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_parsers_define === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_parsers_define) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_parsers_define, module.exports);
    } else {
      _ref_mask_src_parser_parsers_define = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_parsers_import;
  (function() {
    var exports = null != _ref_mask_src_parser_parsers_import ? _ref_mask_src_parser_parsers_import : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_utils_src_class;
    var exports_1 = _ref_mask_src_dom_exports;
    var exports_2 = _ref_mask_src_custom_exports;
    var ObjectLexer_1 = _ref_mask_src_parser_object_ObjectLexer;
    var IMPORT = 'import';
    var IMPORTS = 'imports';
    exports_2.custom_Parsers[IMPORT] = function(str, i, imax, parent) {
      var obj = {
        exports: null,
        alias: null,
        path: null,
        namespace: null,
        async: null,
        link: null,
        mode: null,
        moduleType: null,
        contentType: null,
        attr: null
      };
      str = lex_(str, i, imax, obj);
      return [ new ImportNode(parent, obj), str, 0 ];
    };
    exports_2.custom_Parsers_Transform[IMPORT] = function(current) {
      if (current.tagName === IMPORTS) {
        return null;
      }
      var imports = new ImportsNode('imports', current);
      current.appendChild(imports);
      return imports;
    };
    var default_LINK = 'static', default_MODE = 'both';
    var lex_ = (0, ObjectLexer_1.parser_ObjectLexer)('?($$async(async|sync) )', [ '"$path"', 'from |("$path"$$namespace<accessor>)', '* as $alias from |("$path"$$namespace<accessor>)', '$$exports[$name?(as $alias)](,) from |("$path"$$namespace<accessor>)' ], '?(is $$flags{link:dynamic|static;contentType:mask|script|style|json|text;mode:client|server|both})', '?(as $moduleType)', '?(($$attr[$key? =? "$value"]( )))');
    var ImportsNode = (0, exports.class_create)(exports_1.Dom.Node, {
      stringify: function(stream) {
        stream.process(this.nodes);
      }
    });
    var ImportNode = (0, exports.class_create)({
      type: exports_1.Dom.COMPONENT,
      tagName: IMPORT,
      contentType: null,
      moduleType: null,
      namespace: null,
      exports: null,
      alias: null,
      async: null,
      path: null,
      link: null,
      mode: null,
      constructor: function(parent, obj) {
        this.path = obj.path;
        this.alias = obj.alias;
        this.async = obj.async;
        this.exports = obj.exports;
        this.namespace = obj.namespace;
        this.moduleType = obj.moduleType;
        this.contentType = obj.contentType;
        this.attr = null == obj.attr ? null : this.toObject(obj.attr);
        this.link = obj.link || default_LINK;
        this.mode = obj.mode || default_MODE;
        this.parent = parent;
      },
      stringify: function() {
        var from = ' from ', importStr = IMPORT, type = this.contentType, link = this.link, mode = this.mode;
        if (null != this.path) {
          from += '\'' + this.path + '\'';
        }
        if (null != this.namespace) {
          from += this.namespace;
        }
        if (null != type || link !== default_LINK || mode !== default_MODE) {
          from += ' is';
          if (null != type) {
            from += ' ' + type;
          }
          if (link !== default_LINK) {
            from += ' ' + link;
          }
          if (mode !== default_MODE) {
            from += ' ' + mode;
          }
        }
        if (null != this.moduleType) {
          from += ' as ' + this.moduleType;
        }
        if (null != this.async) {
          importStr += ' ' + this.async;
        }
        if (null != this.attr) {
          var initAttr = '(', attr = initAttr;
          for (var key in this.attr) {
            if (attr !== initAttr) {
              attr += ' ';
            }
            attr += key + '=\'' + this.attr[key] + '\'';
          }
          attr += ')';
          from += ' ' + attr;
        }
        from += ';';
        if (null != this.alias) {
          return importStr + ' * as ' + this.alias + from;
        }
        if (null != this.exports) {
          var x, arr = this.exports, str = '', imax = arr.length, i = -1;
          while (++i < imax) {
            x = arr[i];
            str += x.name;
            if (x.alias) {
              str += ' as ' + x.alias;
            }
            if (i !== imax - 1) {
              str += ', ';
            }
          }
          return importStr + ' ' + str + from;
        }
        return importStr + from;
      },
      toObject: function(arr) {
        var obj = {}, i = arr.length;
        while (--i > -1) {
          obj[arr[i].key] = arr[i].value;
        }
        return obj;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_parsers_import === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_parsers_import) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_parsers_import, module.exports);
    } else {
      _ref_mask_src_parser_parsers_import = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_parser_parsers_var;
  (function() {
    var exports = null != _ref_mask_src_parser_parsers_var ? _ref_mask_src_parser_parsers_var : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_utils_src_class;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_src_dom_exports;
    var exports_3 = _ref_mask_projects_expression_src_exports;
    var cursor_1 = _ref_mask_src_parser_cursor;
    exports_1.custom_Parsers['var'] = function(str, index, length, parent) {
      var start, c, node = new VarNode('var', parent);
      var key, go_varName = 1, go_assign = 2, go_value = 3, go_next = 4, state = go_varName;
      while (true) {
        if (index < length && (c = str.charCodeAt(index)) < 33) {
          index++;
          continue;
        }
        if (state === go_varName) {
          start = index;
          index = (0, cursor_1.cursor_refEnd)(str, index, length);
          key = str.substring(start, index);
          state = go_assign;
          continue;
        }
        if (state === go_assign) {
          if (61 !== c) {
            // =
            (0, reporters_1.parser_error)('Assignment expected', str, index, c, 'var');
            return [ node, index ];
          }
          state = go_value;
          index++;
          continue;
        }
        if (state === go_value) {
          start = index;
          index++;
          switch (c) {
           case 123:
           case 91:
            // { [
            index = (0, cursor_1.cursor_groupEnd)(str, index, length, c, c + 2);
            break;

           case 39:
           case 34:
            // ' "
            index = (0, cursor_1.cursor_quoteEnd)(str, index, length, 39 === c ? '\'' : '"');
            break;

           default:
            while (index < length) {
              c = str.charCodeAt(index);
              if (91 === c || 40 === c) {
                // [ (
                index = (0, cursor_1.cursor_groupEnd)(str, index + 1, length, c, 91 === c ? 93 : 41);
                continue;
              }
              if (44 === c || 59 === c) {
                //, ;
                break;
              }
              index++;
            }
            index--;
            break;
          }
          index++;
          node.attr[key] = str.substring(start, index);
          state = go_next;
          continue;
        }
        if (state === go_next) {
          if (44 === c) {
            // ,
            state = go_varName;
            index++;
            continue;
          }
          break;
        }
      }
      return [ node, index, 0 ];
    };
    var VarNode = (0, exports.class_create)(exports_2.Dom.Node, {
      stringify: function() {
        var attr = this.attr;
        var str = 'var ';
        for (var key in attr) {
          if ('var ' !== str) {
            str += ',';
          }
          str += key + '=' + attr[key];
        }
        return str + ';';
      },
      getObject: function(model, ctx, ctr) {
        var key, obj = {}, attr = this.attr;
        for (key in attr) {
          obj[key] = (0, exports_3.expression_eval)(attr[key], model, ctx, ctr);
        }
        return obj;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_parser_parsers_var === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_parser_parsers_var) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_parser_parsers_var, module.exports);
    } else {
      _ref_mask_src_parser_parsers_var = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_scope_vars;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_scope_vars ? _ref_mask_projects_expression_src_scope_vars : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.type_Array = exports.type_Object = exports.type_String = exports.type_Number = exports.type_Value = exports.type_AccessorExpr = exports.type_Accessor = exports.type_FunctionRef = exports.type_SymbolRef = exports.type_Statement = exports.type_Body = exports.go_objectKey = exports.go_number = exports.go_string = exports.go_acs = exports.go_ref = exports.punc_Semicolon = exports.punc_Colon = exports.punc_Question = exports.punc_Dot = exports.punc_Comma = exports.punc_BraceClose = exports.punc_BraceOpen = exports.punc_BracketClose = exports.punc_BracketOpen = exports.punc_ParenthesisClose = exports.punc_ParenthesisOpen = exports.op_BitAnd = exports.op_BitXOr = exports.op_BitOr = exports.op_ObserveAccessor = exports.op_AsyncAccessor = exports.op_Member = exports.op_LogicalLessEqual = exports.op_LogicalLess = exports.op_LogicalGreaterEqual = exports.op_LogicalGreater = exports.op_LogicalNotEqual_Strict = exports.op_LogicalNotEqual = exports.op_LogicalEqual_Strict = exports.op_LogicalEqual = exports.op_LogicalNot = exports.op_LogicalAnd = exports.op_NullishCoalescing = exports.op_LogicalOr = exports.op_Modulo = exports.op_Multip = exports.op_Divide = exports.op_Plus = exports.op_Minus = void 0;
    exports.PRECEDENCE = exports.state_arguments = exports.state_body = exports.type_Ternary = exports.type_UnaryPrefix = void 0;
    var obj_1 = _ref_utils_src_obj;
    exports.op_Minus = '-'; //1;
    exports.op_Plus = '+'; //2;
    exports.op_Divide = '/'; //3;
    exports.op_Multip = '*'; //4;
    exports.op_Modulo = '%'; //5;
    exports.op_LogicalOr = '||'; //6;
    exports.op_NullishCoalescing = '??';
    exports.op_LogicalAnd = '&&'; //7;
    exports.op_LogicalNot = '!'; //8;
    exports.op_LogicalEqual = '=='; //9;
    exports.op_LogicalEqual_Strict = '==='; // 111
    exports.op_LogicalNotEqual = '!='; //11;
    exports.op_LogicalNotEqual_Strict = '!=='; // 112
    exports.op_LogicalGreater = '>'; //12;
    exports.op_LogicalGreaterEqual = '>='; //13;
    exports.op_LogicalLess = '<'; //14;
    exports.op_LogicalLessEqual = '<='; //15;
    exports.op_Member = '.'; // 16
    exports.op_AsyncAccessor = '->';
    exports.op_ObserveAccessor = '>>';
    exports.op_BitOr = '|';
    exports.op_BitXOr = '^';
    exports.op_BitAnd = '&';
    exports.punc_ParenthesisOpen = 20;
    exports.punc_ParenthesisClose = 21;
    exports.punc_BracketOpen = 22;
    exports.punc_BracketClose = 23;
    exports.punc_BraceOpen = 24;
    exports.punc_BraceClose = 25;
    exports.punc_Comma = 26;
    exports.punc_Dot = 27;
    exports.punc_Question = 28;
    exports.punc_Colon = 29;
    exports.punc_Semicolon = 30;
    exports.go_ref = 31;
    exports.go_acs = 32;
    exports.go_string = 33;
    exports.go_number = 34;
    exports.go_objectKey = 35;
    exports.type_Body = 1;
    exports.type_Statement = 2;
    exports.type_SymbolRef = 3;
    exports.type_FunctionRef = 4;
    exports.type_Accessor = 5;
    exports.type_AccessorExpr = 6;
    exports.type_Value = 7;
    exports.type_Number = 8;
    exports.type_String = 9;
    exports.type_Object = 10;
    exports.type_Array = 11;
    exports.type_UnaryPrefix = 12;
    exports.type_Ternary = 13;
    exports.state_body = 1;
    exports.state_arguments = 2;
    exports.PRECEDENCE = {};
    exports.PRECEDENCE[exports.op_Member] = 1;
    exports.PRECEDENCE[exports.op_Divide] = 2;
    exports.PRECEDENCE[exports.op_Multip] = 2;
    exports.PRECEDENCE[exports.op_Minus] = 3;
    exports.PRECEDENCE[exports.op_Plus] = 3;
    exports.PRECEDENCE[exports.op_LogicalGreater] = 4;
    exports.PRECEDENCE[exports.op_LogicalGreaterEqual] = 4;
    exports.PRECEDENCE[exports.op_LogicalLess] = 4;
    exports.PRECEDENCE[exports.op_LogicalLessEqual] = 4;
    exports.PRECEDENCE[exports.op_LogicalEqual] = 5;
    exports.PRECEDENCE[exports.op_LogicalEqual_Strict] = 5;
    exports.PRECEDENCE[exports.op_LogicalNotEqual] = 5;
    exports.PRECEDENCE[exports.op_LogicalNotEqual_Strict] = 5;
    exports.PRECEDENCE[exports.op_BitOr] = 5;
    exports.PRECEDENCE[exports.op_BitXOr] = 5;
    exports.PRECEDENCE[exports.op_BitAnd] = 5;
    exports.PRECEDENCE[exports.op_LogicalAnd] = 7;
    exports.PRECEDENCE[exports.op_LogicalOr] = 7;
    (0, obj_1.obj_toFastProps)(exports.PRECEDENCE);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_scope_vars === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_scope_vars) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_scope_vars, module.exports);
    } else {
      _ref_mask_projects_expression_src_scope_vars = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_ast;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_ast ? _ref_mask_projects_expression_src_ast : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Ast_TernaryStatement = exports.Ast_UnaryPrefix = exports.Ast_AccessorExpr = exports.Ast_Accessor = exports.Ast_SymbolRef = exports.Ast_FunctionRef = exports.Ast_Object = exports.Ast_Array = exports.Ast_Value = exports.Ast_Statement = exports.Ast_Body = void 0;
    var scope_vars_1 = _ref_mask_projects_expression_src_scope_vars;
    var is_1 = _ref_utils_src_is;
    var Ast_Body = /** @class */ function() {
      function Ast_Body(parent, node) {
        this.parent = parent;
        this.node = node;
        this.body = [];
        this.join = null;
        this.type = scope_vars_1.type_Body;
        this.source = null;
        this.async = false;
        this.observe = false;
      }
      Ast_Body.prototype.toString = function() {
        var arr = this.body, l = arr.length, str = '';
        for (var i = 0; i < l; i++) {
          if (i > 0) {
            str += ', ';
          }
          str += arr[i].toString();
        }
        return str;
      };
      return Ast_Body;
    }();
    exports.Ast_Body = Ast_Body;
    var Ast_Statement = /** @class */ function() {
      function Ast_Statement(parent) {
        this.parent = parent;
        this.type = scope_vars_1.type_Statement;
        this.join = null;
        this.body = null;
        this.async = false;
        this.observe = false;
        this.preResultIndex = -1;
      }
      Ast_Statement.prototype.toString = function() {
        var _a;
        return null !== (_a = null === (_a = this.body) || void 0 === _a ? void 0 : _a.toString()) && void 0 !== _a ? _a : '';
      };
      return Ast_Statement;
    }();
    exports.Ast_Statement = Ast_Statement;
    var Ast_Value = /** @class */ function() {
      function Ast_Value(body) {
        this.body = body;
        this.type = scope_vars_1.type_Value;
        this.join = null;
      }
      Ast_Value.prototype.toString = function() {
        if ((0, is_1.is_String)(this.body)) {
          return '\'' + this.body.replace(/'/g, '\\\'') + '\'';
        }
        return this.body;
      };
      return Ast_Value;
    }();
    exports.Ast_Value = Ast_Value;
    Ast_Value = /** @class */ function() {
      function Ast_Array(parent) {
        this.parent = parent;
        this.type = scope_vars_1.type_Array;
        this.body = null;
        this.body = new Ast_Body(this);
      }
      Ast_Array.prototype.toString = function() {
        return '[' + this.body.toString() + ']';
      };
      return Ast_Array;
    }();
    exports.Ast_Array = Ast_Value;
    Ast_Value = /** @class */ function() {
      function Ast_Object(parent) {
        this.parent = parent;
        this.type = scope_vars_1.type_Object;
        this.props = {};
      }
      Ast_Object.prototype.nextProp = function(prop) {
        var body = new Ast_Statement(this);
        this.props[prop] = body;
        return body;
      };
      return Ast_Object;
    }();
    exports.Ast_Object = Ast_Value;
    Ast_Value = /** @class */ function() {
      function Ast_FunctionRef(parent, ref) {
        this.parent = parent;
        this.type = scope_vars_1.type_FunctionRef;
        this.body = null;
        this.arguments = [];
        this.next = null;
        this.body = ref;
      }
      Ast_FunctionRef.prototype.newArg = function() {
        var body = new Ast_Body(this);
        this.arguments.push(body);
        return body;
      };
      Ast_FunctionRef.prototype.closeArgs = function() {
        var last = this.arguments[this.arguments.length - 1];
        if (0 === last.body.length) {
          this.arguments.pop();
        }
      };
      Ast_FunctionRef.prototype.toString = function() {
        var args = this.arguments.map(function(x) {
          return x.toString();
        }).join(', ');
        return this.body + '(' + args + ')';
      };
      return Ast_FunctionRef;
    }();
    exports.Ast_FunctionRef = Ast_Value;
    Ast_Value = /** @class */ function() {
      function Ast_SymbolRef(parent, ref) {
        this.parent = parent;
        this.type = scope_vars_1.type_SymbolRef;
        this.optional = false;
        this.sourceIndex = null;
        this.next = null;
        this.body = null;
        this.body = ref;
      }
      Ast_SymbolRef.prototype.toString = function() {
        return null == this.next ? this.body : ''.concat(this.body, '.').concat(this.next.toString());
      };
      return Ast_SymbolRef;
    }();
    exports.Ast_SymbolRef = Ast_Value;
    Ast_Value = /** @class */ function() {
      function Ast_Accessor(parent, ref) {
        this.parent = parent;
        this.optional = false;
        this.sourceIndex = null;
        this.next = null;
        this.body = null;
        this.type = scope_vars_1.type_Accessor;
        this.parent = parent;
        this.body = ref;
      }
      Ast_Accessor.prototype.toString = function() {
        return '.' + this.body + (null == this.next ? '' : this.next.toString());
      };
      return Ast_Accessor;
    }();
    exports.Ast_Accessor = Ast_Value;
    Ast_Value = /** @class */ function() {
      function Ast_AccessorExpr(parent) {
        this.parent = parent;
        this.type = scope_vars_1.type_AccessorExpr;
        this.body = null;
        this.body = new Ast_Statement(this);
        this.body.body = new Ast_Body(this.body);
      }
      Ast_AccessorExpr.prototype.getBody = function() {
        return this.body.body;
      };
      Ast_AccessorExpr.prototype.toString = function() {
        return '[' + this.body.toString() + ']';
      };
      return Ast_AccessorExpr;
    }();
    exports.Ast_AccessorExpr = Ast_Value;
    Ast_Value = /** @class */ function() {
      function Ast_UnaryPrefix(parent, prefix) {
        this.parent = parent;
        this.prefix = prefix;
        this.type = scope_vars_1.type_UnaryPrefix;
        this.body = null;
      }
      return Ast_UnaryPrefix;
    }();
    exports.Ast_UnaryPrefix = Ast_Value;
    Ast_Value = /** @class */ function() {
      function Ast_TernaryStatement(body) {
        this.type = scope_vars_1.type_Ternary;
        this.body = null;
        this.case1 = new Ast_Body(this);
        this.case2 = new Ast_Body(this);
        this.async = false;
        this.observe = false;
        this.body = body;
        this.async = body.async;
        this.observe = body.observe;
      }
      return Ast_TernaryStatement;
    }();
    exports.Ast_TernaryStatement = Ast_Value;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_ast === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_ast) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_ast, module.exports);
    } else {
      _ref_mask_projects_expression_src_ast = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_ast_utils;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_ast_utils ? _ref_mask_projects_expression_src_ast_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ast_handlePrecedence = exports.ast_findPrev = exports.ast_remove = void 0;
    var scope_vars_1 = _ref_mask_projects_expression_src_scope_vars;
    var ast_1 = _ref_mask_projects_expression_src_ast;
    function ast_remove(parent, ref) {
      if (parent.type === scope_vars_1.type_Statement) {
        parent.body = null;
      }
    }
    exports.ast_remove = ast_remove;
    function ast_findPrev(node, nodeType) {
      var x = node;
      while (null != x) {
        if (x.type === nodeType) {
          return x;
        }
        x = x.parent;
      }
      return null;
    }
    exports.ast_findPrev = ast_findPrev;
    function ast_handlePrecedence(ast) {
      if (ast.type !== scope_vars_1.type_Body) {
        if (null != ast.body && 'object' === typeof ast.body) {
          ast_handlePrecedence(ast.body);
        }
        return;
      }
      var x, prev, array, body = ast.body, i = 0, length = body.length;
      if (0 === length) {
        return;
      }
      for (;i < length; i++) {
        ast_handlePrecedence(body[i]);
      }
      for (i = 1; i < length; i++) {
        x = body[i];
        prev = body[i - 1];
        if (scope_vars_1.PRECEDENCE[prev.join] > scope_vars_1.PRECEDENCE[x.join]) {
          break;
        }
      }
      if (i === length) {
        return;
      }
      array = [ body[0] ];
      for (i = 1; i < length; i++) {
        x = body[i];
        prev = body[i - 1];
        var prec_Prev = scope_vars_1.PRECEDENCE[prev.join];
        if (prec_Prev > scope_vars_1.PRECEDENCE[x.join] && i < length - 1) {
          var nextJoin, start = i;
          // collect all with join smaller or equal to previous
          // 5 == 3 * 2 + 1 -> 5 == (3 * 2 + 1);
          while (++i < length) {
            nextJoin = body[i].join;
            if (null == nextJoin) {
              break;
            }
            if (prec_Prev <= scope_vars_1.PRECEDENCE[nextJoin]) {
              break;
            }
          }
          start = body.slice(start, i + 1);
          x = ast_join(start);
          ast_handlePrecedence(x);
        }
        array.push(x);
      }
      ast.body = array;
    }
    exports.ast_handlePrecedence = ast_handlePrecedence;
    // = private
    function ast_join(bodyArr) {
      if (0 === bodyArr.length) {
        return null;
      }
      var body = new ast_1.Ast_Body(bodyArr[0].parent);
      body.join = bodyArr[bodyArr.length - 1].join;
      body.body = bodyArr;
      return body;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_ast_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_ast_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_ast_utils, module.exports);
    } else {
      _ref_mask_projects_expression_src_ast_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_astNode_utils;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_astNode_utils ? _ref_mask_projects_expression_src_astNode_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Ast_FunctionRefUtil = void 0;
    var eval_1 = _ref_mask_projects_expression_src_eval;
    exports.Ast_FunctionRefUtil = {
      evalArguments: function(node, model, ctx, ctr, preResults) {
        var args = node.arguments, out = [], i = -1, imax = args.length;
        while (++i < imax) {
          out[i] = (0, eval_1._evaluateAst)(args[i], model, ctx, ctr, preResults);
        }
        return out;
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_astNode_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_astNode_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_astNode_utils, module.exports);
    } else {
      _ref_mask_projects_expression_src_astNode_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_class_SubjectKind;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_class_SubjectKind ? _ref_mask_projects_expression_src_class_SubjectKind : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.SubjectKind = void 0;
    (function(SubjectKind) {
      SubjectKind[SubjectKind['Value'] = 0] = 'Value';
      SubjectKind[SubjectKind['Stream'] = 1] = 'Stream';
      SubjectKind[SubjectKind['Promise'] = 2] = 'Promise';
    })(exports.SubjectKind || (exports.SubjectKind = {}));
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_class_SubjectKind === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_class_SubjectKind) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_class_SubjectKind, module.exports);
    } else {
      _ref_mask_projects_expression_src_class_SubjectKind = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_class_Subscription;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_class_Subscription ? _ref_mask_projects_expression_src_class_Subscription : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Subscription = void 0;
    var Subscription = /** @class */ function() {
      function Subscription(stream, cb) {
        this.stream = stream;
        this.cb = cb;
      }
      Subscription.prototype.unsubscribe = function(cb) {
        var _a;
        this.stream.unsubscribe(null !== (_a = this.cb) && void 0 !== _a ? _a : cb);
      };
      return Subscription;
    }();
    exports.Subscription = Subscription;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_class_Subscription === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_class_Subscription) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_class_Subscription, module.exports);
    } else {
      _ref_mask_projects_expression_src_class_Subscription = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_class_SubjectStream;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_class_SubjectStream ? _ref_mask_projects_expression_src_class_SubjectStream : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.SubjectStream = void 0;
    var Subscription_1 = _ref_mask_projects_expression_src_class_Subscription;
    var SubjectKind_1 = _ref_mask_projects_expression_src_class_SubjectKind;
    var SubjectStream = /** @class */ function() {
      function SubjectStream() {
        this.value = void 0;
        this._error = void 0;
        /// [SuccessCb, ErrorCb, Options][]
        this._cbs = [];
        this.kind = SubjectKind_1.SubjectKind.Stream;
        this.canceled = false;
        this.next = this.next.bind(this);
        this.error = this.error.bind(this);
        this.onInnerChanged = this.onInnerChanged.bind(this);
      }
      SubjectStream.prototype.next = function(x) {
        if (x === this.value) {
          return;
        }
        this.onValue(x);
      };
      SubjectStream.prototype.onValue = function(val) {
        this._error = void 0;
        this.value = val;
        this.call(0, val);
      };
      SubjectStream.prototype.error = function(err) {
        this._error = err;
        this.call(1, err);
      };
      SubjectStream.prototype.current = function() {
        return this.value;
      };
      SubjectStream.prototype.isBusy = function() {
        return void 0 === this.value;
      };
      SubjectStream.prototype.fromStream = function(stream, inner) {
        this._pipe = stream;
        this._inner = inner;
        if (0 !== this._cbs.length) {
          this._pipeSub = stream.subscribe(this.next, this.error);
        }
        if (void 0 === this.value && null != stream.value) {
          this.value = stream.value;
        }
        this._innerSub = null === (inner = this._inner) || void 0 === inner ? void 0 : inner.subscribe(this.onInnerChanged);
      };
      SubjectStream.prototype.subscribe = function(cb, onError, once) {
        if (null != this._pipe && 0 === this._cbs.length) {
          this._pipe.subscribe(this.next, this.error);
        }
        this._cbs.push([ cb, onError, true === once ? CB_ONCE : null ]);
        if (void 0 !== this.value) {
          this.onValue(this.value);
        }
        return new Subscription_1.Subscription(this, cb);
      };
      SubjectStream.prototype.unsubscribe = function(cb) {
        var _b, _a;
        for (var i = 0; i < this._cbs.length; i++) {
          if (this._cbs[i][0] === cb) {
            this._cbs.splice(i, 1);
          }
        }
        if (null != this._pipe && 0 === this._cbs.length) {
          null === (_b = (_a = this._pipe).unsubscribe) || void 0 === _b ? void 0 : _b.call(_a, this.next);
          null === (_a = null === (_b = this._innerSub) || void 0 === _b ? void 0 : _b.unsubscribe) || void 0 === _a ? void 0 : _a.call(_b, this.onInnerChanged);
          return;
        }
      };
      // When binding the to expression like: 'foo.bar.quxStream()' we create additional stream to listen to `foo.bar` properties reassignment
      SubjectStream.prototype.onInnerChanged = function(newStream) {
        var _a, _b;
        null === (_b = null === (_a = this._pipe) || void 0 === _a ? void 0 : _a.unsubscribe) || void 0 === _b ? void 0 : _b.call(_a, this.next);
        this._pipe = newStream;
        if (null != this._pipe && this._cbs.length > 0) {
          this._pipe.subscribe(this.next, this.error);
        }
        if (void 0 !== newStream.value) {
          this.next(newStream.value);
        }
      };
      SubjectStream.prototype.call = function(index, x) {
        for (var i = 0; i < this._cbs.length; i++) {
          var row = this._cbs[i];
          var fn = row[index];
          row = row[2];
          if (true === (null === row || void 0 === row ? void 0 : row.once)) {
            this._cbs.splice(i, 1);
          }
          fn(x);
        }
      };
      return SubjectStream;
    }();
    exports.SubjectStream = SubjectStream;
    var CallbackType;
    (function(CallbackType) {
      CallbackType[CallbackType['OK'] = 0] = 'OK';
      CallbackType[CallbackType['Error'] = 1] = 'Error';
    })(CallbackType = CallbackType || {});
    var CB_ONCE = {
      once: true
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_class_SubjectStream === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_class_SubjectStream) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_class_SubjectStream, module.exports);
    } else {
      _ref_mask_projects_expression_src_class_SubjectStream = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_class_PromisedStream;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_class_PromisedStream ? _ref_mask_projects_expression_src_class_PromisedStream : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.PromisedStream = void 0;
    var SubjectKind_1 = _ref_mask_projects_expression_src_class_SubjectKind;
    var SubjectStream_1 = _ref_mask_projects_expression_src_class_SubjectStream;
    SubjectStream_1 = /** @class */ function(_super) {
      __extends(PromisedStream, _super);
      function PromisedStream() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PromisedStream.prototype.resolve = function(x) {
        this.next(x);
      };
      PromisedStream.prototype.reject = function(err) {
        this.error(err);
      };
      PromisedStream.prototype.then = function(onSuccess, onError) {
        if (void 0 !== this._error) {
          null === onError || void 0 === onError ? void 0 : onError(this._error);
          return;
        }
        if (void 0 !== this.value) {
          null === onSuccess || void 0 === onSuccess ? void 0 : onSuccess(this.value);
          return;
        }
        var opts = this.kind === SubjectKind_1.SubjectKind.Stream ? null : OPTS_ONCE;
        this._cbs.push([ onSuccess, onError, opts ]);
        if (null != this._pipe && 1 === this._cbs.length) {
          if ('then' in this._pipe) {
            this._pipe.then(this.next, this.error);
            return;
          }
          if ('subscribe' in this._pipe) {
            this._pipe.subscribe(this.next, this.error);
            return;
          }
        }
      };
      return PromisedStream;
    }(SubjectStream_1.SubjectStream);
    exports.PromisedStream = SubjectStream_1;
    var OPTS_ONCE = {
      once: true
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_class_PromisedStream === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_class_PromisedStream) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_class_PromisedStream, module.exports);
    } else {
      _ref_mask_projects_expression_src_class_PromisedStream = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_class_DeferredExp;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_class_DeferredExp ? _ref_mask_projects_expression_src_class_DeferredExp : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.DeferredExp = void 0;
    var eval_1 = _ref_mask_projects_expression_src_eval;
    var PromisedStream_1 = _ref_mask_projects_expression_src_class_PromisedStream;
    var SubjectKind_1 = _ref_mask_projects_expression_src_class_SubjectKind;
    PromisedStream_1 = /** @class */ function(_super) {
      __extends(DeferredExp, _super);
      function DeferredExp(deferred, root, model, ctx, ctr) {
        var _this = _super.call(this) || this;
        _this.deferred = deferred;
        _this.root = root;
        _this.model = model;
        _this.ctx = ctx;
        _this.ctr = ctr;
        _this.tick = _this.tick.bind(_this);
        return _this;
      }
      DeferredExp.prototype.subscribe = function(cb, onError, once) {
        for (var i = 0; i < this.deferred.length; i++) {
          var dfr = this.deferred[i];
          if (dfr.kind === SubjectKind_1.SubjectKind.Stream) {
            dfr.subscribe(this.tick);
          }
        }
        return _super.prototype.subscribe.call(this, cb, onError, once);
      };
      DeferredExp.prototype.unsubscribe = function(cb) {
        _super.prototype.unsubscribe.call(this, cb);
        for (var i = 0; i < this.deferred.length; i++) {
          var dfr = this.deferred[i];
          if (dfr.kind === SubjectKind_1.SubjectKind.Stream) {
            dfr.unsubscribe(this.tick);
          }
        }
      };
      DeferredExp.prototype.tick = function() {
        var preResults = [];
        for (var i = 0; i < this.deferred.length; i++) {
          var dfr = this.deferred[i];
          if (dfr.isBusy()) {
            return;
          }
          preResults[i] = dfr.current();
        }
        var val = (0, eval_1._evaluateAst)(this.root, this.model, this.ctx, this.ctr, preResults);
        this.next(val);
      };
      DeferredExp.prototype.cancel = function() {
        this.deferred.map(function(x) {
          return x.cancel();
        });
      };
      return DeferredExp;
    }(PromisedStream_1.PromisedStream);
    exports.DeferredExp = PromisedStream_1;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_class_DeferredExp === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_class_DeferredExp) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_class_DeferredExp, module.exports);
    } else {
      _ref_mask_projects_expression_src_class_DeferredExp = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_class_AwaitableCtx;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_class_AwaitableCtx ? _ref_mask_projects_expression_src_class_AwaitableCtx : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.AwaitableCtx = void 0;
    var is_1 = _ref_utils_src_is;
    var PromisedStream_1 = _ref_mask_projects_expression_src_class_PromisedStream;
    var SubjectKind_1 = _ref_mask_projects_expression_src_class_SubjectKind;
    function AwaitableCtx(ctx) {
      if ((0, is_1.is_PromiseLike)(ctx)) {
        return new PromiseCtx(ctx);
      }
      if ((0, is_1.is_Observable)(ctx)) {
        return new ObservableCtx(ctx);
      }
      return new ValueCtx(ctx);
    }
    exports.AwaitableCtx = AwaitableCtx;
    exports = /** @class */ function(_super) {
      __extends(IAwaitableCtx, _super);
      function IAwaitableCtx(ctx) {
        var _this = _super.call(this) || this;
        _this.ctx = ctx;
        _this.kind = SubjectKind_1.SubjectKind.Promise;
        _this.ctx = ctx;
        return _this;
      }
      return IAwaitableCtx;
    }(PromisedStream_1.PromisedStream);
    var ValueCtx = /** @class */ function(_super) {
      __extends(ValueCtx, _super);
      function ValueCtx(ctx) {
        var _this = _super.call(this, ctx) || this;
        _this.resolve(ctx);
        return _this;
      }
      ValueCtx.prototype.cancel = function() {};
      return ValueCtx;
    }(exports);
    var PromiseCtx = /** @class */ function(_super) {
      __extends(PromiseCtx, _super);
      function PromiseCtx(ctx) {
        var _this = _super.call(this, ctx) || this;
        _this.onSuccess = _this.onSuccess.bind(_this);
        _this.onFail = _this.onFail.bind(_this);
        ctx.then(_this.onSuccess, _this.onFail);
        return _this;
      }
      PromiseCtx.prototype.onSuccess = function(val) {
        if (this.canceled) {
          return;
        }
        this.resolve(val);
      };
      PromiseCtx.prototype.onFail = function(err) {
        if (this.canceled) {
          return;
        }
        this.reject(err);
      };
      PromiseCtx.prototype.cancel = function() {
        this.canceled = true;
      };
      return PromiseCtx;
    }(exports);
    var ObservableCtx = /** @class */ function(_super) {
      __extends(ObservableCtx, _super);
      function ObservableCtx(ctx) {
        var _this = _super.call(this, ctx) || this;
        _this.onValue = _this.onValue.bind(_this);
        ctx.subscribe(_this.onValue);
        return _this;
      }
      ObservableCtx.prototype.onValue = function(val) {
        if (this.canceled) {
          return;
        }
        this.cancel();
        this.resolve(val);
      };
      ObservableCtx.prototype.cancel = function() {
        this.canceled = true;
        this.ctx.unsubscribe(this.onValue);
      };
      return ObservableCtx;
    }(exports);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_class_AwaitableCtx === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_class_AwaitableCtx) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_class_AwaitableCtx, module.exports);
    } else {
      _ref_mask_projects_expression_src_class_AwaitableCtx = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_class_DeferStatement;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_class_DeferStatement ? _ref_mask_projects_expression_src_class_DeferStatement : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.DeferStatement = exports.getDeferrables = void 0;
    var PromisedStream_1 = _ref_mask_projects_expression_src_class_PromisedStream;
    var SubjectKind_1 = _ref_mask_projects_expression_src_class_SubjectKind;
    var eval_deferred_1 = _ref_mask_projects_expression_src_eval_deferred;
    var AwaitableCtx_1 = _ref_mask_projects_expression_src_class_AwaitableCtx;
    var is_1 = _ref_utils_src_is;
    var scope_vars_1 = _ref_mask_projects_expression_src_scope_vars;
    function getDeferrables(mix, out) {
      if (void 0 === out) {
        out = [];
      }
      if (null == mix) {
        return out;
      }
      if ((0, is_1.is_Array)(mix)) {
        for (var i = 0; i < mix.length; i++) {
          getDeferrables(mix[i], out);
        }
        return out;
      }
      var expr = mix;
      var type = expr.type;
      if (type === scope_vars_1.type_Statement) {
        if (true === expr.observe) {
          expr.preResultIndex = out.length;
          out.push(new DeferStatement(expr));
          return out;
        }
        if (true === expr.async) {
          expr.preResultIndex = out.length;
          out.push(new DeferStatement(expr));
          return out;
        }
      }
      switch (type) {
       case scope_vars_1.type_Body:
        getDeferrables(expr.body, out);
        break;

       case scope_vars_1.type_FunctionRef:
        getDeferrables(expr.arguments, out);
        break;

       case scope_vars_1.type_SymbolRef:
        getDeferrables(expr.next, out);
        break;

       case scope_vars_1.type_Statement:
       case scope_vars_1.type_UnaryPrefix:
       case scope_vars_1.type_Ternary:
        getDeferrables(expr.body, out);
        break;
      }
      return out;
    }
    exports.getDeferrables = getDeferrables;
    var DeferStatement = /** @class */ function(_super) {
      __extends(DeferStatement, _super);
      function DeferStatement(statement) {
        var _this = _super.call(this) || this;
        _this.statement = statement;
        return _this;
      }
      /**
     * Get current value for the statement to calculate full expression result
     * Subscription is made later
     * */
      DeferStatement.prototype.process = function(model, ctx, ctr) {
        var _this = this;
        this.deferExp = (0, eval_deferred_1._evaluateAstDeferredInner)(this.statement, model, ctx, ctr);
        switch (this.deferExp.kind) {
         case SubjectKind_1.SubjectKind.Value:
         case SubjectKind_1.SubjectKind.Promise:
          this.kind = SubjectKind_1.SubjectKind.Promise;
          break;

         case SubjectKind_1.SubjectKind.Stream:
          this.kind = SubjectKind_1.SubjectKind.Stream;
          break;
        }
        this.deferExp.then(function(context) {
          _this.ctx = (0, AwaitableCtx_1.AwaitableCtx)(context);
          _this.ctx.then(function(result) {
            _this.resolve(result);
          }, function(error) {
            this.reject(error);
          });
        }, function(err) {
          return _this.reject(err);
        });
        return this;
      };
      DeferStatement.prototype.subscribe = function(cb, onError) {
        if (0 === this._cbs.length) {
          this.deferExp.subscribe(this.next);
        }
        return _super.prototype.subscribe.call(this, cb, onError);
      };
      DeferStatement.prototype.unsubscribe = function(cb) {
        _super.prototype.unsubscribe.call(this, cb);
        if (0 === this._cbs.length) {
          this.deferExp.unsubscribe(this.next);
        }
      };
      DeferStatement.prototype.cancel = function() {
        this.deferExp && this.deferExp.cancel();
        this.ctx && this.ctx.cancel();
      };
      return DeferStatement;
    }(PromisedStream_1.PromisedStream);
    exports.DeferStatement = DeferStatement;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_class_DeferStatement === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_class_DeferStatement) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_class_DeferStatement, module.exports);
    } else {
      _ref_mask_projects_expression_src_class_DeferStatement = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_class_ObjectStream;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_class_ObjectStream ? _ref_mask_projects_expression_src_class_ObjectStream : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ObjectStream = void 0;
    var eval_1 = _ref_mask_projects_expression_src_eval;
    var exports_1 = _ref_mask_projects_observer_src_exports;
    var PromisedStream_1 = _ref_mask_projects_expression_src_class_PromisedStream;
    var SubjectKind_1 = _ref_mask_projects_expression_src_class_SubjectKind;
    PromisedStream_1 = /** @class */ function(_super) {
      __extends(ObjectStream, _super);
      function ObjectStream(value, astNode, model, ctx, ctr) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.astNode = astNode;
        _this.model = model;
        _this.ctx = ctx;
        _this.ctr = ctr;
        _this.kind = SubjectKind_1.SubjectKind.Stream;
        _this.tick = _this.tick.bind(_this);
        _this.next(value);
        return _this;
      }
      ObjectStream.prototype.subscribe = function(cb, onError) {
        if (0 === this._cbs.length) {
          this.dispose = (0, exports_1.expression_bind)(this.astNode, this.model, this.ctx, this.ctr, this.tick, OPTS_PROPS_ONLY);
        }
        return _super.prototype.subscribe.call(this, cb, onError);
      };
      ObjectStream.prototype.unsubscribe = function(cb) {
        _super.prototype.unsubscribe.call(this, cb);
        null === (cb = this.dispose) || void 0 === cb ? void 0 : cb.unsubscribe();
        this.dispose = null;
        // if (this._cbs.length === 0) {
        //     expression_unbind(
        //         this.astNode
        //         , this.model
        //         , this.ctr
        //         , this.tick
        //         , OPTS_PROPS_ONLY
        //     );
        // }
      };
      ObjectStream.prototype.tick = function() {
        var val = (0, eval_1._evaluateAst)(this.astNode, this.model, null, this.ctr);
        this.next(val);
      };
      return ObjectStream;
    }(PromisedStream_1.PromisedStream);
    exports.ObjectStream = PromisedStream_1;
    var OPTS_PROPS_ONLY = {
      propertiesOnly: true
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_class_ObjectStream === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_class_ObjectStream) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_class_ObjectStream, module.exports);
    } else {
      _ref_mask_projects_expression_src_class_ObjectStream = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_eval_deferred;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_eval_deferred ? _ref_mask_projects_expression_src_eval_deferred : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._evaluateAstDeferredInner = exports._evaluateAstDeferred = void 0;
    var is_1 = _ref_utils_src_is;
    var eval_1 = _ref_mask_projects_expression_src_eval;
    var util_1 = _ref_mask_projects_expression_src_util;
    var SubjectKind_1 = _ref_mask_projects_expression_src_class_SubjectKind;
    var DeferredExp_1 = _ref_mask_projects_expression_src_class_DeferredExp;
    var DeferStatement_1 = _ref_mask_projects_expression_src_class_DeferStatement;
    var ObjectStream_1 = _ref_mask_projects_expression_src_class_ObjectStream;
    // Avaitables and Observables
    function _evaluateAstDeferred(ast, model, ctx, ctr) {
      ast = _evaluateAstDeferredInner(ast, model, ctx, ctr);
      if (ast.kind === SubjectKind_1.SubjectKind.Stream) {
        return ast;
      }
      return ast;
    }
    exports._evaluateAstDeferred = _evaluateAstDeferred;
    function _evaluateAstDeferredInner(ast, model, ctx, ctr) {
      var deferred = (0, DeferStatement_1.getDeferrables)(ast.body);
      var deferExp = new DeferredExp_1.DeferredExp(deferred, ast, model, ctx, ctr);
      if (0 === deferred.length) {
        var result = (0, eval_1._evaluateAst)(ast, model, ctx, ctr);
        if (null == result) {
          (0, util_1.util_throw)(ast, null, 'Awaitable is undefined');
        }
        if (true === ast.observe) {
          var innerStream = void 0;
          if (false === (0, is_1.is_Observable)(result)) {
            result = new ObjectStream_1.ObjectStream(result, ast, model, ctx, ctr);
          } else {
            innerStream = new ObjectStream_1.ObjectStream(result, ast, model, ctx, ctr);
          }
          deferExp.kind = SubjectKind_1.SubjectKind.Stream;
          deferExp.fromStream(result, innerStream);
          return deferExp;
        }
        deferExp.kind = SubjectKind_1.SubjectKind.Promise;
        deferExp.next(result);
        return deferExp;
      }
      var count = deferred.length;
      var error = null;
      var i = count;
      while (--i > -1) {
        var dfr = deferred[i];
        dfr.process(model, ctx, ctr).then(done, fail);
      }
      function done() {
        if (0 === --count && null == error) {
          var preResults = [];
          for (var i_1 = 0; i_1 < deferred.length; i_1++) {
            var dfr = deferred[i_1];
            preResults[i_1] = dfr.current();
          }
          var result = (0, eval_1._evaluateAst)(ast, model, ctx, ctr, preResults);
          deferExp.resolve(result);
        }
      }
      function fail(err) {
        error = err;
        if (error === err) {
          deferExp.reject(error);
        }
      }
      return deferExp;
    }
    exports._evaluateAstDeferredInner = _evaluateAstDeferredInner;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_eval_deferred === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_eval_deferred) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_eval_deferred, module.exports);
    } else {
      _ref_mask_projects_expression_src_eval_deferred = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_eval;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_eval ? _ref_mask_projects_expression_src_eval : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._evaluateAst = exports._evaluate = void 0;
    var parser_1 = _ref_mask_projects_expression_src_parser;
    var scope_vars_1 = _ref_mask_projects_expression_src_scope_vars;
    var util_1 = _ref_mask_projects_expression_src_util;
    var is_1 = _ref_utils_src_is;
    var reporters_1 = _ref_mask_src_util_reporters;
    var astNode_utils_1 = _ref_mask_projects_expression_src_astNode_utils;
    var eval_deferred_1 = _ref_mask_projects_expression_src_eval_deferred;
    function _evaluate(mix, model, ctx, ctr, node) {
      if ('.' === mix) {
        return model;
      }
      mix = (0, parser_1._parseCached)(mix, ctr, node);
      if (null == mix) {
        return null;
      }
      if (true === mix.observe || true === mix.async) {
        return (0, eval_deferred_1._evaluateAstDeferred)(mix, model, ctx, ctr);
      }
      return _evaluateAst(mix, model, ctx, ctr, null);
    }
    exports._evaluate = _evaluate;
    function _evaluateAst(ast, model, ctx, ctr, preResults) {
      if (null == ast) {
        return null;
      }
      var result, x, type = ast.type;
      if (scope_vars_1.type_Body === type) {
        var value = void 0, prev = void 0;
        for (var i = 0, length_1 = ast.body.length; i < length_1; i++) {
          x = ast.body[i];
          if (null != prev) {
            if (prev.join === scope_vars_1.op_LogicalOr && result) {
              return result;
            }
            if (prev.join === scope_vars_1.op_NullishCoalescing && null != result) {
              return result;
            }
          }
          value = _evaluateAst(x, model, ctx, ctr, preResults);
          if (null == prev || null == prev.join) {
            prev = x;
            result = value;
            continue;
          }
          if (prev.join === scope_vars_1.op_LogicalAnd) {
            if (!result) {
              for (;i < length_1; i++) {
                if (ast.body[i].join === scope_vars_1.op_LogicalOr) {
                  break;
                }
              }
            } else {
              result = value;
            }
          }
          if (prev.join === scope_vars_1.op_LogicalOr) {
            if (value) {
              return value;
            }
            result = value;
            prev = x;
            continue;
          }
          if (prev.join === scope_vars_1.op_NullishCoalescing) {
            if (null != value) {
              return value;
            }
            result = value;
            prev = x;
            continue;
          }
          switch (prev.join) {
           case scope_vars_1.op_Minus:
            result -= value;
            break;

           case scope_vars_1.op_Plus:
            result += value;
            break;

           case scope_vars_1.op_Divide:
            result /= value;
            break;

           case scope_vars_1.op_Multip:
            result *= value;
            break;

           case scope_vars_1.op_Modulo:
            result %= value;
            break;

           case scope_vars_1.op_BitOr:
            result |= value;
            break;

           case scope_vars_1.op_BitXOr:
            result ^= value;
            break;

           case scope_vars_1.op_BitAnd:
            result &= value;
            break;

           case scope_vars_1.op_LogicalNotEqual:
            /* jshint eqeqeq: false */
            result = result != value;
            /* jshint eqeqeq: true */
            break;

           case scope_vars_1.op_LogicalNotEqual_Strict:
            result = result !== value;
            break;

           case scope_vars_1.op_LogicalEqual:
            /* jshint eqeqeq: false */
            result = result == value;
            /* jshint eqeqeq: true */
            break;

           case scope_vars_1.op_LogicalEqual_Strict:
            result = result === value;
            break;

           case scope_vars_1.op_LogicalGreater:
            result = result > value;
            break;

           case scope_vars_1.op_LogicalGreaterEqual:
            result = result >= value;
            break;

           case scope_vars_1.op_LogicalLess:
            result = result < value;
            break;

           case scope_vars_1.op_LogicalLessEqual:
            result = result <= value;
            break;
          }
          prev = x;
        }
        return result;
      }
      if (scope_vars_1.type_Statement === type) {
        if ((true === ast.async || true === ast.observe) && ast.preResultIndex > -1 && null != preResults) {
          result = preResults[ast.preResultIndex];
        } else {
          result = _evaluateAst(ast.body, model, ctx, ctr, preResults);
        }
        if (null == ast.next) {
          return result;
        }
        return (0, util_1.util_resolveAcc)(result, ast.next, model, ctx, ctr, preResults);
      }
      if (scope_vars_1.type_Value === type) {
        return ast.body;
      }
      if (scope_vars_1.type_Array === type) {
        var body = ast.body.body, imax = body.length, i = -1;
        result = new Array(imax);
        while (++i < imax) {
          result[i] = _evaluateAst(body[i], model, ctx, ctr, preResults);
        }
        return result;
      }
      if (scope_vars_1.type_Object === type) {
        result = {};
        var props = ast.props;
        for (var key in props) {
          result[key] = _evaluateAst(props[key], model, ctx, ctr, preResults);
        }
        return result;
      }
      if (scope_vars_1.type_SymbolRef === type || scope_vars_1.type_FunctionRef === type) {
        result = (0, util_1.util_resolveRefValue)(ast, model, ctx, ctr, preResults);
        if (type === scope_vars_1.type_FunctionRef) {
          if ((0, is_1.is_Function)(result)) {
            var args = astNode_utils_1.Ast_FunctionRefUtil.evalArguments(ast, model, ctx, ctr, preResults);
            result = result.apply(null, args);
          } else {
            (0, reporters_1.error_)(ast.body + ' is not a function', (0, util_1.util_getNodeStack)(ast));
          }
        }
        if (null != ast.next) {
          return (0, util_1.util_resolveAcc)(result, ast.next, model, ctx, ctr, preResults);
        }
        return result;
      }
      if (scope_vars_1.type_AccessorExpr === type || scope_vars_1.type_Accessor === type) {
        return (0, util_1.util_resolveRef)(ast, model, ctx, ctr);
      }
      if (scope_vars_1.type_UnaryPrefix === type) {
        result = _evaluateAst(ast.body, model, ctx, ctr, preResults);
        switch (ast.prefix) {
         case scope_vars_1.op_Minus:
          result = -result;
          break;

         case scope_vars_1.op_LogicalNot:
          result = !result;
          break;
        }
      }
      if (scope_vars_1.type_Ternary === type) {
        result = _evaluateAst(ast.body, model, ctx, ctr, preResults);
        result = _evaluateAst(result ? ast.case1 : ast.case2, model, ctx, ctr, preResults);
      }
      return result;
    }
    exports._evaluateAst = _evaluateAst;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_eval === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_eval) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_eval, module.exports);
    } else {
      _ref_mask_projects_expression_src_eval = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_util;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_util ? _ref_mask_projects_expression_src_util : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.util_resolveAcc = exports.util_resolveRefValue = exports.util_resolveRef = exports.util_getNodeStack = exports.util_throw = void 0;
    var refs_1 = _ref_utils_src_refs;
    var reporters_1 = _ref_mask_src_util_reporters;
    var error_1 = _ref_utils_src_error;
    var is_1 = _ref_utils_src_is;
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_mask_compo_src_exports;
    var scope_vars_1 = _ref_mask_projects_expression_src_scope_vars;
    var eval_1 = _ref_mask_projects_expression_src_eval;
    var astNode_utils_1 = _ref_mask_projects_expression_src_astNode_utils;
    function util_throw(template, index, msg, token, astNode) {
      return (0, reporters_1.parser_error)(msg + util_getNodeStack(astNode), template.toString(), index, token, 'expr');
    }
    exports.util_throw = util_throw;
    function util_getNodeStack(astNode) {
      var domNode = null, x = astNode;
      while (null == domNode && null != x) {
        domNode = x.node;
        x = x.parent;
      }
      if (null == domNode) {
        var str, i;
        x = astNode;
        while (null != x) {
          if (null == i) {
            i = x.sourceIndex;
          }
          if (null == str) {
            str = x.source;
          }
          x = x.parent;
        }
        if (null != str) {
          return '\n' + (0, error_1.error_formatSource)(str, i || 0);
        }
        return '';
      }
      return (0, reporters_1.reporter_getNodeStack)(domNode);
    }
    exports.util_getNodeStack = util_getNodeStack;
    function util_resolveRef(astRef, model, ctx, ctr) {
      var object, value, args, i, imax, controller = ctr, current = astRef, key = astRef.body;
      if ('$c' === key || '$' === key) {
        (0, reporters_1.reporter_deprecated)('accessor.compo', 'Use `this` instead of `$c` or `$`.' + util_getNodeStack(astRef));
        key = 'this';
      }
      if ('$u' === key) {
        (0, reporters_1.reporter_deprecated)('accessor.util', 'Use `_` instead of `$u`' + util_getNodeStack(astRef));
        key = '_';
      }
      if ('$a' === key) {
        (0, reporters_1.reporter_deprecated)('accessor.attr', 'Use `this.attr` instead of `$a`' + util_getNodeStack(astRef));
      }
      if ('this' === key) {
        value = controller;
        var next = current.next, nextBody = null != next && next.body;
        if (null != nextBody && null == value[nextBody]) {
          if (next.type === scope_vars_1.type_FunctionRef && (0, is_1.is_Function)(exports_2.CompoProto[nextBody])) {
            // use fn from prototype if possible, like `closest`
            object = controller;
            value = exports_2.CompoProto[nextBody];
            current = next;
          } else {
            // find the closest controller, which has the property
            while (true) {
              value = value.parent;
              if (null == value) {
                break;
              }
              if (null == value[nextBody]) {
                continue;
              }
              object = value;
              value = value[nextBody];
              current = next;
              break;
            }
          }
          if (null == value) {
            // prepair for warn message
            key = '$.' + nextBody;
            current = next;
          }
        }
      } else if ('$a' === key) {
        value = controller && controller.attr;
      } else if ('_' === key) {
        value = exports_1.customUtil_$utils;
      } else if ('$ctx' === key) {
        value = ctx;
      } else if ('$scope' === key) {
        next = current.next, nextBody = null != next && next.body;
        if (null != nextBody) {
          while (null != controller) {
            object = controller.scope;
            if (null != object) {
              value = object[nextBody];
            }
            if (null != value) {
              break;
            }
            controller = controller.parent;
          }
          current = next;
        }
      } else if ('global' === key && (null == model || void 0 === model.global)) {
        value = refs_1._global;
      } else {
        // scope resolver
        if (null != model) {
          object = model;
          value = model[key];
        }
        if (null == value) {
          while (null != controller) {
            object = controller.scope;
            if (null != object) {
              value = object[key];
            }
            if (null != value) {
              break;
            }
            controller = controller.parent;
          }
        }
      }
      do {
        if (null == value) {
          verifyPropertyUndefinedError(current, key);
          return null;
        }
        if (current.type === scope_vars_1.type_FunctionRef) {
          args = [];
          i = -1;
          imax = current.arguments.length;
          while (++i < imax) {
            args[i] = (0, eval_1._evaluateAst)(current.arguments[i], model, ctx, controller);
          }
          value = value.apply(object, args);
        }
        if (null == value || null == current.next) {
          break;
        }
        current = current.next;
        key = current.type === scope_vars_1.type_AccessorExpr ? (0, eval_1._evaluateAst)(current.body, model, ctx, controller) : current.body;
        object = value;
        value = value[key];
      } while (true);
      return value;
    }
    exports.util_resolveRef = util_resolveRef;
    function util_resolveRefValue(astRef, model, ctx, ctr, preResults) {
      var controller = ctr, current = astRef, key = astRef.body;
      if ('$c' === key || '$' === key) {
        (0, reporters_1.reporter_deprecated)('accessor.compo', 'Use `this` instead of `$c` or `$`.' + util_getNodeStack(astRef));
        key = 'this';
      }
      if ('$u' === key) {
        (0, reporters_1.reporter_deprecated)('accessor.util', 'Use `_` instead of `$u`' + util_getNodeStack(astRef));
        key = '_';
      }
      if ('$a' === key) {
        (0, reporters_1.reporter_deprecated)('accessor.attr', 'Use `this.attr` instead of `$a`' + util_getNodeStack(astRef));
        return controller && controller.attr;
      }
      if ('global' === key && (null == model || void 0 === model.global)) {
        return refs_1._global;
      }
      if ('_' === key) {
        return exports_1.customUtil_$utils;
      }
      if ('$ctx' === key) {
        return ctx;
      }
      if ('this' === key) {
        astRef = ctr;
        var nextKey = null == current.next ? null : current.next.body;
        if (null == nextKey) {
          return astRef;
        }
        var x = astRef;
        while (null != x) {
          if (_isDefined(x, nextKey)) {
            return x;
          }
          x = x.parent;
        }
        /** Backwards comp. */
        if (_isDefined(exports_2.CompoProto, nextKey)) {
          astRef[nextKey] = exports_2.CompoProto[nextKey];
        }
        return astRef;
      }
      if ('$scope' === key) {
        nextKey = null == current.next ? null : current.next.body;
        if (null == nextKey) {
          return scope;
        }
        var scope = null, x = ctr;
        while (null != x) {
          if (null != x.scope) {
            if (null == scope) {
              scope = x.scope;
            }
            if (_isDefined(x.scope, nextKey)) {
              return x.scope;
            }
          }
          x = x.parent;
        }
        return scope;
      }
      // Model resolver
      if (_isDefined(model, key)) {
        return model[key];
      }
      // Scope resolver
      scope = null, x = ctr;
      while (null != x) {
        if (null != x.scope) {
          if (null == scope) {
            scope = x.scope;
          }
          if (_isDefined(x.scope, key)) {
            return x.scope[key];
          }
        }
        x = x.parent;
      }
      return null;
    }
    exports.util_resolveRefValue = util_resolveRefValue;
    function util_resolveAcc(object, astAcc, model, ctx, ctr, preResults) {
      var value = object, current = astAcc;
      do {
        if (null == value) {
          verifyPropertyUndefinedError(current.parent, key);
          return null;
        }
        var type = current.type;
        if (type === scope_vars_1.type_Accessor) {
          value = value[current.body];
          continue;
        }
        if (type === scope_vars_1.type_AccessorExpr) {
          var key = (0, eval_1._evaluateAst)(current.body, model, ctx, ctr, preResults);
          value = value[key];
          continue;
        }
        if (scope_vars_1.type_FunctionRef === type) {
          var fn = value[current.body];
          if ('function' !== typeof fn) {
            (0, reporters_1.warn_)(current.body + ' is not a function', util_getNodeStack(astAcc));
            return null;
          }
          var args = astNode_utils_1.Ast_FunctionRefUtil.evalArguments(current, model, ctr, ctr, preResults);
          value = fn.apply(value, args);
          continue;
        }
        util_throw('Syntax error: Invalid accessor type', type, current);
        return null;
      } while (null != value && null != (current = current.next));
      return value;
    }
    exports.util_resolveAcc = util_resolveAcc;
    function verifyPropertyUndefinedError(astNode, key) {
      if (null == astNode || null != astNode.next && true !== astNode.optional) {
        // notify that value is not in model, ctx, controller;
        (0, reporters_1.warn_)('Cannot read property \'' + astNode.next.body + '\' of undefined', key, util_getNodeStack(astNode.next));
      }
    }
    function _isDefined(obj, key) {
      return null != obj && 'object' === typeof obj && key in obj;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_util === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_util) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_util, module.exports);
    } else {
      _ref_mask_projects_expression_src_util = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_parser;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_parser ? _ref_mask_projects_expression_src_parser : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ast_append = exports.parser_getDirective = exports.parser_getRef = exports._parse = exports._parseCached = void 0;
    var ast_1 = _ref_mask_projects_expression_src_ast;
    var scope_vars_1 = _ref_mask_projects_expression_src_scope_vars;
    var ast_utils_1 = _ref_mask_projects_expression_src_ast_utils;
    var util_1 = _ref_mask_projects_expression_src_util;
    var scope_vars_2 = _ref_mask_src_scope_vars;
    var cache = Object.create(null);
    function _parseCached(mix, ctr, node) {
      if (null == mix) {
        return null;
      }
      if ('string' === typeof mix) {
        var node_ = node;
        if (null == node_ && null != ctr) {
          var x = ctr;
          while (null == node_ && null != x) {
            node_ = x.node;
            x = x.parent;
          }
        }
        return null !== (node = cache[mix]) && void 0 !== node ? node : cache[mix] = _parse(mix, false, node_);
      }
      return mix;
    }
    exports._parseCached = _parseCached;
    var index = 0;
    var length = 0;
    var template;
    var ast;
    function _parse(expr, earlyExit, node) {
      if (null == earlyExit) {
        earlyExit = false;
      }
      template = expr;
      index = 0;
      length = expr.length;
      ast = new ast_1.Ast_Body(null, node);
      ast.source = expr;
      var current = ast;
      var state = scope_vars_1.state_body;
      var c;
      outer: while (true) {
        if (index < length && (c = template.charCodeAt(index)) < 33) {
          index++;
          continue;
        }
        if (index >= length) {
          break;
        }
        var directive = parser_getDirective(c);
        if (null == directive && index < length) {
          break;
        }
        if (directive === scope_vars_1.punc_Semicolon) {
          if (true === earlyExit) {
            return [ ast, index ];
          }
          break;
        }
        if (true === earlyExit) {
          var p = current.parent;
          if (null != p && p.type === scope_vars_1.type_Body && null == p.parent) {
            // is in root body
            if (directive === scope_vars_1.go_ref) {
              return [ ast, index ];
            }
          }
        }
        if (directive === scope_vars_1.punc_Semicolon) {
          break;
        }
        switch (directive) {
         case scope_vars_1.punc_ParenthesisOpen:
          current = ast_append(current, new ast_1.Ast_Statement(current));
          current = ast_append(current, new ast_1.Ast_Body(current));
          index++;
          continue;

         case scope_vars_1.punc_ParenthesisClose:
          var closest = scope_vars_1.type_Body;
          if (state === scope_vars_1.state_arguments) {
            state = scope_vars_1.state_body;
            closest = scope_vars_1.type_FunctionRef;
          }
          do {
            current = current.parent;
          } while (null != current && current.type !== closest);
          if (current.type === scope_vars_1.type_FunctionRef) {
            current.closeArgs();
          }
          if (closest === scope_vars_1.type_Body) {
            current = current.parent;
          }
          if (null == current) {
            (0, util_1.util_throw)(template, index, 'OutOfAst Exception', c);
            break outer;
          }
          index++;
          continue;

         case scope_vars_1.punc_BraceOpen:
          current = ast_append(current, new ast_1.Ast_Object(current));
          directive = scope_vars_1.go_objectKey;
          index++;
          break;

         case scope_vars_1.punc_BraceClose:
          while (null != current && current.type !== scope_vars_1.type_Object) {
            current = current.parent;
          }
          index++;
          continue;

         case scope_vars_1.punc_Comma:
          if (state !== scope_vars_1.state_arguments) {
            state = scope_vars_1.state_body;
            do {
              current = current.parent;
            } while (null != current && current.type !== scope_vars_1.type_Body && current.type !== scope_vars_1.type_Object);
            index++;
            if (null == current) {
              (0, util_1.util_throw)(template, index, 'Unexpected comma', c);
              break outer;
            }
            if (current.type === scope_vars_1.type_Object) {
              directive = scope_vars_1.go_objectKey;
              break;
            }
            continue;
          }
          do {
            current = current.parent;
          } while (null != current && current.type !== scope_vars_1.type_FunctionRef);
          if (null == current) {
            (0, util_1.util_throw)(template, index, 'OutOfAst Exception', c);
            break outer;
          }
          current = current.newArg();
          index++;
          continue;

         case scope_vars_1.punc_Question:
          index++;
          c = parser_skipWhitespace();
          var t = current.type;
          if ((t === scope_vars_1.type_SymbolRef || t === scope_vars_1.type_AccessorExpr || t === scope_vars_1.type_Accessor) && 46 === c) {
            // .
            index++;
            parser_skipWhitespace();
            directive = scope_vars_1.go_acs;
            current.optional = true;
            break;
          }
          if (63 === c) {
            // ?
            directive = scope_vars_1.op_NullishCoalescing;
            break;
          }
          ast = new ast_1.Ast_TernaryStatement(ast);
          current = ast.case1;
          continue;

         case scope_vars_1.punc_Colon:
          current = ast.case2;
          index++;
          continue;

         case scope_vars_1.punc_Dot:
          c = template.charCodeAt(index + 1);
          if (c >= 48 && c <= 57) {
            directive = scope_vars_1.go_number;
          } else {
            index++;
            c = c > 32 ? c : parser_skipWhitespace();
            directive = current.type === scope_vars_1.type_Body ? scope_vars_1.go_ref : scope_vars_1.go_acs;
          }
          break;

         case scope_vars_1.op_AsyncAccessor:
         case scope_vars_1.op_ObserveAccessor:
          t = current.type;
          if (t !== scope_vars_1.type_SymbolRef && t !== scope_vars_1.type_Accessor && t !== scope_vars_1.type_FunctionRef) {
            (0, util_1.util_throw)(template, index, 'Unexpected accessor:' + directive);
            return null;
          }
          var ref = (0, ast_utils_1.ast_findPrev)(current, scope_vars_1.type_SymbolRef);
          if (null == ref) {
            ref = (0, ast_utils_1.ast_findPrev)(current, scope_vars_1.type_FunctionRef);
          }
          if (null == ref) {
            (0, util_1.util_throw)(template, index, 'Ref not found');
            return null;
          }
          var parent = ref.parent;
          if (parent.type !== scope_vars_1.type_Statement) {
            (0, util_1.util_throw)(template, index, 'Ref is not in a statement');
            return null;
          }
          (0, ast_utils_1.ast_remove)(parent, ref);
          var statement = new ast_1.Ast_Statement(parent);
          var inner = new ast_1.Ast_Statement(statement);
          if (directive === scope_vars_1.op_AsyncAccessor) {
            inner.async = true;
          } else {
            inner.observe = true;
          }
          ref.parent = inner;
          ast_append(inner, ref);
          ast_append(statement, inner);
          ast_append(parent, statement);
          index++;
          if (directive === scope_vars_1.op_AsyncAccessor) {
            ast.async = true;
          } else {
            ast.observe = true;
          }
          c = parser_skipWhitespace();
          directive = scope_vars_1.go_acs;
          current = statement.parent;
          break;

         case scope_vars_1.punc_BracketOpen:
          t = current.type;
          if (t === scope_vars_1.type_SymbolRef || t === scope_vars_1.type_AccessorExpr || t === scope_vars_1.type_Accessor) {
            current = ast_append(current, new ast_1.Ast_AccessorExpr(current));
            current.sourceIndex = index;
            current = current.getBody();
            index++;
            continue;
          }
          current = ast_append(current, new ast_1.Ast_Array(current));
          current = current.body;
          index++;
          continue;

         case scope_vars_1.punc_BracketClose:
          do {
            current = current.parent;
          } while (null != current && current.type !== scope_vars_1.type_AccessorExpr && current.type !== scope_vars_1.type_Array);
          index++;
          continue;
        }
        if (current.type === scope_vars_1.type_Body) {
          current = ast_append(current, new ast_1.Ast_Statement(current));
        }
        if ((scope_vars_1.op_Minus === directive || scope_vars_1.op_LogicalNot === directive) && null == current.body) {
          current = ast_append(current, new ast_1.Ast_UnaryPrefix(current, directive));
          index++;
          continue;
        }
        switch (directive) {
         case scope_vars_1.op_Minus:
         case scope_vars_1.op_Plus:
         case scope_vars_1.op_Multip:
         case scope_vars_1.op_Divide:
         case scope_vars_1.op_Modulo:
         case scope_vars_1.op_BitOr:
         case scope_vars_1.op_BitXOr:
         case scope_vars_1.op_BitAnd:
         case scope_vars_1.op_NullishCoalescing:
         case scope_vars_1.op_LogicalAnd:
         case scope_vars_1.op_LogicalOr:
         case scope_vars_1.op_LogicalEqual:
         case scope_vars_1.op_LogicalEqual_Strict:
         case scope_vars_1.op_LogicalNotEqual:
         case scope_vars_1.op_LogicalNotEqual_Strict:
         case scope_vars_1.op_LogicalGreater:
         case scope_vars_1.op_LogicalGreaterEqual:
         case scope_vars_1.op_LogicalLess:
         case scope_vars_1.op_LogicalLessEqual:
          while (current && current.type !== scope_vars_1.type_Statement) {
            current = current.parent;
          }
          if (null == current.body) {
            (0, util_1.util_throw)(template, index, 'Unexpected operator', c);
            return null;
          }
          current.join = directive;
          do {
            current = current.parent;
          } while (null != current && current.type !== scope_vars_1.type_Body);
          if (null == current) {
            (0, util_1.util_throw)(template, index, 'Unexpected operator', c);
            return null;
          }
          index++;
          continue;

         case scope_vars_1.go_string:
         case scope_vars_1.go_number:
          if (null != current.body && null == current.join) {
            (0, util_1.util_throw)(template, index, 'Directive expected', c);
            return null;
          }
          if (scope_vars_1.go_string === directive) {
            index++;
            ast_append(current, new ast_1.Ast_Value(parser_getString(c)));
            index++;
          }
          if (scope_vars_1.go_number === directive) {
            ast_append(current, new ast_1.Ast_Value(parser_getNumber()));
          }
          continue;

         case scope_vars_1.go_ref:
         case scope_vars_1.go_acs:
          var start = index, ref = parser_getRef();
          if (directive === scope_vars_1.go_ref) {
            if ('null' === ref) {
              ref = null;
            }
            if ('false' === ref) {
              ref = false;
            }
            if ('true' === ref) {
              ref = true;
            }
            if (current.type === scope_vars_1.type_Body || current.type === scope_vars_1.type_Statement) {
              if ('await' === ref) {
                ast.async = true;
                current.async = true;
                continue;
              }
              if ('observe' === ref) {
                ast.observe = true;
                current.observe = true;
                continue;
              }
            }
            if ('string' !== typeof ref) {
              ast_append(current, new ast_1.Ast_Value(ref));
              continue;
            }
          }
          while (index < length) {
            c = template.charCodeAt(index);
            if (c < 33) {
              index++;
              continue;
            }
            break;
          }
          if (40 === c) {
            // (
            // function ref
            state = scope_vars_1.state_arguments;
            index++;
            var fn = new ast_1.Ast_FunctionRef(current, ref);
            if (directive === scope_vars_1.go_acs && current.type === scope_vars_1.type_Statement) {
              current.next = fn;
            } else {
              ast_append(current, fn);
            }
            current = fn.newArg();
            continue;
          }
          fn = directive === scope_vars_1.go_ref ? ast_1.Ast_SymbolRef : ast_1.Ast_Accessor;
          current = ast_append(current, new fn(current, ref));
          current.sourceIndex = start;
          break;

         case scope_vars_1.go_objectKey:
          if (125 === parser_skipWhitespace()) {
            continue;
          }
          start = parser_getRef();
          if (58 !== parser_skipWhitespace()) {
            //:
            (0, util_1.util_throw)(template, index, 'Object parser. Semicolon expeted', c);
            return null;
          }
          index++;
          current = current.nextProp(start);
          directive = scope_vars_1.go_ref;
          continue;
        }
      }
      if (null == current.body && current.type === scope_vars_1.type_Statement) {
        (0, util_1.util_throw)(template, index, 'Unexpected end of expression', c);
        return null;
      }
      (0, ast_utils_1.ast_handlePrecedence)(ast);
      return ast;
    }
    exports._parse = _parse;
    function parser_skipWhitespace() {
      var c;
      while (index < length) {
        c = template.charCodeAt(index);
        if (c > 32) {
          return c;
        }
        index++;
      }
      return null;
    }
    function parser_getString(c) {
      var nindex, isEscaped = false, _char = 39 === c ? '\'' : '"', c = index;
      while ((nindex = template.indexOf(_char, index)) > -1) {
        index = nindex;
        if (92 /*'\\'*/ !== template.charCodeAt(nindex - 1)) {
          break;
        }
        isEscaped = true;
        index++;
      }
      c = template.substring(c, index);
      if (true === isEscaped) {
        c = c.replace(scope_vars_2.__rgxEscapedChar[_char], _char);
      }
      return c;
    }
    function parser_getNumber() {
      var start = index;
      var isDouble = false;
      var isBigInt = false;
      while (true) {
        var c = template.charCodeAt(index);
        if (46 === c) {
          // .
          if (true === isDouble) {
            (0, util_1.util_throw)(template, index, 'Invalid number', c);
            return null;
          }
          isDouble = true;
        }
        if ((c >= 48 && c <= 57 || 46 === c) && index < length) {
          index++;
          continue;
        }
        if (110 === c) {
          // n
          isBigInt = true;
        }
        break;
      }
      start = template.substring(start, index);
      if (isBigInt) {
        // skip 'n'
        index++;
        return BigInt(start);
      }
      return +start;
    }
    function parser_getRef() {
      var ref, start = index, c = template.charCodeAt(index);
      if (34 === c || 39 === c) {
        // ' | "
        index++;
        ref = parser_getString(c);
        index++;
        return ref;
      }
      while (true) {
        if (index === length) {
          break;
        }
        c = template.charCodeAt(index);
        if (36 === c || 95 === c) {
          // $ _
          index++;
          continue;
        }
        if (48 <= c && c <= 57 || // 0-9
        65 <= c && c <= 90 || // A-Z
        97 <= c && c <= 122) {
          // a-z
          index++;
          continue;
        }
        // - [removed] (exit on not allowed chars) 5ba755ca
        break;
      }
      return template.substring(start, index);
    }
    exports.parser_getRef = parser_getRef;
    function parser_getDirective(code) {
      if (null == code && index === length) {
        return null;
      }
      switch (code) {
       case 40 /*(*/:
        return scope_vars_1.punc_ParenthesisOpen;

       case 41 /*)*/:
        return scope_vars_1.punc_ParenthesisClose;

       case 123 /*{*/:
        return scope_vars_1.punc_BraceOpen;

       case 125 /*}*/:
        return scope_vars_1.punc_BraceClose;

       case 91 /*[*/:
        return scope_vars_1.punc_BracketOpen;

       case 93 /*]*/:
        return scope_vars_1.punc_BracketClose;

       case 44 /*,*/:
        return scope_vars_1.punc_Comma;

       case 46 /*.*/:
        return scope_vars_1.punc_Dot;

       case 59 /*;*/:
        return scope_vars_1.punc_Semicolon;

       case 43 /*+*/:
        return scope_vars_1.op_Plus;

       case 45 /*-*/:
        if (62 /*>*/ === template.charCodeAt(index + 1)) {
          index++;
          return scope_vars_1.op_AsyncAccessor;
        }
        return scope_vars_1.op_Minus;

       case 42 /* * */:
        return scope_vars_1.op_Multip;

       case 47 /*/*/:
        return scope_vars_1.op_Divide;

       case 37 /*%*/:
        return scope_vars_1.op_Modulo;

       case 61 /*=*/:
        if (template.charCodeAt(++index) !== code) {
          (0, util_1.util_throw)(template, index, 'Assignment violation: View can only access model/controllers', '=');
          return null;
        }
        if (template.charCodeAt(index + 1) === code) {
          index++;
          return scope_vars_1.op_LogicalEqual_Strict;
        }
        return scope_vars_1.op_LogicalEqual;

       case 33 /*!*/:
        if (61 === template.charCodeAt(index + 1)) {
          // =
          index++;
          if (61 === template.charCodeAt(index + 1)) {
            // =
            index++;
            return scope_vars_1.op_LogicalNotEqual_Strict;
          }
          return scope_vars_1.op_LogicalNotEqual;
        }
        return scope_vars_1.op_LogicalNot;

       case 62 /*>*/:
        var next = template.charCodeAt(index + 1);
        if (61 /*=*/ === next) {
          index++;
          return scope_vars_1.op_LogicalGreaterEqual;
        }
        if (62 /*>*/ === next) {
          index++;
          return scope_vars_1.op_ObserveAccessor;
        }
        return scope_vars_1.op_LogicalGreater;

       case 60 /*<*/:
        if (61 === template.charCodeAt(index + 1)) {
          index++;
          return scope_vars_1.op_LogicalLessEqual;
        }
        return scope_vars_1.op_LogicalLess;

       case 38 /*&*/:
        if (template.charCodeAt(++index) !== code) {
          return scope_vars_1.op_BitAnd;
        }
        return scope_vars_1.op_LogicalAnd;

       case 124 /*|*/:
        if (template.charCodeAt(++index) !== code) {
          return scope_vars_1.op_BitOr;
        }
        return scope_vars_1.op_LogicalOr;

       case 94 /*^*/:
        return scope_vars_1.op_BitXOr;

       case 63 /*?*/:
        return scope_vars_1.punc_Question;

       case 58 /*:*/:
        return scope_vars_1.punc_Colon;
      }
      if (code >= 65 && code <= 90 || code >= 97 && code <= 122 || 95 === code || 36 === code) {
        // A-Z a-z _ $
        return scope_vars_1.go_ref;
      }
      if (code >= 48 && code <= 57) {
        // 0-9 .
        return scope_vars_1.go_number;
      }
      if (34 === code || 39 === code) {
        // " '
        return scope_vars_1.go_string;
      }
      (0, util_1.util_throw)(template, index, 'Unexpected or unsupported directive', code);
      return null;
    }
    exports.parser_getDirective = parser_getDirective;
    function ast_append(current, next) {
      switch (current.type) {
       case scope_vars_1.type_Body:
        current.body.push(next);
        return next;

       case scope_vars_1.type_Statement:
        if (next.type === scope_vars_1.type_Accessor || next.type === scope_vars_1.type_AccessorExpr) {
          return current.next = next;
        }
        /* fall through */

       case scope_vars_1.type_UnaryPrefix:
        return current.body = next;

       case scope_vars_1.type_SymbolRef:
       case scope_vars_1.type_FunctionRef:
       case scope_vars_1.type_Accessor:
       case scope_vars_1.type_AccessorExpr:
        return current.next = next;
      }
      return (0, util_1.util_throw)(template, index, 'Invalid expression');
    }
    exports.ast_append = ast_append;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_parser === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_parser) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_parser, module.exports);
    } else {
      _ref_mask_projects_expression_src_parser = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_eval_statements;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_eval_statements ? _ref_mask_projects_expression_src_eval_statements : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._evaluateStatements = void 0;
    var parser_1 = _ref_mask_projects_expression_src_parser;
    var ast_1 = _ref_mask_projects_expression_src_ast;
    var eval_1 = _ref_mask_projects_expression_src_eval;
    function _evaluateStatements(expr, model, ctx, ctr, node) {
      var body = (0, parser_1._parse)(expr, false, node).body, args = [], imax = body.length, i = -1;
      var group = new ast_1.Ast_Body();
      while (++i < imax) {
        group.body.push(body[i]);
        if (null != body[i].join) {
          continue;
        }
        args.push((0, eval_1._evaluateAst)(group, model, ctx, ctr));
        group.body.length = 0;
      }
      return args;
    }
    exports._evaluateStatements = _evaluateStatements;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_eval_statements === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_eval_statements) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_eval_statements, module.exports);
    } else {
      _ref_mask_projects_expression_src_eval_statements = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_vars_helper;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_vars_helper ? _ref_mask_projects_expression_src_vars_helper : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.refs_extractVars = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    var scope_vars_1 = _ref_mask_projects_expression_src_scope_vars;
    var parser_1 = _ref_mask_projects_expression_src_parser;
    var eval_1 = _ref_mask_projects_expression_src_eval;
    /**
 * extract symbol references
 * ~[:user.name + 'px'] -> 'user.name'
 * ~[:someFn(varName) + user.name] -> ['varName', 'user.name']
 *
 * ~[:someFn().user.name] -> {accessor: (Accessor AST function call) , ref: 'user.name'}
 */
    function refs_extractVars(mix, model, ctx, ctr) {
      mix = 'string' === typeof mix ? (0, parser_1._parseCached)(mix) : mix;
      return _extractVars(mix, model, ctx, ctr);
    }
    exports.refs_extractVars = refs_extractVars;
    function _extractVars(expr, model, ctx, ctr) {
      if (null == expr) {
        return null;
      }
      var refs, x, exprType = expr.type;
      if (scope_vars_1.type_Body === exprType) {
        var body = expr.body, imax = body.length, i = -1;
        while (++i < imax) {
          x = _extractVars(body[i], model, ctx, ctr);
          refs = _append(refs, x);
        }
      }
      if (scope_vars_1.type_SymbolRef === exprType || scope_vars_1.type_Accessor === exprType || scope_vars_1.type_AccessorExpr === exprType) {
        var path = expr.body, next = expr.next;
        while (null != next) {
          nextType = next.type;
          if (scope_vars_1.type_FunctionRef === nextType) {
            return _extractVars(next, model, ctx, ctr);
          }
          if (scope_vars_1.type_SymbolRef !== nextType && scope_vars_1.type_Accessor !== nextType && scope_vars_1.type_AccessorExpr !== nextType) {
            (0, reporters_1.log_error)('Ast Exception: next should be a symbol/function ref');
            return null;
          }
          var nextType = nextType === scope_vars_1.type_AccessorExpr ? (0, eval_1._evaluateAst)(next.body, model, ctx, ctr) : next.body;
          if ('string' !== typeof nextType) {
            (0, reporters_1.log_warn)('Can`t extract accessor name', path);
            return null;
          }
          path += '.' + nextType;
          next = next.next;
        }
        return path;
      }
      switch (exprType) {
       case scope_vars_1.type_Statement:
       case scope_vars_1.type_UnaryPrefix:
       case scope_vars_1.type_Ternary:
        x = _extractVars(expr.body, model, ctx, ctr);
        refs = _append(refs, x);
        break;
      }
      // get also from case1 and case2
      if (scope_vars_1.type_Ternary === exprType) {
        x = _extractVars(expr.case1, model, ctx, ctr);
        refs = _append(refs, x);
        x = _extractVars(expr.case2, model, ctx, ctr);
        refs = _append(refs, x);
      }
      if (scope_vars_1.type_FunctionRef === exprType) {
        var args = expr.arguments, imax = args.length, i = -1;
        while (++i < imax) {
          x = _extractVars(args[i], model, ctx, ctr);
          refs = _append(refs, x);
        }
        x = null;
        var parent = expr;
        outer: while (parent = parent.parent) {
          switch (parent.type) {
           case scope_vars_1.type_SymbolRef:
           case scope_vars_1.type_Accessor:
           case scope_vars_1.type_AccessorExpr:
            x = parent.body + (null == x ? '' : '.' + x);
            break;

           case scope_vars_1.type_Body:
           case scope_vars_1.type_Statement:
            break outer;

           default:
            x = null;
            break outer;
          }
        }
        if (null != x) {
          refs = _append(refs, x);
        }
        if (expr.next) {
          x = _extractVars(expr.next, model, ctx, ctr);
          refs = _append(refs, {
            accessor: _getAccessor(expr),
            ref: x
          });
        }
      }
      return refs;
    }
    function _append(current, x) {
      if (null == current) {
        return x;
      }
      if (null == x) {
        return current;
      }
      if (!('object' === typeof current && null != current.length)) {
        current = [ current ];
      }
      if (!('object' === typeof x && null != x.length)) {
        if (-1 === current.indexOf(x)) {
          current.push(x);
        }
        return current;
      }
      for (var i = 0, imax = x.length; i < imax; i++) {
        if (-1 === current.indexOf(x[i])) {
          current.push(x[i]);
        }
      }
      return current;
    }
    function _getAccessor(current) {
      var parent = current;
      outer: while (parent.parent) {
        switch (parent.parent.type) {
         case scope_vars_1.type_Body:
         case scope_vars_1.type_Statement:
          break outer;
        }
        parent = parent.parent;
      }
      return _copy(parent, current.next);
    }
    function _copy(ast, stop) {
      if (ast === stop || null == ast) {
        return null;
      }
      if ('object' !== typeof ast) {
        return ast;
      }
      if (null != ast.length && 'function' === typeof ast.splice) {
        var arr = [];
        for (var i = 0, imax = ast.length; i < imax; i++) {
          arr[i] = _copy(ast[i], stop);
        }
        return arr;
      }
      var clone = {};
      for (var key in ast) {
        if (null == ast[key] || 'parent' === key) {
          continue;
        }
        clone[key] = _copy(ast[key], stop);
      }
      return clone;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_vars_helper === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_vars_helper) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_vars_helper, module.exports);
    } else {
      _ref_mask_projects_expression_src_vars_helper = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_expression_src_exports;
  (function() {
    var exports = null != _ref_mask_projects_expression_src_exports ? _ref_mask_projects_expression_src_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ExpressionUtil = exports.expression_parse = exports.expression_varRefs = exports.expression_evalStatements = exports.expression_eval = exports.expression_getType = exports.exp_type_Observe = exports.exp_type_Async = exports.exp_type_Sync = void 0;
    var exports_1 = _ref_mask_src_custom_exports;
    var parser_1 = _ref_mask_projects_expression_src_parser;
    var eval_1 = _ref_mask_projects_expression_src_eval;
    var eval_statements_1 = _ref_mask_projects_expression_src_eval_statements;
    var vars_helper_1 = _ref_mask_projects_expression_src_vars_helper;
    /**
 * ExpressionUtil
 *
 * Helper to work with expressions
 **/
    exports.exp_type_Sync = 1;
    exports.exp_type_Async = 2;
    exports.exp_type_Observe = 3;
    function expression_getType(expr) {
      expr = 'string' === typeof expr ? (0, parser_1._parse)(expr) : expr;
      if (null != expr) {
        if (expr.observe) {
          return exports.exp_type_Observe;
        }
        if (expr.async) {
          return exports.exp_type_Async;
        }
      }
      return exports.exp_type_Sync;
    }
    exports.expression_getType = expression_getType;
    exports.expression_eval = eval_1._evaluate;
    exports.expression_evalStatements = eval_statements_1._evaluateStatements;
    exports.expression_varRefs = vars_helper_1.refs_extractVars;
    exports.expression_parse = parser_1._parse;
    exports.ExpressionUtil = {
      parse: parser_1._parse,
      /**
     * Expression.eval(expression [, model, cntx, controller]) -> result
     * - expression (String): Expression, only accessors are supoorted
     *
     * All symbol and function references will be looked for in
     *
     * 1. model, or via special accessors:
     *         - `$c` controller
     *         - `$ctx`
     *         - `$a' controllers attributes
     * 2. scope:
     *         controller.scope
     *         controller.parent.scope
     *         ...
     *
     * Sample:
     * '(user.age + 20) / 2'
     * 'fn(user.age + "!") + x'
     **/
      eval: eval_1._evaluate,
      varRefs: vars_helper_1.refs_extractVars,
      // Return all values of a comma delimiter expressions
      // like argumets: ' foo, bar, "4,50" ' => [ %fooValue, %barValue, "4,50" ]
      evalStatements: eval_statements_1._evaluateStatements
    };
    (0, exports_1.customUtil_register)('expression', function(value, model, ctx, element, ctr, name, type, node) {
      type = 'compo-attr' === type || 'compo-prop' === type ? ctr.parent : ctr;
      return (0, exports.expression_eval)(value, model, ctx, type, node);
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_expression_src_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_expression_src_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_expression_src_exports, module.exports);
    } else {
      _ref_mask_projects_expression_src_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_run;
  (function() {
    var exports = null != _ref_mask_src_feature_run ? _ref_mask_src_feature_run : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.mask_run = void 0;
    var refs_1 = _ref_utils_src_refs;
    var is_1 = _ref_utils_src_is;
    var exports_1 = _ref_mask_src_builder_exports;
    var exports_2 = _ref_mask_src_parser_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_3 = _ref_mask_projects_mask_compo_src_exports;
    /**
 * Find all `<script type="text/mask" data-run='true'>` blocks in the page
 * and render each block into the parents container.
 *
 * The function is automatically renders the blocks
 * `<script type="text/mask" data-run='auto'>` on `DOMContentLoaded` event
 * @returns {object} Root component
 * @memberOf mask
 * @method run
*/
    function mask_run() {
      if (0 === _state) {
        _state = _state_All;
      }
      var model, ctx, el, Ctor, args = refs_1._Array_slice.call(arguments);
      var mix, imax = args.length, i = -1;
      while (++i < imax) {
        mix = args[i];
        if (mix instanceof Node) {
          el = mix;
          continue;
        }
        if ((0, is_1.is_Function)(mix)) {
          Ctor = mix;
          continue;
        }
        if ((0, is_1.is_Object)(mix)) {
          if (null == model) {
            model = mix;
            continue;
          }
          ctx = mix;
        }
      }
      if (null == el) {
        el = document.body;
      }
      if (null == Ctor) {
        Ctor = exports_3.Compo;
      }
      if (null == model) {
        model = {};
      }
      var ctr = new Ctor(null, model, ctx, el);
      return _run(model, ctx, el, ctr);
    }
    exports.mask_run = mask_run;
    function _run(model, ctx, container, ctr) {
      ctr.ID = ++exports_1.BuilderData.id;
      var scripts = refs_1._Array_slice.call(document.getElementsByTagName('script')), script = null, found = false, ready = false, wait = 0, imax = scripts.length, i = -1;
      while (++i < imax) {
        script = scripts[i];
        var scriptType = script.getAttribute('type');
        if ('text/mask' !== scriptType && 'text/x-mask' !== scriptType) {
          continue;
        }
        scriptType = script.getAttribute('data-run');
        if (null == scriptType) {
          continue;
        }
        if ('auto' === scriptType) {
          if (false === isCurrent(_state_Auto)) {
            continue;
          }
        }
        if ('true' === scriptType) {
          if (false === isCurrent(_state_Manual)) {
            continue;
          }
        }
        found = true;
        scriptType = new exports_1.builder_Ctx(ctx);
        var fragment = (0, exports_1.builder_build)((0, exports_2.parser_parse)(script.textContent), model, scriptType, null, ctr);
        if (true === scriptType.async) {
          wait++;
          scriptType.done(resumer);
        }
        script.parentNode.insertBefore(fragment, script);
      }
      if (false === found) {
        if (_state === _state_Auto) {
          return null;
        }
        (0, reporters_1.log_warn)('No blocks found: <script type=\'text/mask\' data-run=\'true\'>...<\/script>');
      }
      ready = true;
      if (0 === wait) {
        flush();
      }
      function resumer() {
        if (0 === --wait && ready) {
          flush();
        }
      }
      function flush() {
        if ((0, is_1.is_Function)(ctr.renderEnd)) {
          ctr.renderEnd(container, model);
        }
        exports_3.Component.signal.emitIn(ctr, 'domInsert');
      }
      return ctr;
    }
    if (null != document && document.addEventListener) {
      document.addEventListener('DOMContentLoaded', function(event) {
        if (0 !== _state) {
          return;
        }
        _state = _state_Auto;
        _app = mask_run();
        _state = _state_Manual;
        if (null == _app) {
          return;
        }
        if (null == refs_1._global.app) {
          refs_1._global.app = _app;
          return;
        }
        var _app = _app.components;
        if (null == _app || 0 === _app.length) {
          return;
        }
        var target = refs_1._global.app.components;
        if (null == target || 0 === target.length) {
          refs_1._global.app.components = _app;
          return;
        }
        target.push.apply(target, _app);
      });
    }
    var _state_Auto = 2, _state_Manual = 4, _state_All = _state_Auto | _state_Manual, _state = 0;
    function isCurrent(state) {
      return (_state & state) === state;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_run === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_run) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_run, module.exports);
    } else {
      _ref_mask_src_feature_run = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_TreeWalker;
  (function() {
    var exports = null != _ref_mask_src_feature_TreeWalker ? _ref_mask_src_feature_TreeWalker : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.mask_TreeWalker = void 0;
    var exports_1 = _ref_mask_src_dom_exports;
    var refs_1 = _ref_utils_src_refs;
    var class_1 = _ref_utils_src_class;
    var is_1 = _ref_utils_src_is;
    var coll_1 = _ref_utils_src_coll;
    var exports_2 = _ref_mask_src_parser_exports;
    /**
 * TreeWalker
 * @memberOf mask
 * @name TreeWalker
 */
    exports.mask_TreeWalker = {
      /**
     * Visit each mask node
     * @param {MaskNode} root
     * @param {TreeWalker~SyncVisitior} visitor
     * @memberOf mask.TreeWalker
     */
      walk: function(root, fn) {
        if ('object' === typeof root && root.type === exports_1.Dom.CONTROLLER) {
          new SyncWalkerCompos(root, fn);
          return root;
        }
        root = prepairRoot(root);
        new SyncWalker(root, fn);
        return root;
      },
      /**
     * Asynchronous visit each mask node
     * @param {MaskNode} root
     * @param {TreeWalker~AsyncVisitior} visitor
     * @param {function} done
     * @memberOf mask.TreeWalker
     */
      walkAsync: function(root, fn, done) {
        root = prepairRoot(root);
        new AsyncWalker(root, fn, done);
      },
      map: function(root, fn) {
        return new SyncMapper().map(root, fn);
      },
      superpose: function(rootA, rootB, fn) {
        return new SyncSuperposer().join(rootA, rootB, fn);
      }
    };
    var SyncWalker, SyncWalkerCompos;
    (function() {
      SyncWalker = function(root, fn) {
        walk(root, fn);
      };
      SyncWalkerCompos = function(root, fn) {
        walkCompos(root, fn, root);
      };
      function walk(node, fn, parent, index) {
        if (null == node) {
          return null;
        }
        var mod, deep = true, break_ = false;
        if (true !== isFragment(node)) {
          mod = fn(node);
        }
        if (void 0 !== mod) {
          mod = new Modifier(mod);
          mod.process(new Step(node, parent, index));
          deep = mod.deep;
          break_ = mod['break'];
        }
        var nodes = safe_getNodes(node);
        if (null == nodes || false === deep || true === break_) {
          return mod;
        }
        var x, imax = nodes.length, i = 0;
        for (;i < imax; i++) {
          x = nodes[i];
          mod = walk(x, fn, node, i);
          if (null != mod && true === mod['break']) {
            return mod;
          }
        }
      }
      function walkCompos(compo, fn, parent, index) {
        if (null == compo) {
          return;
        }
        var mod = fn(compo, index);
        if (void 0 !== mod) {
          if (false === mod.deep || true === mod['break']) {
            return mod;
          }
        }
        var compos = compo.components;
        if (null == compos) {
          return null;
        }
        var x, imax = compos.length, i = 0;
        for (;i < imax; i++) {
          x = compos[i];
          mod = walkCompos(x, fn, compo, i);
          if (null != mod && true === mod['break']) {
            return mod;
          }
        }
      }
    })();
    var AsyncWalker;
    (function() {
      AsyncWalker = function(root, fn, done) {
        this.stack = [];
        this.done = done;
        this.root = root;
        this.fn = fn;
        this.process = this.process.bind(this);
        this.visit(this.push(root));
      };
      AsyncWalker.prototype = {
        current: function() {
          return this.stack[this.stack.length - 1];
        },
        push: function(node, parent, index) {
          node = new Step(node, parent, index);
          this.stack.push(node);
          return node;
        },
        pop: function() {
          return this.stack.pop();
        },
        getNext: function(goDeep) {
          var current = this.current(), node = current.node, nodes = safe_getNodes(node);
          if (null == node) {
            throw Error('Node is null');
          }
          if (null != nodes && false !== goDeep && 0 !== nodes.length) {
            if (null == nodes[0]) {
              throw Error('Node is null');
            }
            return this.push(nodes[0], node, 0);
          }
          var parent, index;
          while (0 !== this.stack.length) {
            current = this.pop();
            parent = current.parent;
            index = current.index;
            if (null == parent) {
              this.pop();
              continue;
            }
            if (++index < parent.nodes.length) {
              return this.push(parent.nodes[index], parent, index);
            }
          }
          return null;
        },
        process: function(mod) {
          var deep = true, break_ = false;
          if (void 0 !== mod) {
            mod = new Modifier(mod);
            mod.process(this.current());
            deep = mod.deep;
            break_ = mod['break'];
          }
          mod = true === break_ ? null : this.getNext(deep);
          if (null == mod) {
            this.done(this.root);
            return;
          }
          this.visit(mod);
        },
        visit: function(step) {
          step = step.node;
          if (false === isFragment(step)) {
            this.fn(step, this.process);
            return;
          }
          this.process();
        },
        fn: null,
        done: null,
        stack: null
      };
    })();
    var Modifier;
    (function() {
      /**
     * @name IModifier
     * @memberOf TreeWalker
     */
      Modifier = function(mod, step) {
        for (var key in mod) {
          this[key] = mod[key];
        }
      };
      Modifier.prototype = {
        /**
         * On `true` stops the walker
         */
        break: false,
        /**
         * On `false` doesn't visit the subnodes
         */
        deep: true,
        /**
         * On `true` removes current node
         */
        remove: false,
        /**
         * On not `null`, replaces the current node with value
         */
        replace: null,
        process: function(step) {
          if (null != this.replace) {
            this.deep = false;
            step.parent.nodes[step.index] = this.replace;
            return;
          }
          if (true === this.remove) {
            this.deep = false;
            var arr = step.parent.nodes, step = step.index;
            refs_1._Array_splice.call(arr, step, 1);
            return;
          }
        }
      };
    })();
    var SyncMapper;
    (function() {
      SyncMapper = (0, class_1.class_create)({
        map: function(node, fn) {
          var mapper = getMapper(node);
          return mapper(node, fn);
        }
      });
      function getMapper(node) {
        /* not strict */
        if (node.compoName) {
          return mapCompo;
        }
        return mapNode;
      }
      function mapNode(node, fn, parent, index) {
        if (null == node) {
          return null;
        }
        var nextNode = isFragment(node) ? new exports_1.Dom.Fragment() : fn(node);
        if (null == nextNode) {
          return null;
        }
        var nodes = safe_getNodes(node);
        if (null == nodes) {
          return nextNode;
        }
        nextNode.nodes = (0, coll_1.coll_map)(nodes, function(x) {
          return mapNode(x, fn, node);
        });
        return nextNode;
      }
      function mapCompo(compo, fn, parent) {
        if (null == compo) {
          return null;
        }
        var next = fn(compo);
        if (null == next || null == compo.components) {
          return next;
        }
        next.components = (0, coll_1.coll_map)(compo.components, function(x) {
          return mapCompo(x, fn, compo);
        });
        return next;
      }
    })();
    var SyncSuperposer;
    (function() {
      SyncSuperposer = (0, class_1.class_create)({
        join: function(rootA, rootB, fn) {
          var superposer = getSuperposer(rootA);
          return superposer(rootA, rootB, fn);
        }
      });
      function getSuperposer(node) {
        /* not strict */
        if (node.compoName) {
          return superposeCompos;
        }
        return superposeNodes;
      }
      function superposeNodes(nodeA, nodeB, fn) {
        var typeA = safe_getType(nodeA), typeB = safe_getType(nodeB);
        if (typeA !== typeB) {
          return;
        }
        if (typeA !== exports_1.Dom.FRAGMENT) {
          fn(nodeA, nodeB);
        }
        var arrA = safe_getNodes(nodeA), arrB = safe_getNodes(nodeB);
        if (null == arrA || null == arrB) {
          return;
        }
        var aL = arrA.length, bL = arrB.length, i = -1;
        while (++i < aL && i < bL) {
          var a = arrA[i], b = arrB[i];
          if (null != a.tagName && a.tagName !== b.tagName) {
            continue;
          }
          superposeNodes(a, b, fn);
        }
        return nodeA;
      }
      function superposeCompos(compoA, compoB, fn) {
        fn(compoA, compoB);
        var arrA = compoA.components, arrB = compoB.components;
        if (null == arrA || null == arrB) {
          return;
        }
        var aL = arrA.length, bL = arrB.length, i = -1;
        while (++i < aL && i < bL) {
          var a = arrA[i], b = arrB[i];
          if (null != a.compoName && a.compoName !== b.compoName) {
            continue;
          }
          superposeCompos(a, b, fn);
        }
      }
    })();
    var Step = function(node, parent, index) {
      this.node = node;
      this.index = index;
      this.parent = parent;
    };
    /* UTILS */
    function isFragment(node) {
      return exports_1.Dom.FRAGMENT === safe_getType(node);
    }
    function safe_getNodes(node) {
      var nodes = node.nodes;
      if (null == nodes) {
        return null;
      }
      return (0, is_1.is_Array)(nodes) ? nodes : node.nodes = [ nodes ];
    }
    function safe_getType(node) {
      var type = node.type;
      if (null != type) {
        return type;
      }
      if ((0, is_1.is_Array)(node)) {
        return exports_1.Dom.FRAGMENT;
      }
      if (null != node.tagName) {
        return exports_1.Dom.NODE;
      }
      if (null != node.content) {
        return exports_1.Dom.TEXTNODE;
      }
      return exports_1.Dom.NODE;
    }
    function prepairRoot(root) {
      if ('string' === typeof root) {
        root = (0, exports_2.parser_parse)(root);
      }
      if (false === isFragment(root)) {
        var fragment = new exports_1.Dom.Fragment();
        fragment.appendChild(root);
        root = fragment;
      }
      return root;
    }
    /**
 * Is called on each node
 * @callback TreeWalker~SyncVisitor
 * @param {MaskNode} node
 * @returns {Modifier|void}
 */
    /**
 * Is called on each node
 * @callback TreeWalker~AsyncVisitor
 * @param {MaskNode} node
 * @param {function} done - Optional pass @see{@link TreeWalker.IModifier} to the callback
 * @returns {void}
 */
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_TreeWalker === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_TreeWalker) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_TreeWalker, module.exports);
    } else {
      _ref_mask_src_feature_TreeWalker = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_optimize;
  (function() {
    var exports = null != _ref_mask_src_feature_optimize ? _ref_mask_src_feature_optimize : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.mask_registerOptimizer = exports.mask_optimize = void 0;
    var TreeWalker_1 = _ref_mask_src_feature_TreeWalker;
    var exports_1 = _ref_mask_src_custom_exports;
    /**
 * Run all registerd optimizers recursively on the nodes
 * @param {MaskNode} node
 * @param {function} onComplete
 * @param {mask.optimize~onComplete} done
 */
    function mask_optimize(dom, done) {
      TreeWalker_1.mask_TreeWalker.walkAsync(dom, function(node, next) {
        var fn = getOptimizer(node);
        if (null != fn) {
          fn(node, next);
          return;
        }
        next();
      }, done);
    }
    exports.mask_optimize = mask_optimize;
    /**
 * Register custom optimizer for a node name
 * @param {string} tagName - Node name
 * @param {function} visitor - Used for @see {@link mask.TreeWalker.walkSync}
 */
    function mask_registerOptimizer(tagName, fn) {
      exports_1.custom_Optimizers[tagName] = fn;
    }
    exports.mask_registerOptimizer = mask_registerOptimizer;
    function getOptimizer(node) {
      return exports_1.custom_Optimizers[node.tagName];
    }
    /**
 * Returns optimized mask tree
 * @callback mask.optimize~onComplete
 * @param {MaskNode} node
 */
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_optimize === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_optimize) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_optimize, module.exports);
    } else {
      _ref_mask_src_feature_optimize = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Opts;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Opts ? _ref_mask_src_feature_modules_Opts : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._opts = void 0;
    exports._opts = {
      base: null,
      nsBase: '/',
      version: null,
      es6Modules: false,
      moduleResolution: 'classic',
      ext: {
        mask: 'mask',
        script: 'js',
        style: 'js'
      },
      prefixes: {}
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Opts === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Opts) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Opts, module.exports);
    } else {
      _ref_mask_src_feature_modules_Opts = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_resource_transports_xhr_node;
  (function() {
    var exports = null != _ref_mask_src_util_resource_transports_xhr_node ? _ref_mask_src_util_resource_transports_xhr_node : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.xhr_get = void 0;
    var path_1 = _ref_mask_src_util_path;
    function xhr_get(path, cb) {
      //@TODO Implement remote http getter
      path = (0, path_1.path_toLocalFile)(path);
      fs.readFile(path, 'utf8', function(error, str) {
        if (null != error) {
          cb({
            message: error.toString(),
            status: error.code
          });
          return;
        }
        cb(null, str);
      });
    }
    exports.xhr_get = xhr_get;
    var fs = require('fs');
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_resource_transports_xhr_node === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_resource_transports_xhr_node) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_resource_transports_xhr_node, module.exports);
    } else {
      _ref_mask_src_util_resource_transports_xhr_node = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_resource_transports_style_node;
  (function() {
    var exports = null != _ref_mask_src_util_resource_transports_style_node ? _ref_mask_src_util_resource_transports_style_node : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.style_get = void 0;
    function style_get(path, cb) {
      // skip all CSS embeddings
      cb();
    }
    exports.style_get = style_get;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_resource_transports_style_node === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_resource_transports_style_node) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_resource_transports_style_node, module.exports);
    } else {
      _ref_mask_src_util_resource_transports_style_node = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_resource_transports_script_node;
  (function() {
    var exports = null != _ref_mask_src_util_resource_transports_script_node ? _ref_mask_src_util_resource_transports_script_node : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.script_get = void 0;
    var path_1 = _ref_mask_src_util_path;
    function script_get(path, cb) {
      path = (0, path_1.path_toLocalFile)(path);
      try {
        var x = require(path);
        cb(null, x);
      } catch (error) {
        cb(error);
      }
    }
    exports.script_get = script_get;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_resource_transports_script_node === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_resource_transports_script_node) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_resource_transports_script_node, module.exports);
    } else {
      _ref_mask_src_util_resource_transports_script_node = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_resource_transports_xhr_base;
  (function() {
    var exports = null != _ref_mask_src_util_resource_transports_xhr_base ? _ref_mask_src_util_resource_transports_xhr_base : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.script_get = exports.style_get = exports.xhr_get = void 0;
    var xhr_node_1 = _ref_mask_src_util_resource_transports_xhr_node;
    Object.defineProperty(exports, 'xhr_get', {
      enumerable: true,
      get: function() {
        return xhr_node_1.xhr_get;
      }
    });
    var style_node_1 = _ref_mask_src_util_resource_transports_style_node;
    Object.defineProperty(exports, 'style_get', {
      enumerable: true,
      get: function() {
        return style_node_1.style_get;
      }
    });
    var script_node_1 = _ref_mask_src_util_resource_transports_script_node;
    Object.defineProperty(exports, 'script_get', {
      enumerable: true,
      get: function() {
        return script_node_1.script_get;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_resource_transports_xhr_base === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_resource_transports_xhr_base) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_resource_transports_xhr_base, module.exports);
    } else {
      _ref_mask_src_util_resource_transports_xhr_base = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_resource_transports_json;
  (function() {
    var exports = null != _ref_mask_src_util_resource_transports_json ? _ref_mask_src_util_resource_transports_json : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.json_get = void 0;
    var xhr_base_1 = _ref_mask_src_util_resource_transports_xhr_base;
    function json_get(path, cb) {
      (0, xhr_base_1.xhr_get)(path, function(error, str) {
        if (error) {
          cb(error);
          return;
        }
        var json;
        try {
          json = JSON.parse(str);
        } catch (error) {
          cb('JSON error: ' + String(error));
          return;
        }
        cb(null, json);
      });
    }
    exports.json_get = json_get;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_resource_transports_json === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_resource_transports_json) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_resource_transports_json, module.exports);
    } else {
      _ref_mask_src_util_resource_transports_json = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_resource_file;
  (function() {
    var exports = null != _ref_mask_src_util_resource_file ? _ref_mask_src_util_resource_file : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.file_getJson = exports.file_getStyle = exports.file_getScript = exports.file_get = void 0;
    var xhr_base_1 = _ref_mask_src_util_resource_transports_xhr_base;
    var json_1 = _ref_mask_src_util_resource_transports_json;
    var path_1 = _ref_mask_src_util_path;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var exports_1 = _ref_mask_src_feature_modules_exports;
    function file_get(path, ctr) {
      return get(xhr_base_1.xhr_get, path, ctr);
    }
    exports.file_get = file_get;
    function file_getScript(path, ctr) {
      return get(xhr_base_1.script_get, path, ctr);
    }
    exports.file_getScript = file_getScript;
    function file_getStyle(path, ctr) {
      return get(xhr_base_1.style_get, path, ctr);
    }
    exports.file_getStyle = file_getStyle;
    function file_getJson(path, ctr) {
      return get(json_1.json_get, path, ctr);
    }
    exports.file_getJson = file_getJson;
    function get(fn, path, ctr) {
      path = (0, path_1.path_resolveUrl)(path, exports_1.Module.resolveLocation(ctr));
      if (path in Cache) {
        return Cache[path];
      }
      ctr = Cache[path] = new Dfr_1.class_Dfr();
      fn(path, ctr.pipeCallback());
      return ctr;
    }
    var Cache = Object.create(null);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_resource_file === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_resource_file) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_resource_file, module.exports);
    } else {
      _ref_mask_src_util_resource_file = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_loaders;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_loaders ? _ref_mask_src_feature_modules_loaders : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._file_getJson = exports._file_getStyle = exports._file_getScript = exports._file_get = void 0;
    var file_1 = _ref_mask_src_util_resource_file;
    var listeners_1 = _ref_mask_src_util_listeners;
    var is_1 = _ref_utils_src_is;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var reporters_1 = _ref_mask_src_util_reporters;
    var Opts_1 = _ref_mask_src_feature_modules_Opts;
    var path_1 = _ref_mask_src_util_path;
    var config_1 = _ref_mask_src_api_config;
    exports._file_get = createTransport(function() {
      return config_1.__cfg.getFile || file_1.file_get;
    });
    exports._file_getScript = createTransport(function() {
      return config_1.__cfg.getScript || file_1.file_getScript;
    });
    exports._file_getStyle = createTransport(function() {
      return config_1.__cfg.getStyle || file_1.file_getStyle;
    });
    exports._file_getJson = createTransport(function() {
      return config_1.__cfg.getJson || config_1.__cfg.getData || file_1.file_getJson;
    });
    (0, listeners_1.listeners_on)('config', function(config) {
      config = config.modules;
      if (null == config) {
        return;
      }
      var fn = Loaders[config];
      if (false === (0, is_1.is_Function)(fn)) {
        (0, reporters_1.log_warn)('Module system is not supported: ' + config);
        return;
      }
      fn();
    });
    function createTransport(loaderFactoryFn) {
      return function(path_) {
        var fn = loaderFactoryFn(), v = Opts_1._opts.version;
        if (null != v) {
          path_ = (0, path_1.path_appendQuery)(path_, 'v', v);
        }
        return fn(path_);
      };
    }
    var Loaders = {
      default: function() {
        config_1.__cfg.getScript = config_1.__cfg.getFile = config_1.__cfg.getStyle = null;
      },
      include: function() {
        config_1.__cfg.getScript = getter('js');
        config_1.__cfg.getStyle = getter('css');
        config_1.__cfg.getFile = getter('load');
        var lib = include;
        function getter(name) {
          return function(path) {
            return Dfr_1.class_Dfr.run(function(resolve, reject) {
              lib.instance('/')[name](path + '::Module').done(function(resp) {
                if ('css' === name) {
                  return resolve();
                }
                if ('js' === name) {
                  return resolve(resp.Module);
                }
                resolve(resp[name].Module);
              });
            });
          };
        }
      }
    };
    if ('undefined' !== typeof include && (0, is_1.is_Function)(include && include.js)) {
      (0, config_1.mask_config)('modules', 'include');
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_loaders === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_loaders) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_loaders, module.exports);
    } else {
      _ref_mask_src_feature_modules_loaders = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_utils;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_utils ? _ref_mask_src_feature_modules_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.u_resolveNpmPath = exports.u_isNpmPath = exports.u_handler_getDelegate = exports.u_resolvePathFromImport = exports.u_resolvePath = exports.u_resolveBase = exports.u_setOption = exports.u_resolveLocation = void 0;
    var path_1 = _ref_mask_src_util_path;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var Opts_1 = _ref_mask_src_feature_modules_Opts;
    var reporters_1 = _ref_mask_src_util_reporters;
    var loaders_1 = _ref_mask_src_feature_modules_loaders;
    function u_resolveLocation(ctx, ctr, module) {
      if (null != module) {
        return module.location;
      }
      while (null != ctr) {
        if (null != ctr.location) {
          return ctr.location;
        }
        if (null != ctr.resource && ctr.resource.location) {
          return ctr.resource.location;
        }
        ctr = ctr.parent;
      }
      module = null;
      if (null != ctx) {
        if (null != ctx.filename) {
          module = (0, path_1.path_getDir)((0, path_1.path_normalize)(ctx.filename));
        }
        if (null != ctx.dirname) {
          module = (0, path_1.path_normalize)(ctx.dirname + '/');
        }
      }
      if (null == module) {
        return (0, path_1.path_resolveCurrent)();
      }
      if (false === (0, path_1.path_isRelative)(module)) {
        return module;
      }
      return (0, path_1.path_combine)(u_resolveBase(), module);
    }
    exports.u_resolveLocation = u_resolveLocation;
    function u_setOption(options, key, val) {
      if ('base' === key || 'nsBase' === key) {
        var path = (0, path_1.path_normalize)(val);
        if ('/' !== path[path.length - 1]) {
          path += '/';
        }
        // Do not resolve root, as it will be resolved by base later
        // @NextIteration: remove also path_resolveRoot, use instead resolveCurrent
        // if (path[0] === '/') {
        // 	path = path_combine(path_resolveRoot(), path);
        // }
        options[key] = path;
        return this;
      }
      path = (0, obj_1.obj_getProperty)(options, key);
      if ((0, is_1.is_Object)(path) && (0, is_1.is_Object)(val)) {
        (0, obj_1.obj_extend)(path, val);
        return this;
      }
      (0, obj_1.obj_setProperty)(options, key, val);
    }
    exports.u_setOption = u_setOption;
    function u_resolveBase() {
      if (null == Opts_1._opts.base) {
        Opts_1._opts.base = (0, path_1.path_resolveCurrent)();
      } else if (true === (0, path_1.path_isRelative)(Opts_1._opts.base)) {
        Opts_1._opts.base = (0, path_1.path_combine)((0, path_1.path_resolveCurrent)(), Opts_1._opts.base);
      }
      return Opts_1._opts.base;
    }
    exports.u_resolveBase = u_resolveBase;
    function u_resolvePath(path, ctx, ctr, module) {
      if (false === hasExt(path)) {
        path += '.mask';
      }
      return toAbsolute(path, ctx, ctr, module);
    }
    exports.u_resolvePath = u_resolvePath;
    function u_resolvePathFromImport(node, ctx, ctr, module, makeAbs) {
      var path = node.path;
      if (null == path && null != node.namespace) {
        path = fromNs(node);
      }
      if ('@' === path[0]) {
        path = (0, path_1.path_fromPrfx)(path, Opts_1._opts.prefixes);
        if (null == path) {
          path = node.path;
          (0, reporters_1.warn_withNode)('Prefix not defined: ' + path, node);
        }
      }
      if ('/' === path[path.length - 1] && null != node.exports) {
        path += node.exports[0].name;
      }
      if (false === hasExt(path)) {
        var c = path.charCodeAt(0);
        if (47 === c || 46 === c) {
          // / .
          c = node.contentType;
          if (null == c || 'mask' === c) {
            path += '.mask';
          }
        } else if (u_isNpmPath(path)) {
          return path;
        }
      }
      return false === makeAbs ? path : toAbsolute(path, ctx, ctr, module);
    }
    exports.u_resolvePathFromImport = u_resolvePathFromImport;
    function u_handler_getDelegate(compoName, compo, next) {
      return function(name) {
        if (name === compoName) {
          return compo;
        }
        if (null != next) {
          return next(name);
        }
        return null;
      };
    }
    exports.u_handler_getDelegate = u_handler_getDelegate;
    function u_isNpmPath(path) {
      return 'node' === Opts_1._opts.moduleResolution && /^([\w\-]+)(\/[\w\-_]+)*$/.test(path);
    }
    exports.u_isNpmPath = u_isNpmPath;
    function toAbsolute(path_, ctx, ctr, module) {
      if ((0, path_1.path_isRelative)(path_)) {
        path_ = (0, path_1.path_combine)(u_resolveLocation(ctx, ctr, module), path_);
      } else if (47 /*/*/ === path_.charCodeAt(0)) {
        path_ = (0, path_1.path_combine)(u_resolveBase(), path_);
      }
      return (0, path_1.path_normalize)(path_);
    }
    function hasExt(path) {
      return '' !== (0, path_1.path_getExtension)(path);
    }
    function fromNs(node) {
      var type = node.contentType || 'script';
      var path = node.namespace.replace(/\./g, '/');
      if ('/' === path[0]) {
        path = '.' + path;
      } else {
        var base = Opts_1._opts.nsBase;
        if (null != base) {
          path = (0, path_1.path_combine)(base, path);
        }
      }
      base = node.exports;
      if (null == base) {
        path += '/' + node.alias;
      } else if (1 === base.length) {
        base = base[0];
        var name = base.name;
        path += '/' + name;
        if ('script' === type && true !== Opts_1._opts.es6Modules) {
          node.alias = base.alias || name;
          node.exports = null;
        }
      }
      base = Opts_1._opts.ext[type] || type;
      path += '.' + base;
      return path;
    }
    function u_resolveNpmPath(contentType, path, parentLocation, cb) {
      var name = /^([\w\-]+)/.exec(path)[0];
      var resource = path.substring(name.length + 1);
      if (resource && false === hasExt(resource)) {
        resource += '.' + _ext[contentType];
      }
      var root = '';
      path = /(\w{2,5}:\/{2,3}[^/]+)/.exec(parentLocation);
      if (path) {
        root = path[0];
        parentLocation = parentLocation.substring(root.length);
      }
      var nodeModules, current = parentLocation, lookups = [];
      function check() {
        nodeModules = (0, path_1.path_combine)(root, current, '/node_modules/', name, '/');
        lookups.unshift((0, path_1.path_combine)(nodeModules, 'package.json'));
        (0, loaders_1._file_get)(lookups[0]).then(function(text) {
          onComplete(null, text);
        }, onComplete);
      }
      function onComplete(error, text) {
        var json;
        if (text) {
          try {
            json = JSON.parse(text);
          } catch (error) {}
        }
        if (null != error || null == json) {
          text = current.replace(/[^\/]+\/?$/, '');
          if (text === current) {
            cb('Module was not resolved: ' + lookups.join(','));
            return;
          }
          current = text;
          check();
          return;
        }
        if (resource) {
          cb(null, nodeModules + resource);
          return;
        }
        var filename;
        if ('mask' === contentType && json.mainMask) {
          filename = json.mainMask;
        } else if ('js' === contentType && json.main) {
          filename = json.main;
        } else {
          filename = 'index.' + _ext[contentType];
        }
        cb(null, (0, path_1.path_combine)(nodeModules, filename));
      }
      check();
    }
    exports.u_resolveNpmPath = u_resolveNpmPath;
    var _ext = {
      js: 'js',
      mask: 'mask',
      css: 'css'
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_utils, module.exports);
    } else {
      _ref_mask_src_feature_modules_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_types;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_types ? _ref_mask_src_feature_modules_types : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.type_getModuleType = exports.type_get = exports.type_isMask = exports._typeMappings = void 0;
    var path_1 = _ref_mask_src_util_path;
    exports._typeMappings = {
      script: 'script',
      style: 'style',
      data: 'data',
      mask: 'mask',
      html: 'html',
      js: 'script',
      ts: 'script',
      es6: 'script',
      coffee: 'script',
      css: 'style',
      scss: 'style',
      sass: 'style',
      less: 'style',
      json: 'data',
      yml: 'data',
      txt: 'text',
      text: 'text',
      load: 'text'
    };
    function type_isMask(endpoint) {
      var type = endpoint.contentType, type = type || (0, path_1.path_getExtension)(endpoint.path);
      return '' === type || 'mask' === type || 'html' === type;
    }
    exports.type_isMask = type_isMask;
    function type_get(endpoint) {
      var type = endpoint.contentType;
      if (null == type && null != endpoint.moduleType) {
        var x = exports._typeMappings[endpoint.moduleType];
        if (null != x) {
          return x;
        }
      }
      x = type || (0, path_1.path_getExtension)(endpoint.path);
      if ('' === x || 'mask' === x) {
        return 'mask';
      }
      return exports._typeMappings[x];
    }
    exports.type_get = type_get;
    function type_getModuleType(endpoint) {
      return endpoint.moduleType || type_get(endpoint);
    }
    exports.type_getModuleType = type_getModuleType;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_types === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_types) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_types, module.exports);
    } else {
      _ref_mask_src_feature_modules_types = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_cache;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_cache ? _ref_mask_src_feature_modules_cache : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.cache_toMap = exports.cache_clear = exports.cache_set = exports.cache_get = void 0;
    var obj_1 = _ref_utils_src_obj;
    var types_1 = _ref_mask_src_feature_modules_types;
    var _cache = {};
    function cache_get(endpoint) {
      return ensure(endpoint)[endpoint.path];
    }
    exports.cache_get = cache_get;
    function cache_set(endpoint, module) {
      return ensure(endpoint)[endpoint.path] = module;
    }
    exports.cache_set = cache_set;
    function cache_clear(path) {
      if (null == path) {
        _cache = {};
        return;
      }
      for (var x in _cache) {
        delete _cache[x][path];
      }
    }
    exports.cache_clear = cache_clear;
    function cache_toMap() {
      var out = {};
      for (var x in _cache) {
        (0, obj_1.obj_extend)(out, _cache[x]);
      }
      return out;
    }
    exports.cache_toMap = cache_toMap;
    function ensure(endpoint) {
      endpoint = (0, types_1.type_getModuleType)(endpoint);
      var hash = _cache[endpoint];
      if (null == hash) {
        hash = _cache[endpoint] = {};
      }
      return hash;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_cache === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_cache) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_cache, module.exports);
    } else {
      _ref_mask_src_feature_modules_cache = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_tools_dependencies;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_tools_dependencies ? _ref_mask_src_feature_modules_tools_dependencies : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.tools_getDependencies = void 0;
    var obj_1 = _ref_utils_src_obj;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var exports_1 = _ref_mask_src_parser_exports;
    var path_1 = _ref_mask_src_util_path;
    var TreeWalker_1 = _ref_mask_src_feature_TreeWalker;
    var loaders_1 = _ref_mask_src_feature_modules_loaders;
    var types_1 = _ref_mask_src_feature_modules_types;
    function tools_getDependencies(template, path, opts_) {
      opts_ = (0, obj_1.obj_extendDefaults)(opts_, defaultOptions);
      var dfr = new Dfr_1.class_Dfr();
      template = 'string' === typeof template ? (0, exports_1.parser_parse)(template) : template;
      return get(template, path, opts_, dfr);
    }
    exports.tools_getDependencies = tools_getDependencies;
    var defaultOptions = {
      deep: true,
      flattern: false
    };
    function get(ast, path, opts, dfr) {
      walk(ast, path, opts, function(error, dep) {
        if (error) {
          return dfr.reject(error);
        }
        if (true === opts.flattern && true === opts.deep) {
          dep = flattern(dep);
        }
        dfr.resolve(dep);
      });
      return dfr;
    }
    function walk(ast, path, opts, done) {
      var location = (0, path_1.path_getDir)(path);
      var dependency = {
        mask: [],
        data: [],
        style: [],
        script: []
      };
      TreeWalker_1.mask_TreeWalker.walkAsync(ast, visit, complete);
      function visit(node, next) {
        if ('import' !== node.tagName) {
          return next();
        }
        var path = resolvePath(node, location);
        node = (0, types_1.type_get)(node);
        if (false === opts.deep) {
          dependency[node].push(path);
          return next();
        }
        if ('mask' === node) {
          getMask(path, opts, function(error, dep) {
            if (error) {
              return done(error);
            }
            dependency.mask.push(dep);
            next();
          });
          return;
        }
        dependency[node].push(path);
        next();
      }
      function complete() {
        done(null, dependency);
      }
    }
    function getMask(path, opts, done) {
      var dep = {
        path: path,
        dependencies: null
      };
      (0, loaders_1._file_get)(path).done(function(template) {
        walk((0, exports_1.parser_parse)(template), path, opts, function(error, deps) {
          if (error) {
            done(error);
            return;
          }
          dep.dependencies = deps;
          done(null, dep);
        });
      }).fail(done);
    }
    function resolvePath(node, location) {
      var path = node.path, node = node.contentType;
      if ((null == node || 'mask' === node) && '' === (0, path_1.path_getExtension)(path)) {
        path += '.mask';
      }
      if ((0, path_1.path_isRelative)(path)) {
        path = (0, path_1.path_combine)(location, path);
      }
      return (0, path_1.path_normalize)(path);
    }
    var flattern;
    (function() {
      flattern = function(deps) {
        return {
          mask: resolve(deps, 'mask'),
          data: resolve(deps, 'data'),
          style: resolve(deps, 'style'),
          script: resolve(deps, 'script')
        };
      };
      function resolve(deps, type) {
        return distinct(get(deps, type, []));
      }
      function get(deps, type, stack) {
        if (null == deps) {
          return stack;
        }
        var x, arr = deps[type], imax = arr.length, i = -1;
        while (++i < imax) {
          x = arr[i];
          if ('string' === typeof x) {
            stack.unshift(x);
            continue;
          }
          // assume is an object { path, dependencies[] }
          stack.unshift(x.path);
          get(x.dependencies, type, stack);
        }
        if ('mask' !== type) {
          deps.mask.forEach(function(x) {
            get(x.dependencies, type, stack);
          });
        }
        return stack;
      }
      function distinct(stack) {
        for (var i = 0; i < stack.length; i++) {
          for (var j = i + 1; j < stack.length; j++) {
            if (stack[i] === stack[j]) {
              stack.splice(j, 1);
              j--;
            }
          }
        }
        return stack;
      }
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_tools_dependencies === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_tools_dependencies) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_tools_dependencies, module.exports);
    } else {
      _ref_mask_src_feature_modules_tools_dependencies = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_tools_build;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_tools_build ? _ref_mask_src_feature_modules_tools_build : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.tools_build = void 0;
    var obj_1 = _ref_utils_src_obj;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var dependencies_1 = _ref_mask_src_feature_modules_tools_dependencies;
    var loaders_1 = _ref_mask_src_feature_modules_loaders;
    var TreeWalker_1 = _ref_mask_src_feature_TreeWalker;
    var exports_1 = _ref_mask_src_parser_exports;
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    var config_1 = _ref_mask_src_api_config;
    function tools_build(template, path, opts_) {
      var opts = (0, obj_1.obj_extendDefaults)(opts_, optionsDefault);
      return Dfr_1.class_Dfr.run(function(resolve, reject) {
        (0, dependencies_1.tools_getDependencies)(template, path, {
          flattern: true
        }).fail(reject).done(function(deps) {
          build(deps, opts, complete, reject);
        });
        function complete(out) {
          out.mask += '\n' + template;
          resolve(out);
        }
      });
    }
    exports.tools_build = tools_build;
    var optionsDefault = {
      minify: false
    };
    function build(deps, opts, resolve, reject) {
      var types = [ 'mask', 'script', 'style', 'data' ];
      var out = {
        mask: '',
        data: '',
        style: '',
        script: ''
      };
      function next() {
        if (0 === types.length) {
          if (out.data) {
            out.script = out.data + '\n' + out.script;
          }
          return resolve(out);
        }
        var type = types.shift();
        build_type(deps, type, opts, function(error, str) {
          if (error) {
            return reject(error);
          }
          out[type] = str;
          next();
        });
      }
      next();
    }
    function build_type(deps, type, opts, done) {
      var arr = deps[type], imax = arr.length, i = -1, stack = [];
      function next() {
        if (++i === imax) {
          done(null, stack.join('\n'));
          return;
        }
        Single[type](arr[i], opts).fail(done).done(function(str) {
          stack.push('/* source ' + arr[i] + ' */');
          stack.push(str);
          next();
        });
      }
      next();
    }
    var Single = {
      mask: function(path, opts, done) {
        return Dfr_1.class_Dfr.run(function(resolve, reject) {
          (0, loaders_1._file_get)(path).fail(reject).done(function(str) {
            // remove all remote styles
            var ast = TreeWalker_1.mask_TreeWalker.walk(str, function(node) {
              if ('link' === node.tagName && node.attr.href) {
                return {
                  remove: true
                };
              }
            });
            ast = (0, jMask_1.jMask)('module').attr('path', path).append(ast);
            str = (0, exports_1.mask_stringify)(ast[0], {
              indent: opts.minify ? 0 : 4
            });
            resolve(str);
          });
        });
      },
      script: function(path, opts) {
        return (config_1.__cfg.buildScript || build_script)(path, opts);
      },
      style: function(path, opts) {
        return (config_1.__cfg.buildStyle || build_style)(path, opts);
      },
      data: function(path, opts) {
        return (config_1.__cfg.buildData || build_data)(path, opts);
      }
    };
    function build_script(path, opts, done) {
      return Dfr_1.class_Dfr.run(function(resolve, reject) {
        (0, loaders_1._file_get)(path).fail(reject).done(function(str) {
          var script = 'var module = { exports: null }\n';
          script += str + ';\n';
          script += 'mask.Module.registerModule(module.exports, new mask.Module.Endpoint("' + path + '", "script"))';
          resolve(script);
        });
      });
    }
    function build_style(path, opts) {
      return (0, loaders_1._file_get)(path);
    }
    function build_data(path, opts, done) {
      return Dfr_1.class_Dfr.run(function(resolve, reject) {
        (0, loaders_1._file_get)(path).fail(reject).done(function(mix) {
          try {
            json = 'string' === typeof mix ? JSON.parse(mix) : mix;
          } catch (error) {
            reject(error);
            return;
          }
          mix = JSON.stringify(json, null, opts.minify ? 4 : void 0);
          var json = 'module = { exports: ' + mix + ' }\nmask.Module.registerModule(module.exports, new mask.Module.Endpoint("' + path + '", "json"))';
          resolve(json);
        });
      });
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_tools_build === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_tools_build) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_tools_build, module.exports);
    } else {
      _ref_mask_src_feature_modules_tools_build = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_Module;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_Module ? _ref_mask_src_feature_modules_Module_Module : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.IModule = void 0;
    var fn_1 = _ref_utils_src_fn;
    var obj_1 = _ref_utils_src_obj;
    var class_1 = _ref_utils_src_class;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var path_1 = _ref_mask_src_util_path;
    var utils_1 = _ref_mask_src_feature_modules_utils;
    exports.IModule = (0, class_1.class_create)(Dfr_1.class_Dfr, {
      type: null,
      path: null,
      location: null,
      exports: null,
      state: 0,
      constructor: function(path, parent) {
        this.path = path;
        this.parent = parent;
        this.exports = {};
        this.location = (0, path_1.path_getDir)(path);
        this.complete_ = this.complete_.bind(this);
      },
      loadModule: function() {
        if (0 !== this.state) {
          return this;
        }
        this.state = 1;
        var self = this;
        if ((0, utils_1.u_isNpmPath)(this.path)) {
          (0, utils_1.u_resolveNpmPath)(this.type, this.path, this.parent.location, function(err, path) {
            if (null != err) {
              self.onLoadError_(err);
              return;
            }
            self.location = (0, path_1.path_getDir)(path);
            self.path = path;
            self.doLoad();
          });
          return this;
        }
        self.doLoad();
        return this;
      },
      doLoad: function() {
        var _this = this;
        this.load_(this.path).then(function(mix) {
          return _this.onLoadSuccess_(mix);
        }, function(err) {
          return _this.onLoadError_(err);
        });
      },
      complete_: function(error, exports) {
        this.exports = exports;
        this.error = error;
        this.state = 4;
        if (error) {
          this.reject(error);
          return;
        }
        this.resolve(this);
      },
      onLoadSuccess_: function(mix) {
        if (null == this.preprocess_) {
          this.complete_(null, mix);
          return;
        }
        this.preprocess_(mix, this.complete_);
      },
      onLoadError_: function(error) {
        if (null == this.preprocessError_) {
          this.complete_(error);
          return;
        }
        this.preprocessError_(error, this.complete_);
      },
      load_: null,
      preprocess_: null,
      preprocessError_: null,
      register: fn_1.fn_doNothing,
      getExport: function(property) {
        var obj = this.exports;
        return '*' !== property ? (0, obj_1.obj_getProperty)(obj, property) : obj;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_Module === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_Module) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_Module, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_Module = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_ModuleTypes;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_ModuleTypes ? _ref_mask_src_feature_modules_Module_ModuleTypes : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.m_Types = void 0;
    exports.m_Types = {};
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_ModuleTypes === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_ModuleTypes) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_ModuleTypes, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_ModuleTypes = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_class_Endpoint;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_class_Endpoint ? _ref_mask_src_feature_modules_class_Endpoint : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Endpoint = void 0;
    var Endpoint = /** @class */ function() {
      function Endpoint(path, contentType, moduleType) {
        this.path = path;
        this.contentType = contentType;
        this.moduleType = moduleType;
      }
      return Endpoint;
    }();
    exports.Endpoint = Endpoint;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_class_Endpoint === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_class_Endpoint) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_class_Endpoint, module.exports);
    } else {
      _ref_mask_src_feature_modules_class_Endpoint = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_utils;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_utils ? _ref_mask_src_feature_modules_Module_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.m_registerModuleType = exports.m_registerModule = exports.m_createModule = void 0;
    var utils_1 = _ref_mask_src_feature_modules_utils;
    var Endpoint_1 = _ref_mask_src_feature_modules_class_Endpoint;
    var cache_1 = _ref_mask_src_feature_modules_cache;
    var class_1 = _ref_utils_src_class;
    var ModuleTypes_1 = _ref_mask_src_feature_modules_Module_ModuleTypes;
    var types_1 = _ref_mask_src_feature_modules_types;
    function create(endpoint, parent) {
      return new (Factory(endpoint))(endpoint.path, parent);
    }
    function Factory(endpoint) {
      var type = (0, types_1.type_getModuleType)(endpoint);
      var Ctor = ModuleTypes_1.m_Types[type];
      if (null == Ctor) {
        throw Error('Import is not supported for type ' + type + ' and the path ' + endpoint.path);
      }
      return Ctor;
    }
    function m_createModule(node, ctx, ctr, parent) {
      ctx = (0, utils_1.u_resolvePathFromImport)(node, ctx, ctr, parent), ctr = new Endpoint_1.Endpoint(ctx, node.contentType, node.moduleType), 
      ctx = (0, cache_1.cache_get)(ctr);
      if (null == ctx) {
        ctx = (0, cache_1.cache_set)(ctr, create(ctr, parent));
      }
      return ctx;
    }
    exports.m_createModule = m_createModule;
    function m_registerModule(mix, endpoint, ctx, ctr, parent) {
      endpoint.path = (0, utils_1.u_resolvePath)(endpoint.path, ctx, ctr, parent);
      ctx = m_createModule(endpoint, ctx, ctr, parent);
      if ((0, types_1.type_isMask)(endpoint)) {
        ctx.onLoadSuccess_(mix);
        return ctx;
      }
      // assume others and is loaded
      ctx.state = 4;
      ctx.exports = mix;
      ctx.resolve(ctx);
      return ctx;
    }
    exports.m_registerModule = m_registerModule;
    function m_registerModuleType(baseModuleType, newType, mix) {
      types_1._typeMappings[newType] = baseModuleType;
      ModuleTypes_1.m_Types[newType] = (0, class_1.class_create)(ModuleTypes_1.m_Types[baseModuleType], mix);
    }
    exports.m_registerModuleType = m_registerModuleType;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_utils, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Import_ImportTypes;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Import_ImportTypes ? _ref_mask_src_feature_modules_Import_ImportTypes : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.i_Types = void 0;
    exports.i_Types = {};
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Import_ImportTypes === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Import_ImportTypes) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Import_ImportTypes, module.exports);
    } else {
      _ref_mask_src_feature_modules_Import_ImportTypes = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Import_Import;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Import_Import ? _ref_mask_src_feature_modules_Import_Import : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.IImport = void 0;
    var class_1 = _ref_utils_src_class;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var obj_1 = _ref_utils_src_obj;
    var exports_1 = _ref_mask_src_custom_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var utils_1 = _ref_mask_src_feature_modules_Module_utils;
    var Opts_1 = _ref_mask_src_feature_modules_Opts;
    exports.IImport = (0, class_1.class_create)({
      type: null,
      constructor: function(endpoint, node, module) {
        this.node = node;
        this.path = endpoint.path;
        this.alias = node.alias;
        this.exports = node.exports;
        this.async = node.async;
        this.contentType = node.contentType;
        this.moduleType = node.moduleType;
        this.module = (0, utils_1.m_createModule)(endpoint, null, null, module);
        this.parent = module;
        this.imports = null;
      },
      eachExport: function(fn) {
        var alias = this.alias;
        if (null != alias) {
          fn.call(this, alias, '*', alias);
          return;
        }
        var exports = this.exports;
        if (null != exports) {
          var imax = exports.length, i = -1;
          while (++i < imax) {
            var x = exports[i];
            fn.call(this, null == x.alias ? x.name : x.alias, x.name, x.alias);
          }
        }
      },
      hasExport: function(name) {
        if (this.alias === name) {
          return true;
        }
        var exports = this.exports;
        if (null != exports) {
          var imax = exports.length, i = -1;
          while (++i < imax) {
            var x = exports[i];
            x = null == x.alias ? x.name : x.alias;
            if (x === name) {
              return true;
            }
          }
        }
        return false;
      },
      getExport: function(name) {
        return this.imports[name];
      },
      getExportedName: function(alias) {
        if (this.alias === alias) {
          return '*';
        }
        var exports = this.exports;
        if (null != exports) {
          var x, imax = exports.length, i = -1;
          while (++i < imax) {
            x = exports[i];
            if ((x.alias || x.name) === alias) {
              return x.name;
            }
          }
        }
        return null;
      },
      loadImport: function(cb) {
        var self = this;
        this.module.loadModule().fail(cb).done(function(module) {
          cb(null, self);
        });
      },
      registerScope: function(ctr) {
        this.imports = {};
        this.eachExport(function(exportName, name, alias) {
          this.registerExport_(ctr, exportName, name, alias);
        });
      },
      registerExport_: function(ctr, exportName, name, alias) {
        var module = this.module;
        alias = alias || name;
        var obj = null;
        if ('async' === this.async && module.isBusy()) {
          var dfr = new Dfr_1.class_Dfr();
          var that = this;
          module.then(function() {
            var val = module.getExport(name);
            if (null == val) {
              that.logError_('Exported property is undefined: ' + name);
            }
            dfr.resolve(val);
          }, function(error) {
            dfr.reject(error);
          });
          obj = dfr;
        } else {
          obj = module.getExport(name);
        }
        if (null == obj) {
          this.logError_('Exported property is undefined: ' + name);
          return;
        }
        if ('*' === name && Opts_1._opts.es6Modules && null != obj.default) {
          var defaultOnly = true;
          for (var key in obj) {
            if ('default' === key || '_' === key[0]) {
              continue;
            }
            defaultOnly = false;
            break;
          }
          if (defaultOnly) {
            (0, reporters_1.warn_withNode)('Default ONLY export is deprecated: `import * as foo from X`. Use `import foo from X`', this.node);
            obj = obj.default;
          }
        }
        if (null == ctr.scope) {
          ctr.scope = {};
        }
        if ('*' === exportName) {
          throw new Error('Obsolete: unexpected exportName');
        }
        this.imports[exportName] = obj;
        (0, obj_1.obj_setProperty)(ctr.scope, alias, obj);
        (0, exports_1.customTag_registerResolver)(alias);
      },
      logError_: function(msg) {
        var str = '\n(Module) ' + (this.parent || {
          path: 'root'
        }).path;
        str += '\n  (Import) ' + this.path;
        str += '\n    ' + msg;
        (0, reporters_1.error_withCompo)(str, this);
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Import_Import === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Import_Import) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Import_Import, module.exports);
    } else {
      _ref_mask_src_feature_modules_Import_Import = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Import_ImportScript;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Import_ImportScript ? _ref_mask_src_feature_modules_Import_ImportScript : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ImportScript = void 0;
    var Import_1 = _ref_mask_src_feature_modules_Import_Import;
    var ImportTypes_1 = _ref_mask_src_feature_modules_Import_ImportTypes;
    var class_1 = _ref_utils_src_class;
    exports.ImportScript = ImportTypes_1.i_Types['script'] = (0, class_1.class_create)(Import_1.IImport, {
      type: 'script',
      contentType: 'script'
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Import_ImportScript === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Import_ImportScript) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Import_ImportScript, module.exports);
    } else {
      _ref_mask_src_feature_modules_Import_ImportScript = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Import_ImportData;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Import_ImportData ? _ref_mask_src_feature_modules_Import_ImportData : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ImportData = void 0;
    var ImportTypes_1 = _ref_mask_src_feature_modules_Import_ImportTypes;
    var class_1 = _ref_utils_src_class;
    var ImportScript_1 = _ref_mask_src_feature_modules_Import_ImportScript;
    exports.ImportData = ImportTypes_1.i_Types['data'] = (0, class_1.class_create)(ImportScript_1.ImportScript, {
      type: 'data',
      contentType: 'json'
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Import_ImportData === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Import_ImportData) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Import_ImportData, module.exports);
    } else {
      _ref_mask_src_feature_modules_Import_ImportData = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Import_ImportMask;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Import_ImportMask ? _ref_mask_src_feature_modules_Import_ImportMask : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ImportMask = void 0;
    var Import_1 = _ref_mask_src_feature_modules_Import_Import;
    var ImportTypes_1 = _ref_mask_src_feature_modules_Import_ImportTypes;
    var class_1 = _ref_utils_src_class;
    exports.ImportMask = ImportTypes_1.i_Types['mask'] = (0, class_1.class_create)(Import_1.IImport, {
      type: 'mask',
      contentType: 'mask',
      getHandler: function(name) {
        var module = this.module;
        if (null == module) {
          return;
        }
        if (null != module.error) {
          if (this.hasExport(name)) {
            this.logError_('Resource for the import `' + name + '` not loaded');
            return this.empty;
          }
          return null;
        }
        name = this.getExportedName(name);
        if (null == name) {
          return null;
        }
        return module.exports[name] || module.queryHandler(name);
      },
      empty: function EmptyCompo() {}
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Import_ImportMask === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Import_ImportMask) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Import_ImportMask, module.exports);
    } else {
      _ref_mask_src_feature_modules_Import_ImportMask = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Import_ImportHtml;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Import_ImportHtml ? _ref_mask_src_feature_modules_Import_ImportHtml : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ImportHtml = void 0;
    var ImportTypes_1 = _ref_mask_src_feature_modules_Import_ImportTypes;
    var class_1 = _ref_utils_src_class;
    var ImportMask_1 = _ref_mask_src_feature_modules_Import_ImportMask;
    exports.ImportHtml = ImportTypes_1.i_Types['html'] = (0, class_1.class_create)(ImportMask_1.ImportMask, {
      type: 'mask',
      contentType: 'html'
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Import_ImportHtml === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Import_ImportHtml) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Import_ImportHtml, module.exports);
    } else {
      _ref_mask_src_feature_modules_Import_ImportHtml = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Import_ImportStyle;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Import_ImportStyle ? _ref_mask_src_feature_modules_Import_ImportStyle : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ImportStyle = void 0;
    var Import_1 = _ref_mask_src_feature_modules_Import_Import;
    var ImportTypes_1 = _ref_mask_src_feature_modules_Import_ImportTypes;
    var class_1 = _ref_utils_src_class;
    var fn_1 = _ref_utils_src_fn;
    exports.ImportStyle = ImportTypes_1.i_Types['style'] = (0, class_1.class_create)(Import_1.IImport, {
      type: 'style',
      contentType: 'css',
      registerScope: fn_1.fn_doNothing
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Import_ImportStyle === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Import_ImportStyle) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Import_ImportStyle, module.exports);
    } else {
      _ref_mask_src_feature_modules_Import_ImportStyle = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Import_ImportText;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Import_ImportText ? _ref_mask_src_feature_modules_Import_ImportText : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ImportText = void 0;
    var ImportTypes_1 = _ref_mask_src_feature_modules_Import_ImportTypes;
    var class_1 = _ref_utils_src_class;
    var ImportScript_1 = _ref_mask_src_feature_modules_Import_ImportScript;
    exports.ImportText = ImportTypes_1.i_Types['text'] = (0, class_1.class_create)(ImportScript_1.ImportScript, {
      type: 'text',
      contentType: 'txt'
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Import_ImportText === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Import_ImportText) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Import_ImportText, module.exports);
    } else {
      _ref_mask_src_feature_modules_Import_ImportText = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Import_utils;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Import_utils ? _ref_mask_src_feature_modules_Import_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.i_createImport = void 0;
    var utils_1 = _ref_mask_src_feature_modules_utils;
    var Endpoint_1 = _ref_mask_src_feature_modules_class_Endpoint;
    var ImportTypes_1 = _ref_mask_src_feature_modules_Import_ImportTypes;
    var types_1 = _ref_mask_src_feature_modules_types;
    function i_createImport(node, ctx, ctr, module) {
      ctx = (0, utils_1.u_resolvePathFromImport)(node, ctx, ctr, module), ctr = new Endpoint_1.Endpoint(ctx, node.contentType, node.moduleType);
      return create(ctr, node, module);
    }
    exports.i_createImport = i_createImport;
    function create(endpoint, node, parent) {
      return new (Factory(endpoint))(endpoint, node, parent);
    }
    function Factory(endpoint) {
      var type = (0, types_1.type_get)(endpoint);
      var Ctor = ImportTypes_1.i_Types[type];
      if (null == Ctor) {
        throw Error('Module is not supported for type ' + type + ' and the path ' + endpoint.path);
      }
      return Ctor;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Import_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Import_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Import_utils, module.exports);
    } else {
      _ref_mask_src_feature_modules_Import_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Import_exports;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Import_exports ? _ref_mask_src_feature_modules_Import_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.i_createImport = void 0;
    _ref_mask_src_feature_modules_Import_ImportData;
    _ref_mask_src_feature_modules_Import_ImportMask;
    _ref_mask_src_feature_modules_Import_ImportHtml;
    _ref_mask_src_feature_modules_Import_ImportScript;
    _ref_mask_src_feature_modules_Import_ImportStyle;
    _ref_mask_src_feature_modules_Import_ImportText;
    var utils_1 = _ref_mask_src_feature_modules_Import_utils;
    Object.defineProperty(exports, 'i_createImport', {
      enumerable: true,
      get: function() {
        return utils_1.i_createImport;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Import_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Import_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Import_exports, module.exports);
    } else {
      _ref_mask_src_feature_modules_Import_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_utils_mask_module;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_utils_mask_module ? _ref_mask_src_feature_modules_utils_mask_module : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.mask_nodesToArray = void 0;
    var exports_1 = _ref_mask_src_dom_exports;
    // Also flattern all `imports` tags
    function mask_nodesToArray(mix) {
      var type = mix.type;
      if (type === exports_1.Dom.NODE && 'imports' === mix.tagName) {
        return mix.nodes;
      }
      if (type !== exports_1.Dom.FRAGMENT && null != type) {
        return [ mix ];
      }
      var arr = mix;
      if (type === exports_1.Dom.FRAGMENT) {
        arr = mix.nodes;
        if (null == arr) {
          return [];
        }
      }
      var x, imax = arr.length, i = -1;
      while (++i < imax) {
        x = arr[i];
        if ('imports' === x.tagName) {
          arr.splice.apply(arr, [ i, 1 ].concat(x.nodes));
          i--;
        }
      }
      return arr;
    }
    exports.mask_nodesToArray = mask_nodesToArray;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_utils_mask_module === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_utils_mask_module) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_utils_mask_module, module.exports);
    } else {
      _ref_mask_src_feature_modules_utils_mask_module = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_ModuleMask;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_ModuleMask ? _ref_mask_src_feature_modules_Module_ModuleMask : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ModuleMask = void 0;
    var class_1 = _ref_utils_src_class;
    var obj_1 = _ref_utils_src_obj;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_src_parser_exports;
    var Define_1 = _ref_mask_src_feature_Define;
    var Module_1 = _ref_mask_src_feature_modules_Module_Module;
    var ModuleTypes_1 = _ref_mask_src_feature_modules_Module_ModuleTypes;
    var loaders_1 = _ref_mask_src_feature_modules_loaders;
    var utils_1 = _ref_mask_src_feature_modules_utils;
    var utils_2 = _ref_mask_src_feature_modules_Module_utils;
    var exports_3 = _ref_mask_src_feature_modules_Import_exports;
    var Endpoint_1 = _ref_mask_src_feature_modules_class_Endpoint;
    var mask_module_1 = _ref_mask_src_feature_modules_utils_mask_module;
    exports.ModuleMask = ModuleTypes_1.m_Types['mask'] = (0, class_1.class_create)(Module_1.IModule, {
      type: 'mask',
      scope: null,
      source: null,
      modules: null,
      exports: null,
      importItems: null,
      load_: loaders_1._file_get,
      loadModule: function() {
        if (0 === this.state) {
          return Module_1.IModule.prototype.loadModule.call(this);
        }
        if (2 === this.state) {
          this.state = 3;
          var self = this;
          self.preprocess_(this.source, function() {
            self.state = 4;
            self.resolve(self);
          });
        }
        return this;
      },
      preprocessError_: function(error, next) {
        var msg = 'Load error: ' + this.path;
        if (error && error.status) {
          msg += '; Status: ' + error.status;
        }
        this.source = (0, reporters_1.reporter_createErrorNode)(msg);
        next.call(this, error);
      },
      preprocess_: function(mix, next) {
        mix = 'string' === typeof mix ? (0, exports_2.parser_parse)(mix, this.path) : mix;
        this.source = mix;
        this.importItems = [];
        this.exports = {
          __nodes__: [],
          __handlers__: {}
        };
        var x, arr = (0, mask_module_1.mask_nodesToArray)(mix), importNodes = [], imax = arr.length, i = -1;
        while (++i < imax) {
          x = arr[i];
          switch (x.tagName) {
           case 'import':
            importNodes.push(x);
            this.importItems.push((0, exports_3.i_createImport)(x, null, null, this));
            break;

           case 'module':
            var path = (0, utils_1.u_resolvePath)(x.attr.path, null, null, this), type = x.attr.contentType, path = new Endpoint_1.Endpoint(path, type);
            (0, utils_2.m_registerModule)(x.nodes, path);
            break;

           case 'define':
           case 'let':
            continue;

           default:
            this.exports.__nodes__.push(x);
            break;
          }
        }
        _loadImports(this, importNodes, function() {
          next.call(this, null, _createExports(arr, null, this));
        });
      },
      getHandler: function(name) {
        return _module_getHandler.call(this, this, name);
      },
      queryHandler: function(selector) {
        if (this.error) {
          return _createHandlerForNodes(this.source, this);
        }
        var nodes = this.exports.__nodes__;
        if ('*' !== selector) {
          nodes = _nodesFilter(nodes, selector);
        }
        return null != nodes && 0 !== nodes.length ? _createHandlerForNodes(nodes, this) : null;
      },
      getExport: function(misc) {
        return this.getHandler(misc) || this.queryHandler(misc);
      }
    });
    function _nodesFilter(nodes, tagName) {
      var x, arr = [], imax = nodes.length, i = -1;
      while (++i < imax) {
        x = nodes[i];
        if (x.tagName === tagName) {
          arr.push(x);
        }
      }
      return arr;
    }
    function _createExports(nodes, model, module) {
      var exports = module.exports, items = module.importItems, getHandler = _module_getHandlerDelegate(module);
      var i = -1, imax = items.length;
      while (++i < imax) {
        var x = items[i];
        if (x.registerScope) {
          x.registerScope(module);
        }
      }
      i = -1, imax = nodes.length;
      while (++i < imax) {
        var node = nodes[i];
        var name = node.tagName;
        if ('define' === name || 'let' === name) {
          var Base = {
            getHandler: _fn_wrap(exports_1.customTag_Compo_getHandler, getHandler),
            getModule: _module_getModuleDelegate(module),
            location: module.location
          };
          Base = Define_1.Define.create(node, model, module, Base);
          var Proto = Base.prototype;
          if (null != Proto.scope || null != module.scope) {
            Proto.scope = (0, obj_1.obj_extend)(Proto.scope, module.scope);
          }
          Proto = node.name;
          if ('define' === name) {
            exports[Proto] = Base;
            (0, exports_1.customTag_register)(Proto, Base);
          }
          if ('let' === name) {
            (0, exports_1.customTag_registerResolver)(Proto);
          }
          exports.__handlers__[Proto] = Base;
        }
      }
      exports['*'] = (0, class_1.class_create)(exports_1.customTag_Base, {
        getHandler: getHandler,
        location: module.location,
        nodes: exports.__nodes__,
        scope: module.scope
      });
      return exports;
    }
    function _createHandlerForNodes(nodes, module) {
      return (0, class_1.class_create)({
        scope: module.scope,
        location: module.location,
        nodes: nodes,
        getHandler: _module_getHandlerDelegate(module)
      });
    }
    function _loadImports(module, importNodes, done) {
      var items = module.importItems, count = items.length, imax = count, i = -1;
      if (0 === count) {
        return done.call(module);
      }
      process();
      //= private
      function awaiter() {
        if (--count > 0) {
          return;
        }
        done.call(module);
      }
      function process() {
        if (i > -1) {
          // resume from sync
          awaiter();
        }
        while (++i < imax) {
          var node = importNodes[i];
          var resumer = awaiter;
          if ('async' === node.async) {
            resumer = null;
          }
          if ('sync' === node.async) {
            resumer = process;
          }
          _loadImport(module, items[i], node, resumer);
          if ('async' === node.async) {
            awaiter();
          }
          if ('sync' === node.async) {
            return;
          }
        }
      }
    }
    function _loadImport(module, import_, node, done) {
      import_.loadImport(function(error) {
        if (error) {
          (0, reporters_1.error_withNode)(error, node);
        }
        done && done();
      });
    }
    function _module_getModuleDelegate(module) {
      return function(name) {
        return module;
      };
    }
    function _module_getHandlerDelegate(module) {
      return function(name) {
        return _module_getHandler.call(this, module, name);
      };
    }
    function _module_getHandler(module, name) {
      if (null != module.error) {
        return;
      }
      // check public exports
      var exports = module.exports;
      var Ctor = exports[name];
      if (null != Ctor) {
        return Ctor;
      }
      // check private components store
      exports = exports.__handlers__;
      if (null != exports && null != (Ctor = exports[name])) {
        return Ctor;
      }
      var x, type, arr = module.importItems, i = arr.length;
      while (--i > -1) {
        x = arr[i];
        type = x.type;
        if ('mask' === type) {
          if (null != (Ctor = x.getHandler(name))) {
            return Ctor;
          }
        } else if (null != (Ctor = x.imports && x.imports[name])) {
          return Ctor;
        }
      }
      return null;
    }
    function _fn_wrap(baseFn, fn) {
      if (null == baseFn) {
        return fn;
      }
      return function() {
        var x = baseFn.apply(this, arguments);
        if (null != x) {
          return x;
        }
        return fn.apply(this, arguments);
      };
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_ModuleMask === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_ModuleMask) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_ModuleMask, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_ModuleMask = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_ModuleScript;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_ModuleScript ? _ref_mask_src_feature_modules_Module_ModuleScript : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ModuleScript = void 0;
    var Module_1 = _ref_mask_src_feature_modules_Module_Module;
    var ModuleTypes_1 = _ref_mask_src_feature_modules_Module_ModuleTypes;
    var class_1 = _ref_utils_src_class;
    var loaders_1 = _ref_mask_src_feature_modules_loaders;
    var reporters_1 = _ref_mask_src_util_reporters;
    var Opts_1 = _ref_mask_src_feature_modules_Opts;
    exports.ModuleScript = ModuleTypes_1.m_Types['script'] = (0, class_1.class_create)(Module_1.IModule, {
      type: 'script',
      load_: loaders_1._file_getScript,
      preprocessError_: function(error, next) {
        (0, reporters_1.log_error)('Resource ' + this.path + ' thrown an Exception: ' + error);
        next(error);
      },
      getExport: function(property) {
        var fn = Module_1.IModule.prototype.getExport;
        property = fn.call(this, property);
        if (null == property && Opts_1._opts.es6Modules) {
          return fn.call(this, 'default');
        }
        return property;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_ModuleScript === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_ModuleScript) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_ModuleScript, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_ModuleScript = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_ModuleData;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_ModuleData ? _ref_mask_src_feature_modules_Module_ModuleData : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ModuleData = void 0;
    var ModuleTypes_1 = _ref_mask_src_feature_modules_Module_ModuleTypes;
    var class_1 = _ref_utils_src_class;
    var ModuleScript_1 = _ref_mask_src_feature_modules_Module_ModuleScript;
    var loaders_1 = _ref_mask_src_feature_modules_loaders;
    exports.ModuleData = ModuleTypes_1.m_Types['data'] = (0, class_1.class_create)(ModuleScript_1.ModuleScript, {
      type: 'data',
      load_: loaders_1._file_getJson
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_ModuleData === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_ModuleData) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_ModuleData, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_ModuleData = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_ModuleHtml;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_ModuleHtml ? _ref_mask_src_feature_modules_Module_ModuleHtml : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ModuleHtml = void 0;
    var class_1 = _ref_utils_src_class;
    var exports_1 = _ref_mask_src_parser_exports;
    var ModuleTypes_1 = _ref_mask_src_feature_modules_Module_ModuleTypes;
    var ModuleMask_1 = _ref_mask_src_feature_modules_Module_ModuleMask;
    exports.ModuleHtml = ModuleTypes_1.m_Types['html'] = (0, class_1.class_create)(ModuleMask_1.ModuleMask, {
      type: 'mask',
      preprocess_: function(mix, next) {
        mix = 'string' === typeof mix ? (0, exports_1.parser_parseHtml)(mix) : mix;
        return ModuleMask_1.ModuleMask.prototype.preprocess_.call(this, mix, next);
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_ModuleHtml === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_ModuleHtml) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_ModuleHtml, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_ModuleHtml = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_ModuleStyle;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_ModuleStyle ? _ref_mask_src_feature_modules_Module_ModuleStyle : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ModuleStyle = void 0;
    var Module_1 = _ref_mask_src_feature_modules_Module_Module;
    var ModuleTypes_1 = _ref_mask_src_feature_modules_Module_ModuleTypes;
    var class_1 = _ref_utils_src_class;
    var loaders_1 = _ref_mask_src_feature_modules_loaders;
    exports.ModuleStyle = ModuleTypes_1.m_Types['style'] = (0, class_1.class_create)(Module_1.IModule, {
      type: 'style',
      load_: loaders_1._file_getStyle
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_ModuleStyle === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_ModuleStyle) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_ModuleStyle, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_ModuleStyle = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_ModuleText;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_ModuleText ? _ref_mask_src_feature_modules_Module_ModuleText : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ModuleText = void 0;
    var ModuleTypes_1 = _ref_mask_src_feature_modules_Module_ModuleTypes;
    var ModuleScript_1 = _ref_mask_src_feature_modules_Module_ModuleScript;
    var class_1 = _ref_utils_src_class;
    var loaders_1 = _ref_mask_src_feature_modules_loaders;
    exports.ModuleText = ModuleTypes_1.m_Types['text'] = (0, class_1.class_create)(ModuleScript_1.ModuleScript, {
      type: 'text',
      load_: loaders_1._file_get,
      getExport: function(property) {
        return this.exports;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_ModuleText === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_ModuleText) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_ModuleText, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_ModuleText = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_register;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_register ? _ref_mask_src_feature_modules_Module_register : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_arch_Module;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var ModuleMask_1 = _ref_mask_src_feature_modules_Module_ModuleMask;
    exports.ModuleMidd.parseMaskContent = function(mix, path) {
      return Dfr_1.class_Dfr.run(function(resolve, reject) {
        new ModuleMask_1.ModuleMask(path || '').preprocess_(mix, function(error, exports) {
          if (error) {
            reject(error);
            return;
          }
          resolve(exports);
        });
      });
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_register === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_register) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_register, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_register = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_Module_exports;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_Module_exports ? _ref_mask_src_feature_modules_Module_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.m_registerModuleType = exports.m_registerModule = exports.m_createModule = void 0;
    _ref_mask_src_feature_modules_Module_ModuleData;
    _ref_mask_src_feature_modules_Module_ModuleMask;
    _ref_mask_src_feature_modules_Module_ModuleHtml;
    _ref_mask_src_feature_modules_Module_ModuleScript;
    _ref_mask_src_feature_modules_Module_ModuleStyle;
    _ref_mask_src_feature_modules_Module_ModuleText;
    _ref_mask_src_feature_modules_Module_register;
    var utils_1 = _ref_mask_src_feature_modules_Module_utils;
    Object.defineProperty(exports, 'm_createModule', {
      enumerable: true,
      get: function() {
        return utils_1.m_createModule;
      }
    });
    Object.defineProperty(exports, 'm_registerModule', {
      enumerable: true,
      get: function() {
        return utils_1.m_registerModule;
      }
    });
    Object.defineProperty(exports, 'm_registerModuleType', {
      enumerable: true,
      get: function() {
        return utils_1.m_registerModuleType;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_Module_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_Module_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_Module_exports, module.exports);
    } else {
      _ref_mask_src_feature_modules_Module_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_config;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_config ? _ref_mask_src_feature_modules_config : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.m_cfg = void 0;
    var Opts_1 = _ref_mask_src_feature_modules_Opts;
    var obj_1 = _ref_utils_src_obj;
    var is_1 = _ref_utils_src_is;
    var utils_1 = _ref_mask_src_feature_modules_utils;
    function m_cfg(mix, val) {
      if (1 === arguments.length) {
        if ((0, is_1.is_String)(mix)) {
          return (0, obj_1.obj_getProperty)(Opts_1._opts, mix);
        }
        if ((0, is_1.is_Object)(mix)) {
          for (var key in mix) {
            (0, utils_1.u_setOption)(Opts_1._opts, key, mix[key]);
          }
        }
        return this;
      }
      (0, utils_1.u_setOption)(Opts_1._opts, mix, val);
      return this;
    }
    exports.m_cfg = m_cfg;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_config === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_config) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_config, module.exports);
    } else {
      _ref_mask_src_feature_modules_config = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_components;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_components ? _ref_mask_src_feature_modules_components : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var class_1 = _ref_utils_src_class;
    var fn_1 = _ref_utils_src_fn;
    var path_1 = _ref_mask_src_util_path;
    var utils_1 = _ref_mask_src_feature_modules_utils;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_3 = _ref_mask_src_parser_exports;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var exports_4 = _ref_mask_projects_mask_compo_src_exports;
    var exports_5 = _ref_mask_src_feature_modules_Import_exports;
    var exports_6 = _ref_mask_src_feature_modules_Module_exports;
    var Endpoint_1 = _ref_mask_src_feature_modules_class_Endpoint;
    var config_1 = _ref_mask_src_feature_modules_config;
    var types_1 = _ref_mask_src_feature_modules_types;
    (function() {
      var IMPORT = 'import';
      var IMPORTS = 'imports';
      exports_1.custom_Tags['module'] = (0, class_1.class_create)({
        constructor: function(node, model, ctx, container, ctr) {
          var path = (0, path_1.path_resolveUrl)(node.attr.path, (0, utils_1.u_resolveLocation)(ctx, ctr));
          var type = node.attr.type;
          path = new Endpoint_1.Endpoint(path, type);
          (0, exports_6.m_registerModule)(node.nodes, path, ctx, ctr);
        },
        render: fn_1.fn_doNothing
      });
      exports_1.custom_Tags['import:base'] = function(node, model, ctx, el, ctr) {
        node = (0, exports_2.expression_eval)(node.expression, model, ctx, ctr);
        (0, config_1.m_cfg)('base', node);
      };
      exports_1.custom_Tags['import:cfg'] = function(node, model, ctx, el, ctr) {
        if (null == node.expression) {
          return;
        }
        node = (0, exports_2.expression_evalStatements)(node.expression, model, ctx, ctr);
        config_1.m_cfg.apply(null, node);
      };
      exports_1.custom_Tags[IMPORT] = (0, class_1.class_create)({
        meta: {
          serializeNodes: true
        },
        constructor: function(node, model, ctx, el, ctr) {
          if (null == node.alias && null == node.exports && (0, types_1.type_isMask)(node)) {
            // embedding
            this.module = (0, exports_6.m_createModule)(node, ctx, ctr);
          }
        },
        renderStart: function(model, ctx) {
          if (null == this.module) {
            return;
          }
          ctx = exports_4.Component.pause(this, ctx);
          var self = this;
          this.module.loadModule().done(function() {
            self.nodes = self.module.exports['__nodes__'];
            self.scope = self.module.scope;
            self.location = self.module.location;
            self.getHandler = self.module.getHandler.bind(self.module);
          }).fail(function(error) {
            (0, reporters_1.error_withCompo)(error, this);
            self.nodes = self.module.source;
          }).always(ctx);
        }
      });
      exports_1.custom_Tags[IMPORTS] = (0, class_1.class_create)({
        importItems: null,
        load_: function(ctx, cb) {
          var arr = this.importItems;
          var self = this;
          var imax = arr.length;
          var await_ = imax;
          var next = cb;
          var i = -1;
          function done(error, import_) {
            if (null == error) {
              if (import_.registerScope) {
                import_.registerScope(self);
              }
              if (null != ctx._modules) {
                ctx._modules.add(import_.module);
              }
            }
            if (0 === --await_ && null != next) {
              next();
            }
          }
          function process(error, import_) {
            if (0 !== arguments.length) {
              done(error, import_);
            }
            while (++i < imax) {
              var x = arr[i];
              if ('async' === x.async && 0 === --await_) {
                next();
                next = null;
              }
              var onReady = 'sync' === x.async ? process : done;
              x.loadImport(onReady);
              if ('sync' === x.async) {
                break;
              }
            }
          }
          process();
        },
        start_: function(model, ctx) {
          var x, resume = exports_4.Component.pause(this, ctx), nodes = this.nodes, imax = nodes.length, i = -1;
          var arr = this.importItems = [];
          while (++i < imax) {
            x = nodes[i];
            if (x.tagName === IMPORT) {
              if (null != x.path && -1 !== x.path.indexOf('~')) {
                var fn = (0, exports_3.parser_ensureTemplateFunction)(x.path);
                if ((0, is_1.is_Function)(fn)) {
                  x.path = fn('attr', model, ctx, null, this);
                }
              }
              arr.push((0, exports_5.i_createImport)(x, ctx, this));
            }
          }
          this.load_(ctx, resume);
        },
        //#if (NODE)
        meta: {
          serializeNodes: true
        },
        serializeNodes: function() {
          var i, x, arr = [];
          if (null == this.importItems || 0 === this.importItems.length) {
            i = this.nodes.length;
            while (--i > -1) {
              x = this.nodes[i];
              if (x.tagName === IMPORT) {
                arr.unshift(x);
              }
            }
          } else {
            i = this.importItems.length;
            while (--i > -1) {
              x = this.importItems[i];
              if (x.module && x.module.stringifyImport) {
                var result = x.module.stringifyImport(x.node);
                if (null != result) {
                  arr.unshift(result);
                }
                continue;
              }
              arr.unshift(x.node);
            }
          }
          return (0, exports_3.mask_stringify)(arr);
        },
        //#endif
        renderStart: function(model, ctx) {
          this.start_(model, ctx);
        },
        renderStartClient: function(model, ctx) {
          this.start_(model, ctx);
        },
        getHandler: function(name) {
          var import_, x, arr = this.importItems, imax = arr.length, i = -1;
          while (++i < imax) {
            import_ = arr[i];
            switch (import_.type) {
             case 'mask':
              x = import_.getHandler(name);
              break;

             case 'script':
              x = import_.getExport(name);
              break;
            }
            if (null != x) {
              return x;
            }
          }
          return null;
        },
        getHandlers: function() {
          var handlers = {};
          var import_, arr = this.importItems, imax = arr.length, i = -1;
          while (++i < imax) {
            import_ = arr[i];
            if ('mask' !== import_) {
              continue;
            }
            import_ = import_.getHandlers();
            (0, obj_1.obj_extend)(handlers, import_);
          }
          return handlers;
        }
      });
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_components === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_components) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_components, module.exports);
    } else {
      _ref_mask_src_feature_modules_components = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_await;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_await ? _ref_mask_src_feature_modules_await : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
      if ('object' === typeof Reflect && 'function' === typeof Reflect.decorate) {
        r = Reflect.decorate(decorators, target, key, desc);
      } else {
        for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) {
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          }
        }
      }
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var is_1 = _ref_utils_src_is;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var coll_1 = _ref_utils_src_coll;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_2 = _ref_mask_src_builder_exports;
    var exports_3 = _ref_mask_src_dom_exports;
    var exports_4 = _ref_mask_src_builder_exports;
    var exports_5 = _ref_mask_projects_expression_src_exports;
    var exports_6 = _ref_mask_src_builder_exports;
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    var exports_7 = _ref_mask_projects_mask_compo_src_exports;
    var exports_8 = _ref_mask_src_renderer_exports;
    var AwaitCtr = /** @class */ function() {
      function AwaitCtr() {
        this.nodes = null;
        this.attr = null;
        this.expression = null;
        this.scope = null;
        this.parent = null;
        this.model = null;
        this.components = null;
        this.progressNodes = null;
        this.progressNodesExpr = null;
        this.completeNodes = null;
        this.completeNodesExpr = null;
        this.errorNodes = null;
        this.errorNodesExpr = null;
        this.keys = null;
        this.strategy = null;
        this.importItems = null;
      }
      AwaitCtr.prototype.domInsert = function() {
        this.strategy.emit('domInsert');
      };
      AwaitCtr.prototype.splitNodes_ = function() {
        var map = {
          '@progress': 'progressNodes',
          '@fail': 'errorNodes',
          '@done': 'completeNodes'
        };
        (0, coll_1.coll_each)(this.nodes, function(node) {
          var name = node.tagName, nodes = node.nodes;
          name = map[name];
          if (null == name) {
            name = 'completeNodes';
            nodes = [ node ];
          }
          if (node.expression) {
            this[name + 'Expr'] = node.expression;
          }
          node = this[name];
          if (null == node) {
            this[name] = nodes;
            return;
          }
          this[name] = Array.prototype.concat.call(node, nodes);
        }, this);
        this.nodes = null;
      };
      AwaitCtr.prototype.prepairKeys_ = function() {
        for (var key in this.attr) {
          var val = this.attr[key];
          if (key !== val) {
            continue;
          }
          if (null == this.keys) {
            this.keys = [];
          }
          this.keys.push(key);
        }
      };
      AwaitCtr.prototype.prepairImports_ = function() {
        var imports = exports_7.Component.closest(this, 'imports');
        if (null != imports) {
          return this.importItems = imports.importItems;
        }
      };
      AwaitCtr.prototype.initStrategy_ = function() {
        var expr = this.expression;
        if (expr && null == this.keys) {
          if (-1 !== expr.indexOf('(') || -1 !== expr.indexOf('.')) {
            this.strategy = new ExpressionStrategy(this);
            return;
          }
          this.strategy = new RefOrImportStrategy(this);
          return;
        }
        if (null != this.keys) {
          if (1 === this.keys.length) {
            this.strategy = new ComponentStrategy(this, this.keys[0], this.expression);
            return;
          }
          if (this.keys.length > 1 && null == expr) {
            this.strategy = new RefOrImportStrategy(this);
            return;
          }
        }
        expr = 'Unsupported await strategy. `(';
        expr += this.expression || '';
        expr += ') ';
        expr += this.keys && this.keys.join(' ') || '';
        throw new Error(expr);
      };
      AwaitCtr.prototype.getModuleFor = function(name) {
        var parent = this.parent;
        var module;
        while (null != parent && null == module) {
          module = parent.getModule && parent.getModule() || parent.importItems && parent || null;
          parent = parent.parent;
        }
        if (null == module || null == module.importItems) {
          (0, reporters_1.log_error)('Module not found for import ' + name);
          return null;
        }
        var import_ = module.importItems.find(function(x) {
          return x.hasExport(name);
        });
        return import_ && import_.module || null;
      };
      AwaitCtr.prototype.await_ = function(model, ctx, container) {
        this.progress_(ctx, container);
        this.strategy.process(model, ctx, container);
        model = (0, exports_2.builder_resumeDelegate)(this, model, ctx, container);
        var self = this;
        this.strategy.done(function() {
          self.complete_();
        }).fail(function(error) {
          self.error_(error);
        }).always(model);
      };
      AwaitCtr.prototype.renderStart = function(model, ctx, container) {
        this.splitNodes_();
        this.prepairKeys_();
        this.prepairImports_();
        this.initStrategy_();
        this.await_(model, ctx, container);
      };
      AwaitCtr.prototype.error_ = function(error) {
        this.nodes = this.errorNodes || (0, reporters_1.reporter_createErrorNode)(error.message);
        this.model = error;
        if (this.errorNodesExpr) {
          this.initScope(this.errorNodesExpr, [ error ]);
        }
      };
      AwaitCtr.prototype.progress_ = function(ctx, container) {
        var nodes = this.progressNodes;
        if (null == nodes) {
          return;
        }
        var hasLiteral = nodes.some(function(x) {
          return x.type === exports_3.Dom.TEXTNODE;
        });
        if (hasLiteral) {
          nodes = (0, jMask_1.jMask)('div').append(nodes);
        }
        hasLiteral = {
          type: exports_3.Dom.COMPONENT,
          nodes: nodes,
          controller: new exports_7.Component(),
          attr: {}
        };
        (0, exports_4.builder_build)(hasLiteral, null, ctx, container, this);
      };
      AwaitCtr.prototype.complete_ = function() {
        var progress = this.progressNodes && this.components && this.components[0];
        if (progress) {
          progress.remove();
        }
        if (null != this.completeNodesExpr) {
          this.initScope(this.completeNodesExpr, this.strategy.getExports());
        }
        this.nodes = this.strategy.getNodes();
      };
      AwaitCtr.prototype.initScope = function(expr, exports) {
        this.scope = {};
        var names = _getNames(expr), i = names.length;
        while (--i > -1) {
          this.scope[names[i]] = exports[i];
        }
      };
      __decorate([ exports_7.Component.deco.slot() ], AwaitCtr.prototype, 'domInsert', null);
      return AwaitCtr;
    }();
    exports.custom_Tags['await'] = AwaitCtr;
    exports = /** @class */ function(_super) {
      __extends(AStrategy, _super);
      function AStrategy(awaiter) {
        var _this = _super.call(this) || this;
        _this.awaiter = awaiter;
        _this.error = null;
        return _this;
      }
      AStrategy.prototype.getNodes_ = function() {
        return this.awaiter.completeNodes;
      };
      AStrategy.prototype.getNodes = function() {
        return this.getNodes_();
      };
      AStrategy.prototype.process = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        throw Error('Not implemented');
      };
      AStrategy.prototype.emit = function(name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
      };
      return AStrategy;
    }(Dfr_1.class_Dfr);
    var ExpressionStrategy = /** @class */ function(_super) {
      __extends(ExpressionStrategy, _super);
      function ExpressionStrategy() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ExpressionStrategy.prototype.process = function() {
        this.awaitable = new AwaitableExpr(this.awaiter.parent, this.awaiter.expression);
        this.awaitable.pipe(this);
      };
      ExpressionStrategy.prototype.getExports = function() {
        return this.awaitable.exports;
      };
      return ExpressionStrategy;
    }(exports);
    var RefOrImportStrategy = /** @class */ function(_super) {
      __extends(RefOrImportStrategy, _super);
      function RefOrImportStrategy() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      RefOrImportStrategy.prototype.process = function() {
        var self = this;
        var refs = this.awaiter.expression ? _getNames(this.awaiter.expression) : this.awaiter.keys;
        refs = refs.map(function(ref) {
          var module = self.awaiter.getModuleFor(ref);
          if (null != module) {
            return new AwaitableModule(module);
          }
          return new AwaitableExpr(self.awaiter.parent, ref);
        });
        var i = refs.length;
        refs.forEach(function(awaiter) {
          awaiter.done(function() {
            if (null == self.error && 0 === --i) {
              self.resolve();
            }
          }).fail(function(error) {
            self.error = error;
            self.reject(error);
          });
        });
        this.awaitables = refs;
      };
      RefOrImportStrategy.prototype.getExports = function() {
        return this.awaitables.reduce(function(aggr, x) {
          return aggr.concat(x.getExports());
        }, []);
      };
      return RefOrImportStrategy;
    }(exports);
    var ComponentStrategy = /** @class */ function(_super) {
      __extends(ComponentStrategy, _super);
      function ComponentStrategy(awaiter, name, expr) {
        awaiter = _super.call(this, awaiter) || this;
        awaiter.name = name;
        awaiter.expr = expr;
        awaiter.isDomInsert = false;
        return awaiter;
      }
      ComponentStrategy.prototype.process = function(model, ctx, container) {
        var module = this.awaiter.getModuleFor(this.name);
        if (null == module) {
          this.render(model, ctx, container);
          return;
        }
        var self = this;
        module.done(function() {
          self.render(model, ctx, container);
        }).fail(this.rejectDelegate());
      };
      ComponentStrategy.prototype.render = function(model, ctx, container) {
        var _this = this;
        var attr = Object.create(this.awaiter.attr);
        attr[this.name] = null;
        this.awaitableRender = new AwaitableRender(this.name, attr, this.expr, this.getNodes_(), model, ctx, container, this.awaiter);
        this.awaitableRender.pipe(this).then(function() {
          if (_this.isDomInsert) {
            exports_7.Component.signal.emitIn(_this.awaiter, 'domInsert');
          }
        });
      };
      ComponentStrategy.prototype.getNodes = function() {
        return null;
      };
      ComponentStrategy.prototype.emit = function(name) {
        if ('domInsert' === name) {
          this.isDomInsert = true;
        }
      };
      return ComponentStrategy;
    }(exports);
    var AwaitableModule = /** @class */ function(_super) {
      __extends(AwaitableModule, _super);
      function AwaitableModule(module) {
        var _this = _super.call(this) || this;
        _this.module = module;
        _this.module.pipe(_this);
        return _this;
      }
      AwaitableModule.prototype.getExports = function() {
        return [ this.module.exports ];
      };
      return AwaitableModule;
    }(Dfr_1.class_Dfr);
    var AwaitableExpr = /** @class */ function(_super) {
      __extends(AwaitableExpr, _super);
      function AwaitableExpr(compo, expression) {
        var _this = _super.call(this) || this;
        _this.error = null;
        _this.exports = [];
        _this.onResolve = _this.onResolve.bind(_this);
        _this.onReject = _this.onReject.bind(_this);
        var arr = (0, exports_5.expression_evalStatements)(expression, compo.model, null, compo);
        var imax = arr.length, i = -1;
        _this.await_ = imax;
        while (++i < imax) {
          var x = arr[i];
          if (null == x || false === (0, is_1.is_Function)(x.then)) {
            _this.await_--;
            _this.exports.push(x);
            continue;
          }
          x.then(_this.onResolve, _this.onReject);
        }
        if (0 === _this.await_) {
          _this.resolve(_this.exports);
        }
        return _this;
      }
      AwaitableExpr.prototype.onResolve = function() {
        if (this.error) {
          return;
        }
        this.exports.push.apply(this.exports, arguments);
        if (0 === --this.await_) {
          this.resolve(this.exports);
        }
      };
      AwaitableExpr.prototype.onReject = function(error) {
        this.error = error || Error('Rejected');
        this.reject(this.error);
      };
      AwaitableExpr.prototype.getExports = function() {
        return this.exports;
      };
      return AwaitableExpr;
    }(Dfr_1.class_Dfr);
    var AwaitableRender = /** @class */ function(_super) {
      __extends(AwaitableRender, _super);
      function AwaitableRender(name, attr, expression, nodes, model, ctx, container, ctr) {
        var _this = _super.call(this) || this;
        _this.onComplete = _this.onComplete.bind(_this);
        _this.anchor = document.createComment('');
        container.appendChild(_this.anchor);
        container = {
          type: exports_3.Dom.NODE,
          tagName: name,
          nodes: nodes,
          expression: expression,
          attr: attr
        };
        (0, exports_8.renderer_renderAsync)(container, model, exports_6.builder_Ctx.clone(ctx), null, ctr).then(_this.onComplete, _this.rejectDelegate());
        return _this;
      }
      AwaitableRender.prototype.onComplete = function(fragment) {
        this.anchor.parentNode.insertBefore(fragment, this.anchor);
        this.resolve();
      };
      return AwaitableRender;
    }(Dfr_1.class_Dfr);
    function _getNames(str) {
      var names = str.split(','), imax = names.length, i = -1, arr = new Array(imax);
      while (++i < imax) {
        arr[i] = names[i].trim();
      }
      return arr;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_await === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_await) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_await, module.exports);
    } else {
      _ref_mask_src_feature_modules_await = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_feature_modules_exports;
  (function() {
    var exports = null != _ref_mask_src_feature_modules_exports ? _ref_mask_src_feature_modules_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Module = void 0;
    var utils_1 = _ref_mask_src_feature_modules_utils;
    var cache_1 = _ref_mask_src_feature_modules_cache;
    var loaders_1 = _ref_mask_src_feature_modules_loaders;
    var dependencies_1 = _ref_mask_src_feature_modules_tools_dependencies;
    var build_1 = _ref_mask_src_feature_modules_tools_build;
    var ModuleMask_1 = _ref_mask_src_feature_modules_Module_ModuleMask;
    var exports_1 = _ref_mask_src_feature_modules_Module_exports;
    var Endpoint_1 = _ref_mask_src_feature_modules_class_Endpoint;
    var Module_1 = _ref_mask_src_feature_modules_Module_Module;
    var exports_2 = _ref_mask_src_feature_modules_Import_exports;
    var config_1 = _ref_mask_src_feature_modules_config;
    _ref_mask_src_feature_modules_Module_exports;
    _ref_mask_src_feature_modules_Import_exports;
    _ref_mask_src_feature_modules_components;
    _ref_mask_src_feature_modules_await;
    var types_1 = _ref_mask_src_feature_modules_types;
    exports.Module = {
      ModuleMask: ModuleMask_1.ModuleMask,
      Endpoint: Endpoint_1.Endpoint,
      createModule: exports_1.m_createModule,
      registerModule: exports_1.m_registerModule,
      registerModuleType: exports_1.m_registerModuleType,
      createImport: exports_2.i_createImport,
      isMask: types_1.type_isMask,
      getType: types_1.type_get,
      getModuleType: types_1.type_getModuleType,
      cfg: config_1.m_cfg,
      resolveLocation: utils_1.u_resolveLocation,
      resolvePath: utils_1.u_resolvePathFromImport,
      getDependencies: dependencies_1.tools_getDependencies,
      build: build_1.tools_build,
      clearCache: cache_1.cache_clear,
      getCache: cache_1.cache_get,
      reload: function(path) {},
      types: Module_1.IModule.types,
      File: {
        get: loaders_1._file_get,
        getScript: loaders_1._file_getScript,
        getStyle: loaders_1._file_getStyle,
        getJson: loaders_1._file_getJson
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_feature_modules_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_feature_modules_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_feature_modules_exports, module.exports);
    } else {
      _ref_mask_src_feature_modules_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_statements_if;
  (function() {
    var exports = null != _ref_mask_src_statements_if ? _ref_mask_src_statements_if : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var exports_1 = _ref_mask_projects_expression_src_exports;
    var exports_2 = _ref_mask_src_custom_exports;
    var exports_3 = _ref_mask_src_builder_exports;
    var compo_1 = _ref_mask_src_util_compo;
    var ObservableIfCtor = null;
    exports_2.custom_Statements['if'] = {
      getNodes: getNodesSync,
      render: function(node, model, ctx, container, ctr, children) {
        var type = (0, exports_1.expression_getType)(node.expression);
        if (type === exports_1.exp_type_Sync) {
          type = getNodesSync(node, model, ctx, ctr);
          if (null != type) {
            (0, exports_3.builder_build)(type, model, ctx, container, ctr, children);
          }
          return;
        }
        type = null !== ObservableIfCtor && void 0 !== ObservableIfCtor ? ObservableIfCtor : ObservableIfCtor = exports_2.custom_Tags['+if'];
        type = new type(node, model, ctx, container, ctr, children);
        (0, compo_1.compo_addChild)(ctr, type);
        type.render();
      }
    };
    function getNodesSync(node, model, ctx, ctr) {
      do {
        var result = (0, exports_1.expression_eval)(node.expression, model, ctx, ctr, node);
        if (result) {
          return node.nodes;
        }
        node = node.nextSibling;
        if (null == node || 'else' !== node.tagName) {
          return null;
        }
        result = node.expression;
        if (null == result || '' === result) {
          return node.nodes;
        }
      } while (true);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_statements_if === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_statements_if) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_statements_if, module.exports);
    } else {
      _ref_mask_src_statements_if = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_statements_for;
  (function() {
    var exports = null != _ref_mask_src_statements_for ? _ref_mask_src_statements_for : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.StatementFor = void 0;
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_src_builder_exports;
    var is_1 = _ref_utils_src_is;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_4 = _ref_mask_src_dom_exports;
    var FOR_OF_ITEM = 'for..of::item';
    var FOR_IN_ITEM = 'for..in::item';
    exports.StatementFor = {
      render: function(node, model, ctx, container, ctr, children) {
        parse_For(node.expression);
        var value = (0, exports_2.expression_eval)(FOR_DIRECTIVE[3], model, ctx, ctr);
        if (null == value) {
          return;
        }
        build(value, FOR_DIRECTIVE, node.nodes, model, ctx, container, ctr, children);
      },
      build: build,
      parseFor: parse_For,
      createForNode: createForItemNode,
      getNodes: getNodes,
      getHandler: function(compoName, model) {
        if (compoName !== FOR_OF_ITEM && compoName !== FOR_IN_ITEM) {
          return null;
        }
        return createForItemHandler(compoName, model);
      }
    };
    exports_1.custom_Statements['for'] = exports.StatementFor;
    (function() {
      exports_1.custom_Tags[FOR_OF_ITEM] = createBootstrapCompo(FOR_OF_ITEM);
      exports_1.custom_Tags[FOR_IN_ITEM] = createBootstrapCompo(FOR_IN_ITEM);
      function createBootstrapCompo(name) {
        function For_Item() {}
        For_Item.prototype = {
          meta: {
            serializeScope: true
          },
          serializeScope: for_proto_serializeScope,
          type: exports_4.Dom.COMPONENT,
          compoName: name,
          renderEnd: handler_proto_renderEnd,
          dispose: handler_proto_dispose
        };
        return For_Item;
      }
    })();
    function build(value, For, nodes, model, ctx, container, ctr, childs) {
      (0, exports_3.builder_build)(getNodes(nodes, value, For[0], For[1], For[2], For[3]), model, ctx, container, ctr, childs);
    }
    function getNodes(nodes, value, prop1, prop2, type, expr) {
      if ('of' === type) {
        if (false === (0, is_1.is_Array)(value)) {
          (0, reporters_1.log_error)('<ForStatement> Value is not enumerable', value);
          return null;
        }
        return loop_Array(nodes, value, prop1, prop2, expr);
      }
      if ('in' === type) {
        if ('object' !== typeof value) {
          (0, reporters_1.log_warn)('<ForStatement> Value is not an object', value);
          return null;
        }
        if ((0, is_1.is_Array)(value)) {
          (0, reporters_1.log_warn)('<ForStatement> Consider to use `for..of` for Arrays');
        }
        return loop_Object(nodes, value, prop1, prop2, expr);
      }
    }
    function loop_Array(template, arr, prop1, prop2, expr) {
      var scope, i = -1, imax = arr.length, nodes = new Array(imax);
      while (++i < imax) {
        scope = {};
        scope[prop1] = arr[i];
        if (prop2) {
          scope[prop2] = i;
        }
        nodes[i] = createForItemNode(FOR_OF_ITEM, template, scope, i, prop1, expr);
      }
      return nodes;
    }
    function loop_Object(template, obj, prop1, prop2, expr) {
      var scope, key, value, nodes = [], i = 0;
      for (key in obj) {
        value = obj[key];
        scope = {};
        scope[prop1] = key;
        if (prop2) {
          scope[prop2] = value;
        }
        nodes[i++] = createForItemNode(FOR_IN_ITEM, template, scope, key, prop2, expr);
      }
      return nodes;
    }
    function createForItemNode(name, nodes, scope, key, propVal, expr) {
      return {
        type: exports_4.Dom.COMPONENT,
        tagName: name,
        nodes: nodes,
        controller: createForItemHandler(name, scope, key, propVal, expr)
      };
    }
    function createForItemHandler(name, scope, key, propVal, expr) {
      return {
        meta: {
          serializeScope: true
        },
        compoName: name,
        scope: scope,
        elements: null,
        propVal: propVal,
        key: key,
        expression: expr,
        renderEnd: handler_proto_renderEnd,
        dispose: handler_proto_dispose,
        serializeScope: for_proto_serializeScope
      };
    }
    function handler_proto_renderEnd(elements) {
      this.elements = elements;
    }
    function handler_proto_dispose() {
      if (this.elements) {
        this.elements.length = 0;
      }
    }
    function for_proto_serializeScope(scope, model) {
      var ctr = this, expr = ctr.expression, key = ctr.key, ctr = ctr.propVal;
      var val = scope[ctr];
      if (null != val && 'object' === typeof val) {
        scope[ctr] = '$ref:(' + expr + ')."' + key + '"';
      }
      return scope;
    }
    var FOR_DIRECTIVE = [ '', '', 'in', '' ];
    var template, index, length;
    function parse_For(expr) {
      // /([\w_$]+)((\s*,\s*([\w_$]+)\s*\))|(\s*\))|(\s+))(of|in)\s+([\w_$\.]+)/
      template = expr;
      length = expr.length;
      index = 0;
      var prop1;
      var prop2;
      var loopType;
      var hasBrackets;
      expr = parser_skipWhitespace();
      if (40 === expr) {
        // (
        hasBrackets = true;
        index++;
        parser_skipWhitespace();
      }
      prop1 = parser_getVarDeclaration();
      expr = parser_skipWhitespace();
      if (44 === expr) {
        //,
        if (true !== hasBrackets) {
          throw_('Parenthese must be used in multiple var declarion');
          return;
        }
        index++;
        parser_skipWhitespace();
        prop2 = parser_getVarDeclaration();
      }
      if (hasBrackets) {
        expr = parser_skipWhitespace();
        if (41 !== expr) {
          throw_('Closing parenthese expected');
          return;
        }
        index++;
      }
      expr = parser_skipWhitespace();
      if (105 === expr && 110 === template.charCodeAt(++index)) {
        // i n
        loopType = 'in';
      }
      if (111 === expr && 102 === template.charCodeAt(++index)) {
        // o f
        loopType = 'of';
      }
      if (null == loopType) {
        throw_('Invalid FOR statement. (in|of) expected');
        return;
      }
      FOR_DIRECTIVE[0] = prop1;
      FOR_DIRECTIVE[1] = prop2;
      FOR_DIRECTIVE[2] = loopType;
      FOR_DIRECTIVE[3] = template.substring(++index);
      return FOR_DIRECTIVE;
    }
    function parser_skipWhitespace() {
      for (;index < length; index++) {
        var c = template.charCodeAt(index);
        if (c < 33) {
          continue;
        }
        return c;
      }
      return -1;
    }
    function parser_getVarDeclaration() {
      var start = index;
      for (;index < length; index++) {
        var c = template.charCodeAt(index);
        if (c > 48 && c < 57) {
          // 0-9
          if (start === index) {
            return throw_('Variable name begins with a digit');
          }
          continue;
        }
        if (36 === c || // $
        95 === c || // _
        c >= 97 && c <= 122 || // a-z
        c >= 65 && c <= 90) {
          continue;
        }
        break;
      }
      if (start === index) {
        throw_('Variable declaration expected');
        return;
      }
      return template.substring(start, index);
    }
    function throw_(message) {
      throw new Error('<ForStatement parser> ' + message + ' `' + template.substring(index, 20) + '`');
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_statements_for === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_statements_for) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_statements_for, module.exports);
    } else {
      _ref_mask_src_statements_for = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_statements_each;
  (function() {
    var exports = null != _ref_mask_src_statements_each ? _ref_mask_src_statements_each : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_src_builder_exports;
    var exports_4 = _ref_mask_src_dom_exports;
    exports.custom_Statements['each'] = {
      render: function(node, model, ctx, container, ctr, children) {
        model = (0, exports_2.expression_eval)(node.expression, model, ctx, ctr);
        if (null == model) {
          return;
        }
        (0, exports_3.builder_build)(getNodes(node, model), model, ctx, container, ctr, children);
      }
    };
    function getNodes(node, array) {
      var imax = array.length, nodes = new Array(imax), template = node.nodes, expression = node.expression, exprPrefix = '.' === expression ? '."' : '(' + node.expression + ')."', i = 0;
      for (;i < imax; i++) {
        nodes[i] = createEachNode(template, array[i], exprPrefix, i);
      }
      return nodes;
    }
    function createEachNode(nodes, model, exprPrefix, i) {
      return {
        type: exports_4.Dom.COMPONENT,
        tagName: 'each::item',
        nodes: nodes,
        controller: createEachItemHandler(model, i, exprPrefix)
      };
    }
    function createEachItemHandler(model, i, exprPrefix) {
      return {
        compoName: 'each::item',
        model: model,
        scope: {
          index: i
        },
        modelRef: exprPrefix + i + '"',
        attr: null,
        meta: null
      };
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_statements_each === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_statements_each) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_statements_each, module.exports);
    } else {
      _ref_mask_src_statements_each = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_statements_with;
  (function() {
    var exports = null != _ref_mask_src_statements_with ? _ref_mask_src_statements_with : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_src_builder_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    exports.custom_Statements['with'] = {
      render: function(node, model, ctx, el, ctr, elements) {
        model = (0, exports_2.expression_eval)(node.expression, model, ctx, ctr);
        if (null == model) {
          (0, reporters_1.warn_withNode)('Value is undefined', node);
        }
        (0, exports_3.builder_build)(node.nodes, model, ctx, el, ctr, elements);
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_statements_with === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_statements_with) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_statements_with, module.exports);
    } else {
      _ref_mask_src_statements_with = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_statements_switch;
  (function() {
    var exports = null != _ref_mask_src_statements_switch ? _ref_mask_src_statements_switch : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_src_builder_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    exports.custom_Statements['switch'] = {
      render: function(node, model, ctx, el, ctr, elements) {
        var value = (0, exports_2.expression_eval)(node.expression, model, ctx, ctr), value = getNodes(value, node.nodes, model, ctx, ctr);
        if (null == value) {
          return;
        }
        (0, exports_3.builder_build)(value, model, ctx, el, ctr, elements);
      },
      getNodes: getNodes
    };
    function getNodes(value, nodes, model, ctx, ctr) {
      if (null == nodes) {
        return null;
      }
      var child, expr, case_, default_, imax = nodes.length, i = -1;
      while (++i < imax) {
        child = nodes[i];
        if ('default' === child.tagName) {
          default_ = child;
          continue;
        }
        if ('case' !== child.tagName) {
          (0, reporters_1.log_warn)('<mask:switch> Case expected', child.tagName);
          continue;
        }
        expr = child.expression;
        if (!expr) {
          (0, reporters_1.log_warn)('<mask:switch:case> Expression expected');
          continue;
        }
        /* jshint eqeqeq: false */
        if ((0, exports_2.expression_eval)(expr, model, ctx, ctr) == value) {
          /* jshint eqeqeq: true */
          case_ = child;
          break;
        }
      }
      if (null == case_) {
        case_ = default_;
      }
      return null != case_ ? case_.nodes : null;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_statements_switch === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_statements_switch) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_statements_switch, module.exports);
    } else {
      _ref_mask_src_statements_switch = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_statements_visible;
  (function() {
    var exports = null != _ref_mask_src_statements_visible ? _ref_mask_src_statements_visible : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_src_builder_exports;
    var arr_1 = _ref_utils_src_arr;
    exports.custom_Statements['visible'] = {
      toggle: toggle,
      render: function(node, model, ctx, container, ctr, children) {
        var els = [];
        (0, exports_3.builder_build)(node.nodes, model, ctx, container, ctr, els);
        (0, arr_1.arr_pushMany)(children, els);
        container = (0, exports_2.expression_eval)(node.expression, model, ctx, ctr);
        toggle(els, container);
      }
    };
    function toggle(els, visible) {
      for (var i = 0; i < els.length; i++) {
        els[i].style.display = visible ? '' : 'none';
      }
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_statements_visible === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_statements_visible) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_statements_visible, module.exports);
    } else {
      _ref_mask_src_statements_visible = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_statements_repeat;
  (function() {
    var exports = null != _ref_mask_src_statements_repeat ? _ref_mask_src_statements_repeat : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_src_builder_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_4 = _ref_mask_src_dom_exports;
    var arr_1 = _ref_utils_src_arr;
    exports.custom_Statements['repeat'] = {
      render: function(node, model, ctx, container, ctr, children) {
        var run = exports_2.expression_eval, str = node.expression, repeat = str.split('..'), start = +run(repeat[0] || '', model, ctx, ctr), end = +run(repeat[1] || '', model, ctx, ctr);
        if (start !== start || end !== end) {
          (0, reporters_1.log_error)('Repeat attribute(from..to) invalid', str);
          return;
        }
        var nodes = node.nodes;
        var arr = [];
        var i = start - 1;
        while (++i < end) {
          arr.push(compo_init('repeat::item', nodes, model, i, container, ctr));
        }
        run = [];
        (0, exports_3.builder_build)(arr, model, ctx, container, ctr, run);
        (0, arr_1.arr_pushMany)(children, run);
      }
    };
    function compo_init(name, nodes, model, index, container, parent) {
      return {
        type: exports_4.Dom.COMPONENT,
        compoName: name,
        attr: {},
        nodes: nodes,
        model: model,
        container: container,
        parent: parent,
        index: index,
        scope: {
          index: index
        }
      };
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_statements_repeat === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_statements_repeat) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_statements_repeat, module.exports);
    } else {
      _ref_mask_src_statements_repeat = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_statements_exports;
  (function() {
    var exports = null != _ref_mask_src_statements_exports ? _ref_mask_src_statements_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    _ref_mask_src_statements_if;
    _ref_mask_src_statements_for;
    _ref_mask_src_statements_each;
    _ref_mask_src_statements_with;
    _ref_mask_src_statements_switch;
    _ref_mask_src_statements_visible;
    _ref_mask_src_statements_repeat;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_statements_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_statements_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_statements_exports, module.exports);
    } else {
      _ref_mask_src_statements_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_attributes_xxVisible;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_attributes_xxVisible ? _ref_mask_projects_mask_binding_src_attributes_xxVisible : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_projects_mask_compo_src_exports;
    var exports_4 = _ref_mask_projects_observer_src_exports;
    (0, exports.customAttr_register)('xx-visible', function(node, attrValue, model, ctx, el, ctr) {
      var binder = (0, exports_4.expression_createBinder)(attrValue, model, ctx, ctr, function(value) {
        el.style.display = value ? '' : 'none';
      });
      (0, exports_4.expression_bind)(attrValue, model, ctx, ctr, binder);
      exports_3.Component.attach(ctr, 'dispose', function() {
        (0, exports_4.expression_unbind)(attrValue, model, ctr, binder);
      });
      if ((0, exports_2.expression_eval)(attrValue, model, ctx, ctr, node)) {
        el.style.display = 'none';
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_attributes_xxVisible === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_attributes_xxVisible) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_attributes_xxVisible, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_attributes_xxVisible = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_utils_expression;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_utils_expression ? _ref_mask_projects_mask_binding_src_utils_expression : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.expression_eval_safe = void 0;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    function expression_eval_safe(expr, model, ctx, ctr, node) {
      expr = (0, exports_1.expression_eval)(expr, model, ctx, ctr, node);
      return null == expr ? '' : expr;
    }
    exports.expression_eval_safe = expression_eval_safe;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_utils_expression === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_utils_expression) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_utils_expression, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_utils_expression = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_attributes_xToggle;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_attributes_xToggle ? _ref_mask_projects_mask_binding_src_attributes_xToggle : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var expression_1 = _ref_mask_projects_mask_binding_src_utils_expression;
    var obj_1 = _ref_utils_src_obj;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_projects_mask_compo_src_exports;
    /**
 *    Toggle value with ternary operator on an event.
 *
 *    button x-toggle='click: foo === "bar" ? "zet" : "bar" > 'Toggle'
 */
    (0, exports.customAttr_register)('x-toggle', 'client', function(node, attrValue, model, ctx, el, ctr) {
      var event = attrValue.substring(0, attrValue.indexOf(':')), expression = attrValue.substring(event.length + 1), ref = (0, 
      exports_2.expression_varRefs)(expression);
      if ('string' !== typeof ref) {
        // assume is an array
        ref = ref[0];
      }
      exports_3.Component.Dom.addEventListener(el, event, function() {
        var val = (0, expression_1.expression_eval_safe)(expression, model, ctx, ctr, node);
        (0, obj_1.obj_setProperty)(model, ref, val);
      });
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_attributes_xToggle === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_attributes_xToggle) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_attributes_xToggle, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_attributes_xToggle = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_attributes_xClassToggle;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_attributes_xClassToggle ? _ref_mask_projects_mask_binding_src_attributes_xClassToggle : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_mask_compo_src_exports;
    /**
 *    Toggle Class Name
 *
 *    button x-toggle='click: selected'
 */
    (0, exports.customAttr_register)('x-class-toggle', 'client', function(node, attrVal, model, ctx, element) {
      var event = attrVal.substring(0, attrVal.indexOf(':')), klass = attrVal.substring(event.length + 1).trim();
      exports_2.Component.Dom.addEventListener(element, event, function() {
        (0, exports_2.domLib)(element).toggleClass(klass);
      });
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_attributes_xClassToggle === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_attributes_xClassToggle) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_attributes_xClassToggle, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_attributes_xClassToggle = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_attributes_exports;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_attributes_exports ? _ref_mask_projects_mask_binding_src_attributes_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    _ref_mask_projects_mask_binding_src_attributes_xxVisible;
    _ref_mask_projects_mask_binding_src_attributes_xToggle;
    _ref_mask_projects_mask_binding_src_attributes_xClassToggle;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_attributes_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_attributes_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_attributes_exports, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_attributes_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_handlers_visible;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_handlers_visible ? _ref_mask_projects_mask_binding_src_handlers_visible : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_projects_observer_src_exports;
    /**
 * visible handler. Used to bind directly to display:X/none
 *
 * attr =
 *    check - expression to evaluate
 *    bind - listen for a property change
 */
    function VisibleHandler() {}
    (0, exports.customTag_register)(':visible', VisibleHandler);
    VisibleHandler.prototype = {
      constructor: VisibleHandler,
      refresh: function(model, container) {
        container.style.display = (0, exports_2.expression_eval)(this.attr.check, model) ? '' : 'none';
      },
      renderStart: function(model, cntx, container) {
        this.refresh(model, container);
        if (this.attr.bind) {
          (0, exports_3.obj_addObserver)(model, this.attr.bind, this.refresh.bind(this, model, container));
        }
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_handlers_visible === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_handlers_visible) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_handlers_visible, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_handlers_visible = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_ValidatorProvider;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_ValidatorProvider ? _ref_mask_projects_mask_binding_src_ValidatorProvider : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.registerValidator = exports.Validators = exports.ValidatorProvider = void 0;
    var is_1 = _ref_utils_src_is;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_projects_mask_compo_src_exports;
    var expression_1 = _ref_mask_projects_mask_binding_src_utils_expression;
    var class_INVALID = '-validate__invalid';
    exports.ValidatorProvider = {
      getFnFromModel: fn_fromModelWrapp,
      getFnByName: fn_byName,
      validate: validate,
      validateUi: function(fns, val, ctr, el, oncancel) {
        fns = validate(fns, val, ctr);
        if (null != fns) {
          ui_notifyInvalid(el, fns, oncancel);
          return fns;
        }
        ui_clearInvalid(el);
        return null;
      }
    };
    function validate(fns, val, ctr) {
      if (null == fns) {
        return null;
      }
      var fn, imax = fns.length, i = -1;
      while (++i < imax) {
        fn = fns[i];
        if (null == fn) {
          continue;
        }
        fn = fn(val, ctr);
        if (null != fn) {
          if ((0, is_1.is_String)(fn)) {
            return {
              message: fn,
              actual: val
            };
          }
          if (null == fn.actual) {
            fn.actual = val;
          }
          return fn;
        }
      }
    }
    function fn_fromModel(model, prop) {
      if (false === (0, is_1.is_Object)(model)) {
        return null;
      }
      var Validate = model.Validate;
      if (null != Validate) {
        var fn = null;
        if ((0, is_1.is_Function)(fn = Validate)) {
          return fn;
        }
        if ((0, is_1.is_Function)(fn = Validate[prop])) {
          return fn;
        }
      }
      Validate = prop.indexOf('.');
      if (-1 !== Validate) {
        return fn_fromModel(model[prop.substring(0, Validate)], prop.substring(Validate + 1));
      }
      return null;
    }
    function fn_fromModelWrapp(model, prop) {
      var fn = fn_fromModel(model, prop);
      if (null == fn) {
        return null;
      }
      return function() {
        var mix = fn.apply(model, arguments);
        if (null == mix) {
          return null;
        }
        if ((0, is_1.is_String)(mix)) {
          return {
            message: mix,
            property: prop,
            ctx: model
          };
        }
        mix.property = prop;
        mix.ctx = model;
        return mix;
      };
    }
    function fn_byName(name, param, message) {
      var Delegate = exports.Validators[name];
      if (null == Delegate) {
        (0, reporters_1.log_error)('Invalid validator', name, 'Supports:', Object.keys(exports.Validators));
        return null;
      }
      var fn = Delegate(param);
      return function(val, ctr) {
        val = fn(val, ctr);
        if (null == val || true === val) {
          return null;
        }
        if (false === val) {
          return message || 'Check failed: `' + name + '`';
        }
        if ((0, is_1.is_String)(val) && 0 !== val.length) {
          return val;
        }
        return null;
      };
    }
    function ui_notifyInvalid(el, error, oncancel) {
      error = error.message || error;
      var next = (0, exports_1.domLib)(el).next('.' + class_INVALID);
      if (0 === next.length) {
        next = (0, exports_1.domLib)('<div>').addClass(class_INVALID).html('<span></span><button>&otimes;</button>').insertAfter(el);
      }
      return next.children('button').off().on('click', function() {
        next.hide();
        oncancel && oncancel();
      }).end().children('span').text(error).end().show();
    }
    function ui_clearInvalid(el) {
      return (0, exports_1.domLib)(el).next('.' + class_INVALID).hide();
    }
    exports.Validators = {
      match: function(match) {
        return function(str) {
          return new RegExp(match).test(str);
        };
      },
      unmatch: function(unmatch) {
        return function(str) {
          return !new RegExp(unmatch).test(str);
        };
      },
      minLength: function(min) {
        return function(str) {
          return str.length >= parseInt(min, 10);
        };
      },
      maxLength: function(max) {
        return function(str) {
          return str.length <= parseInt(max, 10);
        };
      },
      check: function(condition, node) {
        return function(str) {
          return (0, expression_1.expression_eval_safe)('x' + condition, node.model, {
            x: str
          }, node);
        };
      }
    };
    function registerValidator(type, fn) {
      exports.Validators[type] = fn;
    }
    exports.registerValidator = registerValidator;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_ValidatorProvider === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_ValidatorProvider) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_ValidatorProvider, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_ValidatorProvider = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_handlers_validate;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_handlers_validate ? _ref_mask_projects_mask_binding_src_handlers_validate : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ValidationCompo = void 0;
    var class_1 = _ref_utils_src_class;
    var ValidatorProvider_1 = _ref_mask_projects_mask_binding_src_ValidatorProvider;
    var obj_1 = _ref_utils_src_obj;
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_mask_compo_src_exports;
    var reporters_1 = _ref_mask_src_util_reporters;
    var class_INVALID = '-validate-invalid';
    exports.ValidationCompo = (0, class_1.class_create)({
      attr: null,
      element: null,
      validators: null,
      constructor: function() {
        this.validators = [];
      },
      renderStart: function(model, ctx, container) {
        this.element = container;
        container = this.attr.value;
        if (container) {
          model = ValidatorProvider_1.ValidatorProvider.getFnFromModel(model, container);
          if (null != model) {
            this.validators.push(model);
          }
        }
      },
      /**
     * @param input - {control specific} - value to validate
     * @param element - {HTMLElement} - (optional, @default this.element) -
     *                Invalid message is schown(inserted into DOM) after this element
     * @param oncancel - {Function} - Callback function for canceling
     *                invalid notification
     */
      validate: function(val, el, oncancel) {
        el = null == el ? this.element : el;
        if (0 === arguments.length) {
          val = (0, obj_1.obj_getProperty)(this.model, this.attr.value);
        }
        if (0 === this.validators.length) {
          this.initValidators();
        }
        var fns = this.validators, type = this.attr.silent ? 'validate' : 'validateUi';
        return ValidatorProvider_1.ValidatorProvider[type](fns, val, this, el, oncancel);
      },
      initValidators: function() {
        var attr = this.attr, message = this.attr.message, isDefault = null == message;
        if (isDefault) {
          message = 'Invalid value of `' + this.attr.value + '`';
        }
        for (var key in attr) {
          switch (key) {
           case 'message':
           case 'value':
           case 'getter':
           case 'silent':
            continue;
          }
          if (key in ValidatorProvider_1.Validators === false) {
            (0, reporters_1.log_error)('Unknown Validator:', key, this);
            continue;
          }
          var str = isDefault ? message + ' Validation: `' + key + '`' : message;
          key = ValidatorProvider_1.ValidatorProvider.getFnByName(key, attr[key], str);
          if (null != key) {
            this.validators.push(key);
          }
        }
      }
    });
    (0, exports_1.customTag_register)(':validate', exports.ValidationCompo);
    (0, exports_1.customTag_register)(':validate:message', exports_2.Component.create({
      template: 'div.' + class_INVALID + ' { span > "~[bind:message]" button > "~[cancel]" }',
      onRenderStart: function(model) {
        if ('string' === typeof model) {
          model = {
            message: model
          };
        }
        if (!model.cancel) {
          model.cancel = 'cancel';
        }
        this.model = model;
      },
      compos: {
        button: '$: button'
      },
      show: function(message, oncancel) {
        var that = this;
        this.model.message = message;
        this.compos.button.off().on(function() {
          that.hide();
          oncancel && oncancel();
        });
        this.$.show();
      },
      hide: function() {
        this.$.hide();
      }
    }));
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_handlers_validate === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_handlers_validate) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_handlers_validate, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_handlers_validate = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_handlers_validate_group;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_handlers_validate_group ? _ref_mask_projects_mask_binding_src_handlers_validate_group : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    function ValidateGroup() {}
    (0, exports.customTag_register)(':validate:group', ValidateGroup);
    ValidateGroup.prototype = {
      constructor: ValidateGroup,
      validate: function() {
        var validations = getValidations(this);
        for (var x, i = 0, length = validations.length; i < length; i++) {
          x = validations[i];
          if (!x.validate()) {
            return false;
          }
        }
        return true;
      }
    };
    function getValidations(component, out) {
      if (void 0 === out) {
        out = [];
      }
      if (null == component.components) {
        return out;
      }
      var compos = component.components;
      for (var x, i = 0, length = compos.length; i < length; i++) {
        x = compos[i];
        if ('validate' === x.compoName) {
          out.push(x);
          continue;
        }
        getValidations(x, out);
      }
      return out;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_handlers_validate_group === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_handlers_validate_group) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_handlers_validate_group, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_handlers_validate_group = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_utils_date;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_utils_date ? _ref_mask_projects_mask_binding_src_utils_date : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.date_ensure = void 0;
    function date_ensure(val) {
      if (null == val || '' === val) {
        return null;
      }
      var date = val;
      var type = typeof val;
      if ('string' === type) {
        date = new Date(val);
        if (rgx_es5Date.test(date) && -1 === val.indexOf('Z')) {
          // adjust to local time (http://es5.github.io/x15.9.html#x15.9.1.15)
          val.setMinutes(val.getTimezoneOffset());
        }
      }
      if ('number' === type) {
        date = new Date(val);
      }
      return false === isNaN(date) && 'function' === typeof date.getFullYear ? date : null;
    }
    exports.date_ensure = date_ensure;
    var rgx_es5Date = /^\d{4}\-\d{2}/;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_utils_date === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_utils_date) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_utils_date, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_utils_date = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_DomObjectTransport;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_DomObjectTransport ? _ref_mask_projects_mask_binding_src_DomObjectTransport : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.DomObjectTransport = void 0;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    var exports_2 = _ref_mask_projects_observer_src_exports;
    var obj_1 = _ref_utils_src_obj;
    var date_1 = _ref_mask_projects_mask_binding_src_utils_date;
    var reporters_1 = _ref_mask_src_util_reporters;
    var coll_1 = _ref_utils_src_coll;
    var is_1 = _ref_utils_src_is;
    var objectWay = {
      get: function(provider, expression) {
        var getter = provider.objGetter;
        if (null == getter) {
          return (0, exports_1.expression_eval)(expression, provider.model, provider.ctx, provider.ctr);
        }
        var ctr = provider.ctr.parent, model = provider.model;
        return (0, exports_2.expression_callFn)(getter, provider.model, provider.ctx, ctr, [ expression, model, ctr ]);
      },
      set: function(obj, property, value, provider) {
        var setter = provider.objSetter;
        if (null == setter) {
          (0, obj_1.obj_setProperty)(obj, property, value);
          return;
        }
        var obj = provider.ctr.parent, model = provider.model;
        return (0, exports_2.expression_callFn)(setter, provider.model, provider.ctx, obj, [ value, property, model, obj ]);
      }
    };
    var domWay = {
      get: function(provider) {
        var getter = provider.domGetter;
        if (null == getter) {
          return (0, obj_1.obj_getProperty)(provider, provider.property);
        }
        var ctr = provider.ctr.parent;
        if (false === isValidFn_(ctr, getter, 'Getter')) {
          return null;
        }
        return ctr[getter](provider.element);
      },
      set: function(provider, value) {
        var setter = provider.domSetter;
        if (null == setter) {
          (0, obj_1.obj_setProperty)(provider, provider.property, value);
          return;
        }
        var ctr = provider.ctr.parent;
        if (false === isValidFn_(ctr, setter, 'Setter')) {
          return;
        }
        ctr[setter](value, provider.element);
      }
    };
    var DateTimeDelegate = {
      domSet: function(format) {
        return function(prov, val) {
          val = (0, date_1.date_ensure)(val);
          prov.element.value = null == val ? '' : format(val);
        };
      },
      objSet: function(extend) {
        return function(obj, prop, val) {
          val = (0, date_1.date_ensure)(val);
          if (null == val) {
            return;
          }
          var target = (0, obj_1.obj_getProperty)(obj, prop);
          if (null == target) {
            (0, obj_1.obj_setProperty)(obj, prop, val);
            return;
          }
          if (null == target.getFullYear || isNaN(target)) {
            target = (0, date_1.date_ensure)(target) || val;
            extend(target, val);
            (0, obj_1.obj_setProperty)(obj, prop, target);
            return;
          }
          extend(target, val);
        };
      }
    };
    exports.DomObjectTransport = {
      // generic
      objectWay: objectWay,
      domWay: domWay,
      domModelWay: {
        get: function(provider) {
          return (0, obj_1.obj_getProperty)(provider.owner, provider.property);
        },
        set: function(provider, val) {
          (0, obj_1.obj_setProperty)(provider.owner, provider.property, val);
        }
      },
      SELECT: {
        get: function(provider) {
          var provider = provider.element, i = provider.selectedIndex;
          if (-1 === i) {
            return '';
          }
          provider = provider.options[i], i = provider.getAttribute('value');
          return null == i ? provider.getAttribute('name') /* obsolete */ : i;
        },
        set: function(provider, val) {
          var opt, x, i, el = provider.element, options = el.options, imax = options.length;
          for (i = 0; i < imax; i++) {
            opt = options[i];
            x = opt.getAttribute('value');
            if (null == x) {
              x = opt.getAttribute('name');
              /* jshint eqeqeq: false */
            }
            if (x == val) {
              /* jshint eqeqeq: true */
              el.selectedIndex = i;
              return;
            }
          }
          (0, reporters_1.log_warn)('Value is not an option', val);
        }
      },
      SELECT_MULT: {
        get: function(provider) {
          return (0, coll_1.coll_map)(provider.element.selectedOptions, function(x) {
            return x.value;
          });
        },
        set: function(provider, mix) {
          (0, coll_1.coll_each)(provider.element.options, function(el) {
            el.selected = false;
          });
          if (null == mix) {
            return;
          }
          mix = (0, is_1.is_ArrayLike)(mix) ? mix : [ mix ];
          (0, coll_1.coll_each)(mix, function(val) {
            var els = provider.element.options, imax = els.length, i = -1;
            while (++i < imax) {
              /* jshint eqeqeq: false */
              if (els[i].value == val) {
                /* jshint eqeqeq: true */
                els[i].selected = true;
              }
            }
            (0, reporters_1.log_warn)('Value is not an option', val);
          });
        }
      },
      DATE: {
        domWay: {
          get: domWay.get,
          set: function(prov, val) {
            val = (0, date_1.date_ensure)(val);
            prov.element.value = null == val ? '' : formatDate(val);
          }
        },
        objectWay: {
          get: objectWay.get,
          set: DateTimeDelegate.objSet(function(a, b) {
            var offset = b.getTimezoneOffset();
            a.setFullYear(b.getFullYear());
            a.setMonth(b.getMonth());
            a.setDate(b.getDate());
            b = offset - a.getTimezoneOffset();
            if (0 !== b) {
              offset = b / 60 | 0;
              a.setHours(a.getHours() + offset);
            }
          })
        }
      },
      TIME: {
        domWay: {
          get: domWay.get,
          set: DateTimeDelegate.domSet(formatTime)
        },
        objectWay: {
          get: objectWay.get,
          set: DateTimeDelegate.objSet(function(a, b) {
            a.setHours(b.getHours());
            a.setMinutes(b.getMinutes());
            a.setSeconds(b.getSeconds());
          })
        }
      },
      MONTH: {
        domWay: {
          get: domWay.get,
          set: DateTimeDelegate.domSet(formatMonth)
        },
        objectWay: {
          get: objectWay.get,
          set: DateTimeDelegate.objSet(function(a, b) {
            a.setFullYear(b.getFullYear());
            a.setMonth(b.getMonth());
          })
        }
      },
      RADIO: {
        domWay: {
          get: function(provider) {
            provider = provider.element;
            return provider.checked ? provider.value : null;
          },
          set: function(provider, value) {
            provider = provider.element;
            provider.checked = provider.value === value;
          }
        }
      }
    };
    function isValidFn_(obj, prop, name) {
      if (null == obj || 'function' !== typeof obj[prop]) {
        (0, reporters_1.log_error)('BindingProvider. Controllers accessor.', name, 'should be a function. Property:', prop);
        return false;
      }
      return true;
    }
    function formatDate(date) {
      var YYYY = date.getFullYear(), MM = date.getMonth() + 1, date = date.getDate();
      return (YYYY + '').padStart(4, '0') + '-' + (MM < 10 ? '0' : '') + MM + '-' + (date < 10 ? '0' : '') + date;
    }
    function formatTime(date) {
      var H = date.getHours(), date = date.getMinutes();
      return H + ':' + (date < 10 ? '0' : '') + date;
    }
    function formatMonth(date) {
      var YYYY = date.getFullYear(), date = date.getMonth() + 1;
      return YYYY + '-' + (date < 10 ? '0' : '') + date;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_DomObjectTransport === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_DomObjectTransport) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_DomObjectTransport, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_DomObjectTransport = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_utils_signal;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_utils_signal ? _ref_mask_projects_mask_binding_src_utils_signal : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.signal_create = exports.signal_parse = void 0;
    var reporters_1 = _ref_mask_src_util_reporters;
    function signal_parse(str, isPiped, defaultType) {
      var type, x, signals = str.split(';'), set = [], i = 0, imax = signals.length;
      for (;i < imax; i++) {
        x = signals[i].split(':');
        if (1 !== x.length && 2 !== x.length) {
          (0, reporters_1.log_error)('Too much ":" in a signal def.', signals[i]);
          continue;
        }
        type = 2 === x.length ? x[0] : defaultType;
        x = x[2 === x.length ? 1 : 0];
        x = signal_create(x.trim(), type, isPiped);
        if (null != x) {
          set.push(x);
        }
      }
      return set;
    }
    exports.signal_parse = signal_parse;
    function signal_create(signal, type, isPiped) {
      if (true !== isPiped) {
        return {
          signal: signal,
          type: type
        };
      }
      isPiped = signal.indexOf('.');
      if (-1 === isPiped) {
        (0, reporters_1.log_error)('No pipe name in a signal', signal);
        return null;
      }
      return {
        signal: signal.substring(isPiped + 1),
        pipe: signal.substring(0, isPiped),
        type: type
      };
    }
    exports.signal_create = signal_create;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_utils_signal === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_utils_signal) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_utils_signal, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_utils_signal = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_BindingProvider;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_BindingProvider ? _ref_mask_projects_mask_binding_src_BindingProvider : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.BindingProvider = exports.CustomProviders = void 0;
    var DomObjectTransport_1 = _ref_mask_projects_mask_binding_src_DomObjectTransport;
    var signal_1 = _ref_mask_projects_mask_binding_src_utils_signal;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_projects_observer_src_exports;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var ValidatorProvider_1 = _ref_mask_projects_mask_binding_src_ValidatorProvider;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var exports_3 = _ref_mask_projects_mask_compo_src_exports;
    var expr_1 = _ref_mask_projects_observer_src_utils_expr;
    exports.CustomProviders = {};
    var A_dom_slot = 'dom-slot';
    var A_property = 'property';
    var A_change_event = 'change-event';
    var BindingProvider = /** @class */ function() {
      function BindingProvider(model, element, ctr, bindingType) {
        this.model = model;
        this.element = element;
        this.ctr = ctr;
        this.validations = null;
        this.ctx = null;
        this.dismiss = 0;
        this.log = false;
        this.locked = false;
        this.domSupportsDefault = true;
        this.domWay = DomObjectTransport_1.DomObjectTransport.domWay;
        this.objectWay = DomObjectTransport_1.DomObjectTransport.objectWay;
        if (null == bindingType) {
          bindingType = 'dual';
          model = ctr.compoName;
          if (':bind' === model || 'bind' === model) {
            bindingType = 'single';
          }
        }
        var attr = ctr.attr;
        this.owner = ctr.parent;
        this.bindingType = bindingType;
        this.value = attr.value;
        this.property = attr[A_property];
        this.domSetter = attr['dom-setter'] || attr.setter;
        this.domGetter = attr['dom-getter'] || attr.getter;
        this.objSetter = attr['obj-setter'];
        this.objGetter = attr['obj-getter'];
        this.mapToObj = attr['map-to-obj'];
        this.mapToDom = attr['map-to-dom'];
        this.changeEvent = attr[A_change_event] || 'change';
        model = ctr.node.parent.tagName === this.owner.compoName;
        var domDefaultKey = 'dom-supports-default';
        var defs = attr[domDefaultKey];
        this.domSupportsDefault = null != defs ? defs === domDefaultKey ? true : (0, 
        exports_2.expression_eval)(defs) : model ? false : true;
        /* Convert to an instance, e.g. Number, on domchange event */
        this.typeOf = attr['typeof'] || null;
        switch (true) {
         case A_dom_slot in attr:
          this.domListenerType = 'signal';
          break;

         case A_change_event in attr:
          this.domListenerType = 'event';
          break;

         case model && A_property in attr:
          this.domListenerType = 'observe';
          break;
        }
        if (model) {
          if ('observe' === this.domListenerType) {
            this.domWay = DomObjectTransport_1.DomObjectTransport.domModelWay;
          } else {
            domDefaultKey = 1 === element.nodeType && ('INPUT' === element.tagName || 'TEXTAREA' === element.tagName);
            if (false === domDefaultKey) {
              if (null == this.domSetter) {
                this.domSetter = 'setValue';
              }
              if (null == this.domGetter) {
                this.domGetter = 'getValue';
              }
              if (null == attr[A_dom_slot]) {
                attr[A_dom_slot] = 'input';
              }
              this.domListenerType = 'signal';
            }
          }
        }
        if (null == this.domListenerType) {
          this.domListenerType = 'event';
        }
        if (null == this.property && null == this.domGetter) {
          switch (element.tagName) {
           case 'INPUT':
            // Do not use .type accessor, as some browsers do not support e.g. date
            var type = element.getAttribute('type');
            if ('checkbox' === type) {
              this.property = 'element.checked';
              break;
            }
            if ('radio' === type) {
              this.domWay = DomObjectTransport_1.DomObjectTransport.RADIO.domWay;
              break;
            }
            if ('date' === type || 'time' === type || 'month' === type) {
              var x = DomObjectTransport_1.DomObjectTransport[type.toUpperCase()];
              this.domWay = x.domWay;
              this.objectWay = x.objectWay;
            } else if ('number' === type) {
              this['typeOf'] = 'Number';
            }
            this.changeEvent = attr[A_change_event] || 'change,input';
            this.property = 'element.value';
            break;

           case 'TEXTAREA':
            this.property = 'element.value';
            break;

           case 'SELECT':
            this.domWay = element.multiple ? DomObjectTransport_1.DomObjectTransport.SELECT_MULT : DomObjectTransport_1.DomObjectTransport.SELECT;
            break;

           default:
            this.property = 'element.innerHTML';
            break;
          }
        }
        if (attr['log']) {
          this.log = true;
          if ('log' !== attr.log) {
            this.logExpression = attr.log;
          }
        }
        // Send signal on OBJECT or DOM change
        if (attr['x-signal']) {
          var signals = (0, signal_1.signal_parse)(attr['x-signal'], null, 'dom'), i = signals.length;
          while (--i > -1) {
            var signal = signals[i], signalType = signal && signal.type;
            if ('dom' !== signalType && 'object' !== signalType) {
              (0, reporters_1.log_error)('Signal typs is not supported', signal);
              continue;
            }
            this['signal_' + signalType + 'Changed'] = signal.signal;
          }
        }
        // Send PIPED signal on OBJECT or DOM change
        if (attr['x-pipe-signal']) {
          signals = (0, signal_1.signal_parse)(attr['x-pipe-signal'], true, 'dom'), 
          i = signals.length;
          while (--i > -1) {
            signal = signals[i], signalType = signal && signal.type;
            if ('dom' !== signalType && 'object' !== signalType) {
              (0, reporters_1.log_error)('Pipe type is not supported', signal);
              continue;
            }
            this['pipe_' + signalType + 'Changed'] = signal;
          }
        }
        defs = attr[A_dom_slot];
        if (null != defs) {
          this.slots = {};
          // @hack - place dualb. provider on the way of a signal
          //
          model = ctr.parent, domDefaultKey = model.parent;
          model.parent = this;
          this.parent = domDefaultKey;
          this.slots[defs] = function(sender, value) {
            this.domChanged(sender, value);
          };
        }
        /*
         *  @obsolete: attr name : 'x-pipe-slot'
         */
        model = attr['object-pipe-slot'] || attr['x-pipe-slot'];
        if (model) {
          domDefaultKey = model, defs = domDefaultKey.indexOf('.'), model = domDefaultKey.substring(0, defs), 
          signal = domDefaultKey.substring(defs + 1);
          this.pipes = {};
          this.pipes[model] = {};
          this.pipes[model][signal] = function() {
            this.objectChanged();
          };
          exports_3.Component.pipe.addController(this);
        }
        domDefaultKey = attr.expression || ctr.expression;
        if (domDefaultKey) {
          this.expression = domDefaultKey;
          if (null == this.value && 'single' !== bindingType) {
            defs = (0, exports_2.expression_varRefs)(this.expression);
            if ('string' === typeof defs) {
              this.value = defs;
            } else {
              (0, reporters_1.log_warn)('Please set value attribute in DualBind Control.');
            }
          }
          return;
        }
        this.expression = this.value;
      }
      BindingProvider.prototype.dispose = function() {
        if (null != this.binder) {
          (0, exports_1.expression_unbind)(this.expression, this.model, this.ctr, this.binder);
        }
        if (null != this.domObserveBinder) {
          (0, exports_1.expression_unbind)(this.property, this.ctr, this.ctr, this.domObserveBinder);
        }
      };
      BindingProvider.prototype.objectChanged = function(val) {
        if (this.dismiss-- > 0) {
          return;
        }
        var isConcurrent = true === this.locked;
        if (isConcurrent) {
          (0, reporters_1.log_warn)('Concurrent change detected', this);
          // Set the value to dom anyway, but skip emitting
        }
        this.locked = true;
        if (null == val || null != this.objGetter) {
          val = this.objectWay.get(this, this.expression);
        }
        if (null != this.mapToDom) {
          val = (0, exports_1.expression_callFn)(this.mapToDom, this.model, null, this.ctr, [ val ]);
        }
        this.domWay.set(this, val);
        if (this.log) {
          console.log('[BindingProvider] objectChanged -', val);
        }
        if (false === isConcurrent) {
          isConcurrent = this.signal_objectChanged;
          if (null != isConcurrent) {
            exports_3.Component.signal.emitOut(this.ctr, isConcurrent, this.ctr, [ val ]);
          }
          isConcurrent = this.pipe_objectChanged;
          if (null != isConcurrent) {
            exports_3.Component.pipe(isConcurrent.pipe).emit(isConcurrent.signal);
          }
        }
        this.locked = false;
      };
      BindingProvider.prototype.domChanged = function(event, val) {
        if (true === this.locked) {
          (0, reporters_1.log_warn)('Concurance change detected', this);
          return;
        }
        this.locked = true;
        if (null == val) {
          val = this.domWay.get(this);
        }
        var typeof_ = this['typeOf'];
        if (null != typeof_) {
          switch (typeof_) {
           case 'Number':
           case 'number':
            val = Number(val);
            break;

           case 'Boolean':
           case 'boolean':
            if ('boolean' === typeof val) {
              break;
            }
            if ('string' === typeof val) {
              if ('true' === val || '1' === val || 'yes' === val) {
                val = true;
                break;
              }
              if ('false' === val || '0' === val || 'no' === val) {
                val = false;
                break;
              }
            }
            val = Boolean(val);
            break;

           default:
            var Converter = window[typeof_];
            val = Converter(val);
            break;
          }
        }
        if (null != this.mapToObj) {
          val = (0, exports_1.expression_callFn)(this.mapToObj, this.model, null, this.ctr, [ val ]);
        }
        var error = this.validate(val);
        if (null == error) {
          this.dismiss = 1;
          error = (0, expr_1.expr_getHost)(this.value, this.model, null, this.ctr.parent);
          if (null != error) {
            var obj = error[0], error = error[1];
            this.objectWay.set(obj, error, val, this);
          }
          this.dismiss = 0;
          if (this.log) {
            console.log('[BindingProvider] domChanged -', val);
          }
          if (null != this.signal_domChanged) {
            exports_3.Component.signal.emitOut(this.ctr, this.signal_domChanged, this.ctr, [ val ]);
          }
          if (null != this.pipe_domChanged) {
            obj = this.pipe_domChanged;
            exports_3.Component.pipe(obj.pipe).emit(obj.signal);
          }
        }
        this.locked = false;
      };
      BindingProvider.prototype.addValidation = function(mix) {
        if (null == this.validations) {
          this.validations = [];
        }
        if ((0, is_1.is_Array)(mix)) {
          this.validations = this.validations.concat(mix);
          return;
        }
        this.validations.push(mix);
      };
      BindingProvider.prototype.validate = function(val) {
        var fns = this.validations, ctr = this.ctr, el = this.element;
        if (null == fns || 0 === fns.length) {
          return null;
        }
        val = 0 !== arguments.length ? val : this.domWay.get(this);
        return ValidatorProvider_1.ValidatorProvider.validateUi(fns, val, ctr, el, this.objectChanged.bind(this));
      };
      BindingProvider.create = function(model, el, ctr, bindingType) {
        /* Initialize custom provider */
        var type = ctr.attr.bindingProvider, type = null == type ? null : exports.CustomProviders[type];
        if ('function' === typeof type) {
          return new type(model, el, ctr, bindingType);
        }
        model = new BindingProvider(model, el, ctr, bindingType);
        if (null != type) {
          (0, obj_1.obj_extend)(model, type);
        }
        return model;
      };
      BindingProvider.bind = function(provider) {
        return apply_bind(provider);
      };
      return BindingProvider;
    }();
    exports.BindingProvider = BindingProvider;
    function apply_bind(provider) {
      var expr = provider.expression, model = provider.model, onObjChanged = provider.objectChanged = provider.objectChanged.bind(provider);
      provider.binder = (0, exports_1.expression_createBinder)(expr, model, provider.ctx, provider.ctr, onObjChanged);
      (0, exports_1.expression_bind)(expr, model, provider.ctx, provider.ctr, provider.binder);
      if ('dual' === provider.bindingType) {
        var onDomChange = provider.domChanged.bind(provider);
        switch (provider.domListenerType) {
         case 'event':
          var el = provider.element, event = provider.changeEvent, attachListener = exports_3.Component.Dom.addEventListener;
          if (-1 !== event.indexOf(',')) {
            var arr = event.split(',');
            for (var i = 0; i < arr.length; i++) {
              attachListener(el, arr[i].trim(), onDomChange);
            }
            break;
          }
          attachListener(el, event, onDomChange);
          break;

         case 'observe':
          provider.domObserveBinder = onDomChange;
          (0, exports_1.expression_bind)(provider.property, provider.owner, provider.ctx, null, onDomChange);
          break;
        }
        if (provider.domSupportsDefault && null == provider.objectWay.get(provider, provider.expression)) {
          // object has no value, so check the dom
          setTimeout(function() {
            if (provider.domWay.get(provider)) {
              // and apply when exists
              provider.domChanged();
            }
          });
          return provider;
        }
      }
      // trigger update
      provider.objectChanged();
      return provider;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_BindingProvider === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_BindingProvider) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_BindingProvider, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_BindingProvider = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_handlers_bind_node;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_handlers_bind_node ? _ref_mask_projects_mask_binding_src_handlers_bind_node : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var exports_1 = _ref_mask_src_custom_exports;
    var BindingProvider_1 = _ref_mask_projects_mask_binding_src_BindingProvider;
    (function() {
      function Bind() {}
      (0, exports_1.customTag_register)(':bind', Bind);
      (0, exports_1.customTag_register)('bind', Bind);
      Bind.prototype = {
        constructor: Bind,
        renderStart: function(model, ctx, container) {
          this.provider = BindingProvider_1.BindingProvider.create(model, container, this, 'single');
          this.provider.objectChanged();
        }
      };
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_handlers_bind_node === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_handlers_bind_node) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_handlers_bind_node, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_handlers_bind_node = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_handlers_dualbind_node;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_handlers_dualbind_node ? _ref_mask_projects_mask_binding_src_handlers_dualbind_node : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var BindingProvider_1 = _ref_mask_projects_mask_binding_src_BindingProvider;
    /**
 *    Mask Custom Handler
 *
 *    2 Way Data Model binding
 *
 *
 *    attr =
 *        value: {string} - property path in object
 *        ?property : {default} 'element.value' - value to get/set from/to HTMLElement
 *        ?changeEvent: {default} 'change' - listen to this event for HTMLELement changes
 *
 *        ?setter: {string} - setter function of a parent controller
 *        ?getter: {string} - getter function of a parent controller
 *
 *
 */
    function DualbindHandler() {}
    (0, exports.customTag_register)(':dualbind', DualbindHandler);
    (0, exports.customTag_register)('dualbind', DualbindHandler);
    DualbindHandler.prototype = {
      constructor: DualbindHandler,
      renderStart: function(model, ctx, container) {
        this.provider = BindingProvider_1.BindingProvider.create(model, container, this);
        this.provider.objectChanged();
      },
      dispose: function() {
        var provider = this.provider, dispose = provider && provider.dispose;
        if ('function' === typeof dispose) {
          dispose.call(provider);
        }
      },
      validate: function() {
        return this.provider && this.provider.validate();
      },
      handlers: {
        attr: {
          'x-signal': function() {}
        }
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_handlers_dualbind_node === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_handlers_dualbind_node) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_handlers_dualbind_node, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_handlers_dualbind_node = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_handlers_exports;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_handlers_exports ? _ref_mask_projects_mask_binding_src_handlers_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    _ref_mask_projects_mask_binding_src_handlers_visible;
    _ref_mask_projects_mask_binding_src_handlers_validate;
    _ref_mask_projects_mask_binding_src_handlers_validate_group;
    //#if (NODE)
    _ref_mask_projects_mask_binding_src_handlers_bind_node;
    _ref_mask_projects_mask_binding_src_handlers_dualbind_node;
    //#endif
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_handlers_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_handlers_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_handlers_exports, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_handlers_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_utils;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_utils ? _ref_mask_projects_mask_binding_src_statements_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.els_toggleVisibility = exports._compo_initAndBind = exports._renderPlaceholder = exports._getNodes = void 0;
    var refs_1 = _ref_utils_src_refs;
    var exports_1 = _ref_mask_src_custom_exports;
    var fn_1 = _ref_utils_src_fn;
    var exports_2 = _ref_mask_projects_observer_src_exports;
    var is_1 = _ref_utils_src_is;
    function _getNodes(name, node, model, ctx, controller) {
      return exports_1.custom_Statements[name].getNodes(node, model, ctx, controller);
    }
    exports._getNodes = _getNodes;
    function _renderPlaceholder(staticCompo, compo, container) {
      staticCompo = staticCompo.placeholder;
      if (null == staticCompo) {
        staticCompo = refs_1._document.createComment('');
        container.appendChild(staticCompo);
      }
      compo.placeholder = staticCompo;
    }
    exports._renderPlaceholder = _renderPlaceholder;
    function _compo_initAndBind(compo, node, model, ctx, container, controller) {
      compo.parent = controller;
      compo.model = model;
      compo.ctx = ctx;
      compo.refresh = (0, fn_1.fn_proxy)(compo.refresh, compo);
      compo.binder = (0, exports_2.expression_createBinder)(compo.expr || compo.expression, model, ctx, controller, compo.refresh);
      (0, exports_2.expression_bind)(compo.expr || compo.expression, model, ctx, controller, compo.binder);
    }
    exports._compo_initAndBind = _compo_initAndBind;
    (function() {
      exports.els_toggleVisibility = function(mix, state) {
        if (null == mix) {
          return;
        }
        if ((0, is_1.is_Array)(mix)) {
          _arr(mix, state);
          return;
        }
        _single(mix, state);
      };
      function _single(el, state) {
        el.style.display = state ? '' : 'none';
      }
      function _arr(els, state) {
        var imax = els.length, i = -1;
        while (++i < imax) {
          _single(els[i], state);
        }
      }
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_utils, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_statements_utils;
  (function() {
    var exports = null != _ref_mask_src_statements_utils ? _ref_mask_src_statements_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.el_renderPlaceholder = exports.els_toggleVisibility = void 0;
    var is_1 = _ref_utils_src_is;
    var refs_1 = _ref_utils_src_refs;
    function els_toggleVisibility(mix, state) {
      if (null == mix) {
        return;
      }
      if ((0, is_1.is_ArrayLike)(mix)) {
        _toggleArr(mix, state);
        return;
      }
      _toggle(mix, state);
    }
    exports.els_toggleVisibility = els_toggleVisibility;
    function _toggle(el, state) {
      el.style.display = state ? '' : 'none';
    }
    function _toggleArr(els, state) {
      var imax = els.length, i = -1;
      while (++i < imax) {
        _toggle(els[i], state);
      }
    }
    function el_renderPlaceholder(container) {
      var anchor = refs_1._document.createComment('');
      container.appendChild(anchor);
      return anchor;
    }
    exports.el_renderPlaceholder = el_renderPlaceholder;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_statements_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_statements_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_statements_utils, module.exports);
    } else {
      _ref_mask_src_statements_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_util_dom;
  (function() {
    var exports = null != _ref_mask_src_util_dom ? _ref_mask_src_util_dom : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.dom_insertBefore = exports.dom_insertAfter = exports.dom_hideAll = exports.dom_showAll = exports.dom_hide = exports.dom_show = exports.dom_removeAll = exports.dom_remove = void 0;
    var arr_1 = _ref_utils_src_arr;
    function setVisibility(state, el) {
      if (null != el) {
        el.style.display = state ? '' : 'none';
      }
    }
    function dom_remove(el) {
      var parent = el.parentNode;
      if (null == parent) {
        return el;
      }
      return parent.removeChild(el);
    }
    exports.dom_remove = dom_remove;
    function dom_removeAll(arr) {
      (0, arr_1.arr_each)(arr, dom_remove);
    }
    exports.dom_removeAll = dom_removeAll;
    exports.dom_show = setVisibility.bind(null, true);
    exports.dom_hide = setVisibility.bind(null, false);
    function dom_showAll(arr) {
      (0, arr_1.arr_each)(arr, exports.dom_show);
    }
    exports.dom_showAll = dom_showAll;
    function dom_hideAll(arr) {
      (0, arr_1.arr_each)(arr, exports.dom_hide);
    }
    exports.dom_hideAll = dom_hideAll;
    function dom_insertAfter(el, anchor) {
      return anchor.parentNode.insertBefore(el, anchor.nextSibling);
    }
    exports.dom_insertAfter = dom_insertAfter;
    function dom_insertBefore(el, anchor) {
      return anchor.parentNode.insertBefore(el, anchor);
    }
    exports.dom_insertBefore = dom_insertBefore;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_util_dom === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_util_dom) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_util_dom, module.exports);
    } else {
      _ref_mask_src_util_dom = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_observer_src_expression_subscribe;
  (function() {
    var exports = null != _ref_mask_projects_observer_src_expression_subscribe ? _ref_mask_projects_observer_src_expression_subscribe : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
      if (pack || 2 === arguments.length) {
        for (var ar, i = 0, l = from.length; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) {
              ar = Array.prototype.slice.call(from, 0, i);
            }
            ar[i] = from[i];
          }
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.expression_subscribe = void 0;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    var eval_deferred_1 = _ref_mask_projects_expression_src_eval_deferred;
    var obj_observe_1 = _ref_mask_projects_observer_src_obj_observe;
    var expr_1 = _ref_mask_projects_observer_src_utils_expr;
    var parser_1 = _ref_mask_projects_expression_src_parser;
    var eval_1 = _ref_mask_projects_expression_src_eval;
    function expression_subscribe(mix, model, ctx, ctr, cb, once) {
      if ('.' === mix) {
        if (null != model) {
          (0, obj_observe_1.obj_addMutatorObserver)(model, cb);
        }
        return;
      }
      var ast = (0, parser_1._parseCached)(mix, ctr);
      mix = (0, exports_1.expression_getType)(ast);
      if (mix === exports_1.exp_type_Observe) {
        mix = (0, eval_deferred_1._evaluateAstDeferredInner)(ast, model, ctx, ctr);
        if (true === once && void 0 !== mix.value) {
          cb(mix.value);
          return;
        }
        if (null === mix || void 0 === mix ? void 0 : mix.subscribe) {
          return mix.subscribe(cb, null, once);
        }
      }
      function onInnerChanged(partial) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        var val = (0, eval_1._evaluate)(ast, model, ctx, ctr);
        cb.apply(void 0, __spreadArray([ val ], args, false));
      }
      if (true === once) {
        onInnerChanged();
        return;
      }
      toggleExpressionsBindings(obj_observe_1.obj_addObserver, ast, model, ctr, onInnerChanged);
      // send current value
      onInnerChanged();
      return new Unsubscribable(ast, model, ctr, onInnerChanged);
    }
    exports.expression_subscribe = expression_subscribe;
    var Unsubscribable = /** @class */ function() {
      function Unsubscribable(ast, model, ctr, cb) {
        this.ast = ast;
        this.model = model;
        this.ctr = ctr;
        this.cb = cb;
      }
      Unsubscribable.prototype.unsubscribe = function() {
        _unsubscribe(this.ast, this.model, this.ctr, this.cb);
      };
      return Unsubscribable;
    }();
    function _unsubscribe(ast, model, ctr, cb) {
      if ('.' === ast) {
        if (null != model) {
          (0, obj_observe_1.obj_removeMutatorObserver)(model, cb);
        }
        return;
      }
      toggleExpressionsBindings(obj_observe_1.obj_removeObserver, ast, model, ctr, cb);
    }
    function toggleExpressionsBindings(toggleFn, expr, model, ctr, cb) {
      expr = (0, exports_1.expression_varRefs)(expr, model, null, ctr);
      if (null == expr) {
        return null;
      }
      if ('string' === typeof expr) {
        _toggleObserver(toggleFn, model, ctr, expr, cb);
        return 1;
      }
      var arr = expr;
      var imax = arr.length;
      var i = -1;
      var count = 0;
      while (++i < imax) {
        var accs = arr[i];
        if ('string' === typeof accs) {
          if (95 /*_*/ === accs.charCodeAt(0) && 46 /*.*/ === accs.charCodeAt(0)) {
            continue;
          }
        } else if ('object' === typeof accs) {
          if ('_' === accs.ref) {
            continue;
          }
        }
        _toggleObserver(toggleFn, model, ctr, accs, cb);
        count++;
      }
      return count;
    }
    function _toggleObserver(mutatorFn, model, ctr, accessor, callback) {
      accessor = (0, expr_1.expr_getHost)(accessor, model, null, ctr);
      if (null == accessor) {
        return;
      }
      model = accessor[0], ctr = accessor[1];
      if (null == model) {
        return;
      }
      mutatorFn(model, ctr, callback);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_observer_src_expression_subscribe === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_observer_src_expression_subscribe) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_observer_src_expression_subscribe, module.exports);
    } else {
      _ref_mask_projects_observer_src_expression_subscribe = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_if;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_if ? _ref_mask_projects_mask_binding_src_statements_if : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
      if (pack || 2 === arguments.length) {
        for (var ar, i = 0, l = from.length; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) {
              ar = Array.prototype.slice.call(from, 0, i);
            }
            ar[i] = from[i];
          }
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ObservableIf = void 0;
    var is_1 = _ref_utils_src_is;
    var refs_1 = _ref_utils_src_refs;
    var utils_1 = _ref_mask_src_statements_utils;
    var dom_1 = _ref_mask_src_util_dom;
    var tag_1 = _ref_mask_src_custom_tag;
    var compo_1 = _ref_mask_src_util_compo;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    var exports_2 = _ref_mask_projects_mask_compo_src_exports;
    var expression_subscribe_1 = _ref_mask_projects_observer_src_expression_subscribe;
    var ObservableNodes = /** @class */ function() {
      function ObservableNodes(node, model, ctx, ctr, cb) {
        this.node = node;
        this.model = model;
        this.ctx = ctx;
        this.ctr = ctr;
        this.cb = cb;
        this.index = 0;
        this.cursor = null;
        this.switch = [];
        this.subscriptions = [];
        this.disposed = false;
        this.runSwitch = this.runSwitch.bind(this);
        this.onChanged = this.onChanged.bind(this);
        this.onSwitchResult = this.onSwitchResult.bind(this);
        this.cursor = node;
      }
      Object.defineProperty(ObservableNodes.prototype, 'busy', {
        get: function() {
          for (var i = 0; i < this.switch.length; i++) {
            var x = this.switch[i];
            if (null != x && x.busy) {
              return true;
            }
          }
          return false;
        },
        enumerable: false,
        configurable: true
      });
      ObservableNodes.prototype.runAll = function() {
        this.index = 0;
        this.cursor = this.node;
        this.checkIFNode();
      };
      ObservableNodes.prototype.initialize = function(i) {
        while (this.index < i && this.moveCursorNext()) {}
        return this.createSwitch(i);
      };
      ObservableNodes.prototype.dispose = function() {
        this.disposed = true;
        this.subscriptions.forEach(function(x) {
          return null === x || void 0 === x ? void 0 : x.unsubscribe();
        });
      };
      ObservableNodes.prototype.checkIFNode = function() {
        var i = this.index;
        var meta = this.switch[i];
        if (null != meta) {
          switch (meta.type) {
           case exports_1.exp_type_Sync:
            // we have only first statement binded, all other - re-evaluate
            var result = 0 === i ? meta.result : this.evalSwitchCurrent();
            this.onSwitchResult(null, result);
            return;

           case exports_1.exp_type_Async:
           case exports_1.exp_type_Observe:
            if (false === meta.busy) {
              this.onSwitchResult(null, meta.result);
              return;
            }
            break;
          }
        }
        this.createSwitch(i);
      };
      ObservableNodes.prototype.runSwitch = function(err, result) {
        var meta = this.switch[this.index];
        meta.result = result;
        meta.busy = false;
        if (err) {
          this.onResolved();
          this.cb(err);
          return;
        }
        if (result) {
          this.onResolved();
          this.cb(null, meta.node, this.index);
          return;
        }
        if (false === this.moveCursorNext()) {
          this.onResolved();
          this.cb(null, null, -1);
          return;
        }
        err = this.cursor.expression;
        if (null == err || '' === err) {
          this.onResolved();
          this.cb(null, this.cursor, this.index);
          return;
        }
        this.checkIFNode();
      };
      ObservableNodes.prototype.onSwitchResult = function(err, result) {
        if (err) {
          this.cb(err);
          return;
        }
        this.runSwitch(null, result);
      };
      ObservableNodes.prototype.onChanged = function(err, i, result) {
        if (this.disposed) {
          return;
        }
        i = this.switch[i];
        i.result = result;
        i.busy = false;
        this.runAll();
      };
      ObservableNodes.prototype.createSwitch = function(i) {
        var _this = this;
        // wrapped value: could be promise, observable, observable expression or actual value
        var wValue = this.evalSwitchCurrent();
        wValue = this.switch[i] = {
          busy: false,
          type: exports_1.exp_type_Sync,
          node: this.cursor,
          value: wValue,
          error: null,
          result: null
        };
        this.subscriptions.push((0, expression_subscribe_1.expression_subscribe)(this.cursor.expression, this.model, this.ctx, this.ctr, function(result) {
          _this.onChanged(null, i, result);
        }, 0 === i ? false : true));
        // if (is_Observable(wValue) && wValue.kind !== SubjectKind.Promise) {
        //     meta.type = exp_type_Observe;
        //     if (wValue.value !== void 0) {
        //         this.onSwitchResult(null, wValue.value);
        //     } else {
        //         meta.busy = true;
        //     }
        //     this.subscriptions.push(
        //         wValue.subscribe(result => this.onChanged(null, i, result), this.onChanged)
        //     );
        //     return meta;
        // }
        // if (is_PromiseLike(wValue)) {
        //     meta.busy = true;
        //     meta.type = exp_type_Async;
        //     wValue.then(result => this.onChanged(null, i, result), this.onChanged);
        //     return meta;
        // }
        // // BIND
        // if (i === 0 && is_NODE !== true) {
        //     this.subscriptions.push(
        //         expression_subscribe(
        //             this.cursor.expression
        //             , this.model
        //             , this.ctx
        //             , this.ctr
        //             , result => {
        //                 this.onChanged(null, i, result);
        //             }
        //         )
        //     );
        // } else {
        //     this.onSwitchResult(null, wValue);
        // }
        return wValue;
      };
      // UTILS
      ObservableNodes.prototype.evalSwitchCurrent = function() {
        return (0, exports_1.expression_eval)(this.cursor.expression, this.model, this.ctx, this.ctr, this.node);
      };
      ObservableNodes.prototype.moveCursorNext = function() {
        var next = this.cursor.nextSibling;
        if ('else' !== (null === next || void 0 === next ? void 0 : next.tagName)) {
          return false;
        }
        this.index++;
        this.cursor = next;
        return true;
      };
      ObservableNodes.prototype.onResolved = function() {
        if (is_1.is_NODE && this.subscriptions.length > 0) {
          this.subscriptions.forEach(function(x) {
            return null === x || void 0 === x ? void 0 : x.unsubscribe();
          });
        }
      };
      return ObservableNodes;
    }();
    var ObservableIf = /** @class */ function() {
      function ObservableIf(node, model, ctx, el, ctr, children) {
        this.node = node;
        this.model = model;
        this.ctx = ctx;
        this.el = el;
        this.ctr = ctr;
        this.children = children;
        this.compoName = '+if';
        this.meta = {
          serializeNodes: true
        };
        this.attr = null;
        this.placeholder = null;
        this.index = -1;
        this.Switch = [];
      }
      ObservableIf.prototype.render = function() {
        var _this = this;
        this.placeholder = (0, utils_1.el_renderPlaceholder)(this.el);
        this.obs = new ObservableNodes(this.node, this.model, this.ctx, this.ctr, function(err, node, index) {
          return _this.show(err, node, index);
        });
        this.obs.runAll();
        if (this.obs.busy) {
          this.resumeFn = exports_2.Compo.pause(this, this.ctx);
        }
      };
      // NodeJS Bootstrap
      ObservableIf.prototype.renderEnd = function(els, model, ctx, container, ctr) {
        var _this = this;
        var _a = null !== (_a = null === (_a = this.attr) || void 0 === _a ? void 0 : _a['switch-index']) && void 0 !== _a ? _a : 0;
        this.index = Number(_a);
        this.placeholder = null !== (_a = this.placeholder) && void 0 !== _a ? _a : (0, 
        utils_1.el_renderPlaceholder)(this.el);
        this.obs = new ObservableNodes(this.node, this.model, this.ctx, this.ctr, function(err, node, index) {
          return _this.show(err, node, index);
        });
        _a = this.obs.initialize(this.index);
        this.Switch[this.index] = {
          node: _a.node,
          elements: els
        };
      };
      ObservableIf.prototype.show = function(err, node, index) {
        var currentIndex = this.index;
        var switch_ = this.Switch;
        if (currentIndex === index) {
          return;
        }
        if (currentIndex > -1 && currentIndex < switch_.length) {
          // after NodeJS prerender switch will contain no elements
          (0, utils_1.els_toggleVisibility)(switch_[currentIndex].elements, false);
        }
        if (-1 === index) {
          this.index = -1;
          return;
        }
        this.index = index;
        currentIndex = switch_[index];
        if (null == currentIndex) {
          switch_[index] = currentIndex = {
            elements: null,
            node: node
          };
        }
        if (null != currentIndex.elements) {
          (0, utils_1.els_toggleVisibility)(currentIndex.elements, true);
          return;
        }
        var index = null === (switch_ = currentIndex.node.parent) || void 0 === switch_ ? void 0 : switch_.tagName;
        node = 'define' === index || 'let' === index;
        switch_ = currentIndex.node.nodes;
        index = refs_1._document.createDocumentFragment();
        var owner = {
          components: [],
          parent: this.ctr
        };
        switch_ = (0, compo_1.compo_renderElements)(switch_, this.model, this.ctx, index, owner);
        (0, dom_1.dom_insertBefore)(index, this.placeholder);
        currentIndex.elements = switch_;
        (0, compo_1.compo_emitInserted)(owner);
        compo_1.compo_addChildren.apply(void 0, __spreadArray([ this.ctr ], owner.components, false));
        if (node) {
          null === (index = this.ctr.$) || void 0 === index ? void 0 : index.add(switch_);
        }
        if (null != this.resumeFn) {
          this.resumeFn();
          this.resumeFn = null;
        }
      };
      ObservableIf.prototype.dispose = function() {
        var _a;
        null === (_a = this.obs) || void 0 === _a ? void 0 : _a.dispose();
      };
      return ObservableIf;
    }();
    exports.ObservableIf = ObservableIf;
    (0, tag_1.customTag_register)('+if', ObservableIf);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_if === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_if) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_if, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_if = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_utils_dom;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_utils_dom ? _ref_mask_projects_mask_binding_src_utils_dom : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.dom_insertBefore = exports.dom_insertAfter = exports.dom_showAll = exports.dom_showEl = exports.dom_hideAll = exports.dom_hideEl = exports.dom_removeAll = exports.dom_removeElement = void 0;
    var arr_1 = _ref_utils_src_arr;
    function dom_removeElement(el) {
      var parent = el.parentNode;
      if (null == parent) {
        return el;
      }
      return parent.removeChild(el);
    }
    exports.dom_removeElement = dom_removeElement;
    function dom_removeAll(arr) {
      (0, arr_1.arr_each)(arr, dom_removeElement);
    }
    exports.dom_removeAll = dom_removeAll;
    function dom_hideEl(el) {
      if (null != el) {
        el.style.display = 'none';
      }
    }
    exports.dom_hideEl = dom_hideEl;
    function dom_hideAll(arr) {
      (0, arr_1.arr_each)(arr, dom_hideEl);
    }
    exports.dom_hideAll = dom_hideAll;
    function dom_showEl(el) {
      if (null != el) {
        el.style.display = '';
      }
    }
    exports.dom_showEl = dom_showEl;
    function dom_showAll(arr) {
      (0, arr_1.arr_each)(arr, dom_showEl);
    }
    exports.dom_showAll = dom_showAll;
    function dom_insertAfter(el, anchor) {
      return anchor.parentNode.insertBefore(el, anchor.nextSibling);
    }
    exports.dom_insertAfter = dom_insertAfter;
    function dom_insertBefore(el, anchor) {
      return anchor.parentNode.insertBefore(el, anchor);
    }
    exports.dom_insertBefore = dom_insertBefore;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_utils_dom === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_utils_dom) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_utils_dom, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_utils_dom = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_utils_compo;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_utils_compo ? _ref_mask_projects_mask_binding_src_utils_compo : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.compo_getScopeFor = exports.compo_hasChild = exports.compo_inserted = exports.compo_disposeChildren = exports.compo_dispose = exports.compo_renderChildren = exports.compo_render = exports.compo_fragmentInsert = void 0;
    var refs_1 = _ref_utils_src_refs;
    var dom_1 = _ref_mask_projects_mask_binding_src_utils_dom;
    var reporters_1 = _ref_mask_src_util_reporters;
    var compo_1 = _ref_mask_src_util_compo;
    var arr_1 = _ref_utils_src_arr;
    var exports_1 = _ref_mask_projects_mask_compo_src_exports;
    var exports_2 = _ref_mask_src_renderer_exports;
    var exports_3 = _ref_mask_src_builder_exports;
    function compo_fragmentInsert(compo, index, fragment, placeholder) {
      if (null == compo.components) {
        return (0, dom_1.dom_insertAfter)(fragment, placeholder || compo.placeholder);
      }
      var compos = compo.components, anchor = null, insertBefore = true, imax = compos.length, i = index - 1;
      if (null == anchor) {
        while (++i < imax) {
          var arr = compos[i].elements;
          if (null != arr && 0 !== arr.length) {
            anchor = arr[0];
            break;
          }
        }
      }
      if (null == anchor) {
        insertBefore = false;
        i = index < imax ? index : imax;
        while (--i > -1) {
          arr = compos[i].elements;
          if (null != arr && 0 !== arr.length) {
            anchor = arr[arr.length - 1];
            break;
          }
        }
      }
      if (null == anchor) {
        anchor = placeholder || compo.placeholder;
      }
      if (insertBefore) {
        return (0, dom_1.dom_insertBefore)(fragment, anchor);
      }
      return (0, dom_1.dom_insertAfter)(fragment, anchor);
    }
    exports.compo_fragmentInsert = compo_fragmentInsert;
    function compo_render(parentCtr, template, model, ctx, container) {
      return (0, exports_2.renderer_render)(template, model, ctx, container, parentCtr);
    }
    exports.compo_render = compo_render;
    function compo_renderChildren(compo, anchor, model) {
      var fragment = refs_1._document.createDocumentFragment();
      var ctx = new exports_3.builder_Ctx(compo.ctx);
      compo.elements = (0, compo_1.compo_renderElements)(compo.nodes, model || compo.model, ctx, fragment, compo);
      (0, dom_1.dom_insertBefore)(fragment, anchor);
      compo_inserted(compo, ctx);
    }
    exports.compo_renderChildren = compo_renderChildren;
    // export function compo_renderElements (nodes, model, ctx, el, ctr, children?){
    //     if (nodes == null){
    //         return null;
    //     }
    //     var arr = [];
    //     builder_build(nodes, model, ctx, el, ctr, arr);
    //     if (is_Array(children)) {
    //         children.push.apply(children, arr);
    //     }
    //     return arr;
    // };
    function compo_dispose(compo, parent) {
      if (null == compo) {
        return false;
      }
      if (null != compo.elements) {
        (0, dom_1.dom_removeAll)(compo.elements);
        compo.elements = null;
      }
      exports_1.Component.dispose(compo);
      parent = parent && parent.components || compo.parent && compo.parent.components;
      if (null == parent) {
        (0, reporters_1.log_error)('Parent Components Collection is undefined');
        return false;
      }
      return (0, arr_1.arr_remove)(parent, compo);
    }
    exports.compo_dispose = compo_dispose;
    function compo_disposeChildren(compo) {
      var els = compo.elements;
      if (null != els) {
        (0, dom_1.dom_removeAll)(els);
        compo.elements = null;
      }
      var compos = compo.components;
      if (null != compos) {
        var imax = compos.length, i = -1;
        while (++i < imax) {
          exports_1.Component.dispose(compos[i]);
        }
        compos.length = 0;
      }
    }
    exports.compo_disposeChildren = compo_disposeChildren;
    function compo_inserted(compo, ctx) {
      if (null == ctx || 'object' !== typeof ctx || true !== ctx.async) {
        exports_1.Component.signal.emitIn(compo, 'domInsert');
      } else {
        ctx.done(function() {
          exports_1.Component.signal.emitIn(compo, 'domInsert');
        });
      }
    }
    exports.compo_inserted = compo_inserted;
    function compo_hasChild(compo, compoName) {
      var arr = compo.components;
      if (null == arr || 0 === arr.length) {
        return false;
      }
      var imax = arr.length, i = -1;
      while (++i < imax) {
        if (arr[i].compoName === compoName) {
          return true;
        }
      }
      return false;
    }
    exports.compo_hasChild = compo_hasChild;
    function compo_getScopeFor(ctr, path) {
      var key = path;
      var i = path.indexOf('.');
      if (-1 !== i) {
        key = path.substring(0, i);
        if (63 /*?*/ === key.charCodeAt(key.length - 1)) {
          key = key.slice(0, -1);
        }
      }
      while (null != ctr) {
        if (null != ctr.scope && ctr.scope.hasOwnProperty(key)) {
          return ctr.scope;
        }
        ctr = ctr.parent;
      }
      return null;
    }
    exports.compo_getScopeFor = compo_getScopeFor;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_utils_compo === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_utils_compo) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_utils_compo, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_utils_compo = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_loop_utils;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_loop_utils ? _ref_mask_projects_mask_binding_src_statements_loop_utils : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
      if (pack || 2 === arguments.length) {
        for (var ar, i = 0, l = from.length; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) {
              ar = Array.prototype.slice.call(from, 0, i);
            }
            ar[i] = from[i];
          }
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.list_remove = exports.list_update = exports.list_sort = exports.arr_createRefs = void 0;
    var refs_1 = _ref_utils_src_refs;
    var exports_1 = _ref_mask_projects_mask_compo_src_exports;
    var dom_1 = _ref_mask_projects_mask_binding_src_utils_dom;
    var compo_1 = _ref_mask_projects_mask_binding_src_utils_compo;
    function arr_createRefs(array) {
      var imax = array.length, i = -1;
      while (++i < imax) {
        //create references from values to distinguish the models
        var x = array[i];
        switch (typeof x) {
         case 'string':
         case 'number':
         case 'boolean':
          array[i] = Object(x);
          break;
        }
      }
    }
    exports.arr_createRefs = arr_createRefs;
    function list_sort(self, array) {
      var compos = self.components;
      var i = 0;
      var imax = compos.length;
      var j = 0;
      var jmax = null;
      var element = null;
      var compo = null;
      var fragment = refs_1._document.createDocumentFragment();
      var sorted = [];
      for (;i < imax; i++) {
        compo = compos[i];
        if (null == compo.elements || 0 === compo.elements.length) {
          continue;
        }
        for (j = 0, jmax = compo.elements.length; j < jmax; j++) {
          element = compo.elements[j];
          element.parentNode.removeChild(element);
        }
      }
      outer: for (j = 0, jmax = array.length; j < jmax; j++) {
        for (i = 0; i < imax; i++) {
          if (array[j] === self._getModel(compos[i])) {
            sorted[j] = compos[i];
            continue outer;
          }
        }
        console.warn('No Model Found for', array[j]);
      }
      for (i = 0, imax = sorted.length; i < imax; i++) {
        compo = sorted[i];
        if (null == compo.elements || 0 === compo.elements.length) {
          continue;
        }
        for (j = 0, jmax = compo.elements.length; j < jmax; j++) {
          element = compo.elements[j];
          fragment.appendChild(element);
        }
      }
      self.components = self.components = sorted;
      (0, dom_1.dom_insertBefore)(fragment, self.placeholder);
    }
    exports.list_sort = list_sort;
    function list_update(self, deleteIndex, deleteCount, insertIndex, rangeModel) {
      var compos = null !== (_a = self.components) && void 0 !== _a ? _a : self.components = [];
      if (null != deleteIndex && null != deleteCount) {
        var i = deleteIndex, length = deleteIndex + deleteCount;
        if (length > compos.length) {
          length = compos.length;
        }
        for (;i < length; i++) {
          if ((0, compo_1.compo_dispose)(compos[i], self)) {
            i--;
            length--;
          }
        }
      }
      if (null != insertIndex && rangeModel && rangeModel.length) {
        i = compos.length;
        var _a = self.build(rangeModel, null, null);
        var arrivedCompos = compos.splice(i);
        (0, compo_1.compo_fragmentInsert)(self, insertIndex, _a, self.placeholder);
        compos.splice.apply(compos, __spreadArray([ insertIndex, 0 ], arrivedCompos, false));
        for (var i_1 = 0; i_1 < arrivedCompos.length; i_1++) {
          exports_1.Component.signal.emitIn(arrivedCompos[i_1], 'domInsert');
        }
      }
    }
    exports.list_update = list_update;
    function list_remove(self, removed) {
      var compos = self.components;
      var i = compos.length;
      while (--i > -1) {
        var x = compos[i];
        if (-1 === removed.indexOf(x.model)) {
          continue;
        }
        (0, compo_1.compo_dispose)(x, self);
      }
    }
    exports.list_remove = list_remove;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_loop_utils === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_loop_utils) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_loop_utils, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_loop_utils = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_base_ABindedStatement;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_base_ABindedStatement ? _ref_mask_projects_mask_binding_src_statements_base_ABindedStatement : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
      if (pack || 2 === arguments.length) {
        for (var ar, i = 0, l = from.length; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) {
              ar = Array.prototype.slice.call(from, 0, i);
            }
            ar[i] = from[i];
          }
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.AObservableNodes = exports.ABindedStatement = void 0;
    var is_1 = _ref_utils_src_is;
    var exports_1 = _ref_mask_src_parser_exports;
    var exports_2 = _ref_mask_projects_mask_compo_src_exports;
    var expression_subscribe_1 = _ref_mask_projects_observer_src_expression_subscribe;
    var utils_1 = _ref_mask_src_statements_utils;
    var utils_2 = _ref_mask_projects_mask_binding_src_statements_loop_utils;
    var ABindedStatement = /** @class */ function() {
      function ABindedStatement(node, model, ctx, el, ctr, children) {
        this.node = node;
        this.model = model;
        this.ctx = ctx;
        this.el = el;
        this.ctr = ctr;
        this.children = children;
        this.rendered = false;
        this.resumeFn = null;
        this.meta = {
          serializeNodes: true
        };
        this.refresh = this.refresh.bind(this);
        this.onChanged = this.onChanged.bind(this);
      }
      ABindedStatement.prototype.serializeNodes = function(node) {
        return (0, exports_1.mask_stringify)(node);
      };
      ABindedStatement.prototype.render = function() {
        this._beforeRender();
        this.placeholder = (0, utils_1.el_renderPlaceholder)(this.el);
        this.subscription = (0, expression_subscribe_1.expression_subscribe)(this._getExpression(), this.model, this.ctx, this.ctr, this.onChanged, is_1.is_NODE ? true : false);
        // if onValue wasn't sync we should await for first render
        if (false === this.rendered) {
          this.resumeFn = exports_2.Compo.pause(this, this.ctx);
        }
      };
      ABindedStatement.prototype.renderEnd = function(els, model, ctx, container, ctr) {
        var _a;
        this.placeholder = null !== (_a = this.placeholder) && void 0 !== _a ? _a : (0, 
        utils_1.el_renderPlaceholder)(this.el);
        this._bootstrap();
        this.subscription = (0, expression_subscribe_1.expression_subscribe)(this._getExpression(), this.model, this.ctx, this.ctr, this.onChanged, is_1.is_NODE ? true : false);
      };
      ABindedStatement.prototype.onChanged = function(value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        if (this.rendered) {
          this.refresh.apply(this, __spreadArray([ value ], args, false));
          return;
        }
        if ((0, is_1.is_Array)(value)) {
          (0, utils_2.arr_createRefs)(value);
        }
        this.build(value);
        this.rendered = true;
        if (null != this.resumeFn) {
          this.resumeFn();
          this.resumeFn = null;
        }
      };
      ABindedStatement.prototype.dispose = function() {
        var _a;
        null === (_a = this.subscription) || void 0 === _a ? void 0 : _a.unsubscribe();
        // expression_unbind(
        //     this.expr || this.expression, this.model, this.parent, this.binder
        // );
      };
      return ABindedStatement;
    }();
    exports.ABindedStatement = ABindedStatement;
    ABindedStatement = /** @class */ function() {
      function AObservableNodes() {}
      return AObservableNodes;
    }();
    exports.AObservableNodes = ABindedStatement;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_base_ABindedStatement === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_base_ABindedStatement) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_base_ABindedStatement, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_base_ABindedStatement = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_base_ALoopBindedStatement;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_base_ALoopBindedStatement ? _ref_mask_projects_mask_binding_src_statements_base_ALoopBindedStatement : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ALoopBindedStatement = void 0;
    var compo_1 = _ref_mask_projects_mask_binding_src_utils_compo;
    var dom_1 = _ref_mask_projects_mask_binding_src_utils_dom;
    var arr_1 = _ref_utils_src_arr;
    var utils_1 = _ref_mask_projects_mask_binding_src_statements_loop_utils;
    var ABindedStatement_1 = _ref_mask_projects_mask_binding_src_statements_base_ABindedStatement;
    ABindedStatement_1 = /** @class */ function(_super) {
      __extends(ALoopBindedStatement, _super);
      function ALoopBindedStatement() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ALoopBindedStatement.prototype.refresh = function(value, method, args, result) {
        if (null == method) {
          // this was new array/object setter and not an immutable function call
          var compos = this.components;
          if (null != compos) {
            var imax = compos.length;
            var i = -1;
            while (++i < imax) {
              if ((0, compo_1.compo_dispose)(compos[i], this)) {
                i--;
                imax--;
              }
            }
            compos.length = 0;
          }
          var frag = this.build(value, null, null);
          if (null != frag) {
            (0, dom_1.dom_insertBefore)(frag, this.placeholder);
            (0, arr_1.arr_each)(this.components, compo_1.compo_inserted);
          }
          return;
        }
        var array = value;
        (0, utils_1.arr_createRefs)(value);
        switch (method) {
         case 'push':
          (0, utils_1.list_update)(this, null, null, array.length - 1, array.slice(array.length - 1));
          break;

         case 'pop':
          (0, utils_1.list_update)(this, array.length, 1);
          break;

         case 'unshift':
          (0, utils_1.list_update)(this, null, null, 0, array.slice(0, 1));
          break;

         case 'shift':
          (0, utils_1.list_update)(this, 0, 1);
          break;

         case 'splice':
          var sliceArgs = args;
          var sliceStart = sliceArgs[0];
          var sliceRemove = 1 === sliceArgs.length ? this.components.length : sliceArgs[1];
          sliceArgs = args.length > 2 ? array.slice(sliceArgs[0], sliceArgs.length - 2 + sliceArgs[0]) : null;
          (0, utils_1.list_update)(this, sliceStart, sliceRemove, sliceStart, sliceArgs);
          break;

         case 'sort':
         case 'reverse':
          (0, utils_1.list_sort)(this, array);
          break;

         case 'remove':
          sliceRemove = result;
          if (null != sliceRemove && sliceRemove.length > 0) {
            (0, utils_1.list_remove)(this, sliceRemove);
          }
          break;
        }
      };
      return ALoopBindedStatement;
    }(ABindedStatement_1.ABindedStatement);
    exports.ALoopBindedStatement = ABindedStatement_1;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_base_ALoopBindedStatement === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_base_ALoopBindedStatement) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_base_ALoopBindedStatement, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_base_ALoopBindedStatement = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_loop_for;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_loop_for ? _ref_mask_projects_mask_binding_src_statements_loop_for : {};
    var module = {
      exports: exports
    };
    'use strict';
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) {
              d[p] = b[p];
            }
          }
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if ('function' !== typeof b && null !== b) {
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        }
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
      };
    }();
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ObservableFor = void 0;
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_src_builder_exports;
    var ALoopBindedStatement_1 = _ref_mask_projects_mask_binding_src_statements_base_ALoopBindedStatement;
    _ref_mask_src_statements_exports;
    var For = exports_1.custom_Statements['for'];
    ALoopBindedStatement_1 = /** @class */ function(_super) {
      __extends(ObservableFor, _super);
      function ObservableFor() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ObservableFor.prototype._beforeRender = function() {
        var _a = For.parseFor(this.expression), prop1 = _a[0], prop2 = _a[1], type = _a[2], _a = _a[3];
        this.prop1 = prop1;
        this.prop2 = prop2;
        this.type = type;
        this.expr = _a;
      };
      ObservableFor.prototype._getModel = function(compo) {
        return compo.scope[this.prop1];
      };
      ObservableFor.prototype._getExpression = function() {
        return this.expr;
      };
      ObservableFor.prototype._bootstrap = function() {
        this._beforeRender();
      };
      // render (model, ctx, container, ctr, children){
      //     const directive = For.parseFor(this.expression);
      //     const attr = this.attr;
      //     attr[attr_PROP_1] = directive[0];
      //     attr[attr_PROP_2] = directive[1];
      //     attr[attr_TYPE] = directive[2];
      //     attr[attr_EXPR] = directive[3];
      //     let subs = expression_subscribe(
      //         directive[3]
      //         , model
      //         , ctx
      //         , ctr
      //         , this.onChanged
      //         , is_NODE ? true : false
      //     );
      //     let value = expression_eval(directive[3], model, ctx, ctr);
      //     if (value == null) {
      //         return;
      //     }
      //     if (is_Array(value)) {
      //         arr_createRefs(value);
      //     }
      //     For.build(
      //         value,
      //         directive,
      //         this.nodes,
      //         model,
      //         ctx,
      //         container,
      //         this,
      //         children
      //     );
      // }
      ObservableFor.prototype.getHandler = function(name, model) {
        return For.getHandler(name, model);
      };
      ObservableFor.prototype.build = function(model, container, children) {
        if (void 0 === container) {
          container = this.el;
        }
        if (void 0 === children) {
          children = this.children;
        }
        var nodes = For.getNodes(this.node.nodes, model, this.prop1, this.prop2, this.type);
        return (0, exports_2.builder_build)(nodes, model, this.ctx, container, this, children);
      };
      return ObservableFor;
    }(ALoopBindedStatement_1.ALoopBindedStatement);
    exports.ObservableFor = ALoopBindedStatement_1;
    (0, exports_1.customTag_register)('+for', ALoopBindedStatement_1);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_loop_for === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_loop_for) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_loop_for, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_loop_for = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_loop_each;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_loop_each ? _ref_mask_projects_mask_binding_src_statements_loop_each : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var refs_1 = _ref_utils_src_refs;
    exports = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_expression_src_exports;
    var utils_1 = _ref_mask_projects_mask_binding_src_statements_loop_utils;
    var utils_2 = _ref_mask_projects_mask_binding_src_statements_utils;
    var class_1 = _ref_utils_src_class;
    var exports_3 = _ref_mask_src_builder_exports;
    var exports_4 = _ref_mask_src_dom_exports;
    var ALoopBindedStatement_1 = _ref_mask_projects_mask_binding_src_statements_base_ALoopBindedStatement;
    var exports_5 = _ref_mask_src_parser_exports;
    var EachBinded = {
      meta: {
        serializeNodes: true
      },
      serializeNodes: function(node) {
        return (0, exports_5.mask_stringify)(node);
      },
      //modelRef: null,
      render: function(model, ctx, container, ctr, children) {
        //this.modelRef = this.expression;
        model = (0, exports_2.expression_eval)(this.expression, model, ctx, ctr);
        if (null == model) {
          return;
        }
        (0, utils_1.arr_createRefs)(model);
        build(this.nodes, model, ctx, container, this, children);
      },
      renderEnd: function(els, model, ctx, container, ctr) {
        var compo = new EachStatement(this, this.attr);
        (0, utils_2._renderPlaceholder)(this, compo, container);
        (0, utils_2._compo_initAndBind)(compo, this, model, ctx, container, ctr);
        return compo;
      }
    };
    var EachItem = (0, class_1.class_create)({
      compoName: 'each::item',
      scope: null,
      model: null,
      modelRef: null,
      parent: null,
      //#if (NODE)
      renderStart: function() {
        var expr = this.parent.expression;
        this.modelRef = ('.' === expr ? '' : '(' + expr + ')') + '."' + this.scope.index + '"';
      },
      //#endif
      renderEnd: function(els) {
        this.elements = els;
      },
      dispose: function() {
        if (null != this.elements) {
          this.elements.length = 0;
          this.elements = null;
        }
      }
    });
    var EachStatement = (0, class_1.class_create)(ALoopBindedStatement_1.ALoopBindedStatement, {
      compoName: '+each',
      constructor: function EachStatement(node, attr) {
        this.expression = node.expression;
        this.nodes = node.nodes;
        if (null == node.components) {
          node.components = [];
        }
        this.node = node;
        this.components = node.components;
      },
      _getModel: function(compo) {
        return compo.model;
      },
      _build: function(node, model, ctx, component) {
        var fragment = refs_1._document.createDocumentFragment();
        build(node.nodes, model, ctx, fragment, component);
        return fragment;
      }
    });
    // METHODS
    function build(nodes, array, ctx, container, ctr, elements) {
      var node, imax = array.length, i = (new Array(imax), 0);
      for (;i < imax; i++) {
        node = createEachNode(nodes, i);
        (0, exports_3.builder_build)(node, array[i], ctx, container, ctr, elements);
      }
    }
    function createEachNode(nodes, index) {
      var item = new EachItem();
      item.scope = {
        index: index
      };
      return {
        type: exports_4.Dom.COMPONENT,
        tagName: 'each::item',
        nodes: nodes,
        controller: function() {
          return item;
        }
      };
    }
    // EXPORTS
    (0, exports.customTag_register)('each::item', EachItem);
    (0, exports.customTag_register)('+each', EachBinded);
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_loop_each === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_loop_each) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_loop_each, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_loop_each = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_switch;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_switch ? _ref_mask_projects_mask_binding_src_statements_switch : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_observer_src_exports;
    var utils_1 = _ref_mask_projects_mask_binding_src_statements_utils;
    var refs_1 = _ref_utils_src_refs;
    var dom_1 = _ref_mask_projects_mask_binding_src_utils_dom;
    var fn_1 = _ref_utils_src_fn;
    var expression_1 = _ref_mask_projects_mask_binding_src_utils_expression;
    var exports_3 = _ref_mask_src_parser_exports;
    var exports_4 = _ref_mask_src_renderer_exports;
    var compo_1 = _ref_mask_src_util_compo;
    (function() {
      var $Switch = (0, exports_1.customStatement_get)('switch'), attr_SWITCH = 'switch-index';
      var _nodes, _index;
      (0, exports_1.customTag_register)('+switch', {
        meta: {
          serializeNodes: true
        },
        serializeNodes: function(current) {
          return (0, exports_3.mask_stringify)(current);
        },
        render: function(model, ctx, container, ctr, children) {
          var value = (0, expression_1.expression_eval_safe)(this.expression, model, ctx, ctr);
          resolveNodes(value, this.nodes, model, ctx, ctr);
          var value = _nodes, index = _index;
          if (null == value) {
            return null;
          }
          this.attr[attr_SWITCH] = index;
          return (0, compo_1.compo_renderElements)(value, model, ctx, container, ctr, children);
        },
        renderEnd: function(els, model, ctx, container, ctr) {
          var compo = new SwitchStatement(), index = this.attr[attr_SWITCH];
          (0, utils_1._renderPlaceholder)(this, compo, container);
          return initialize(compo, this, index, els, model, ctx, container, ctr);
        }
      });
      function SwitchStatement() {}
      SwitchStatement.prototype = {
        compoName: '+switch',
        ctx: null,
        model: null,
        controller: null,
        index: null,
        nodes: null,
        Switch: null,
        binder: null,
        refresh: function(value) {
          var compo = this, Switch = compo.Switch, model = compo.model, ctx = compo.ctx, ctr = compo.controller;
          resolveNodes(value, compo.nodes, model, ctx, ctr);
          var value = _nodes, index = _index;
          if (index === compo.index) {
            return;
          }
          if (null != compo.index) {
            (0, utils_1.els_toggleVisibility)(Switch[compo.index], false);
          }
          compo.index = index;
          if (null == index) {
            return;
          }
          var elements = Switch[index];
          if (null != elements) {
            (0, utils_1.els_toggleVisibility)(elements, true);
            return;
          }
          elements = (0, exports_4.renderer_render)(value, model, ctx, null, ctr);
          Switch[index] = elements.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? refs_1._Array_slice.call(elements.childNodes) : elements;
          (0, dom_1.dom_insertBefore)(elements, compo.placeholder);
        },
        dispose: function() {
          (0, exports_2.expression_unbind)(this.expr, this.model, this.controller, this.binder);
          this.controller = null;
          this.model = null;
          this.ctx = null;
          var key, els, i, imax, switch_ = this.Switch;
          for (key in switch_) {
            els = switch_[key];
            if (null == els) {
              continue;
            }
            imax = els.length;
            i = -1;
            while (++i < imax) {
              if (null != els[i].parentNode) {
                els[i].parentNode.removeChild(els[i]);
              }
            }
          }
        }
      };
      function resolveNodes(val, nodes, model, ctx, ctr) {
        _nodes = $Switch.getNodes(val, nodes, model, ctx, ctr);
        _index = null;
        if (null == _nodes) {
          return;
        }
        var imax = nodes.length, i = -1;
        while (++i < imax) {
          if (nodes[i].nodes === _nodes) {
            break;
          }
        }
        _index = i === imax ? null : i;
      }
      function initialize(compo, node, index, elements, model, ctx, container, ctr) {
        compo.ctx = ctx;
        compo.expr = node.expression;
        compo.model = model;
        compo.controller = ctr;
        compo.index = index;
        compo.nodes = node.nodes;
        compo.refresh = (0, fn_1.fn_proxy)(compo.refresh, compo);
        compo.binder = (0, exports_2.expression_createBinder)(compo.expr, model, ctx, ctr, compo.refresh);
        compo.Switch = new Array(node.nodes.length);
        if (null != index) {
          compo.Switch[index] = elements;
        }
        (0, exports_2.expression_bind)(node.expression, model, ctx, ctr, compo.binder);
        return compo;
      }
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_switch === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_switch) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_switch, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_switch = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_with;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_with ? _ref_mask_projects_mask_binding_src_statements_with : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_projects_observer_src_exports;
    var fn_1 = _ref_utils_src_fn;
    var compo_1 = _ref_mask_projects_mask_binding_src_utils_compo;
    var utils_1 = _ref_mask_projects_mask_binding_src_statements_utils;
    var exports_3 = _ref_mask_projects_expression_src_exports;
    var compo_2 = _ref_mask_src_util_compo;
    (function() {
      (0, exports_1.customTag_register)('+with', {
        meta: {
          serializeNodes: true
        },
        rootModel: null,
        render: function(model, ctx, container, ctr) {
          var expr = this.expression, nodes = this.nodes, expr = (0, exports_3.expression_eval)(expr, model, ctx, ctr);
          this.rootModel = model;
          return (0, compo_2.compo_renderElements)(nodes, expr, ctx, container, ctr);
        },
        onRenderStartClient: function(model, ctx) {
          this.rootModel = model;
          this.model = (0, exports_3.expression_eval)(this.expression, model, ctx, this);
        },
        renderEnd: function(els, model_, ctx, container, ctr) {
          var model_ = this.rootModel || model_, compo = new WithStatement(this);
          compo.elements = els;
          compo.model = model_;
          compo.parent = ctr;
          compo.refresh = (0, fn_1.fn_proxy)(compo.refresh, compo);
          compo.binder = (0, exports_2.expression_createBinder)(compo.expr, model_, ctx, ctr, compo.refresh);
          (0, exports_2.expression_bind)(compo.expr, model_, ctx, ctr, compo.binder);
          (0, utils_1._renderPlaceholder)(this, compo, container);
          return compo;
        }
      });
      function WithStatement(node) {
        this.expr = node.expression;
        this.nodes = node.nodes;
      }
      WithStatement.prototype = {
        compoName: '+with',
        elements: null,
        binder: null,
        model: null,
        parent: null,
        refresh: function(model) {
          (0, compo_1.compo_disposeChildren)(this);
          (0, compo_1.compo_renderChildren)(this, this.placeholder, model);
        },
        dispose: function() {
          (0, exports_2.expression_unbind)(this.expr, this.model, this.parent, this.binder);
          this.parent = null;
          this.model = null;
          this.ctx = null;
        }
      };
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_with === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_with) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_with, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_with = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_visible;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_visible ? _ref_mask_projects_mask_binding_src_statements_visible : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var exports_1 = _ref_mask_src_custom_exports;
    var exports_2 = _ref_mask_src_builder_exports;
    var exports_3 = _ref_mask_projects_observer_src_exports;
    var fn_1 = _ref_utils_src_fn;
    var expression_1 = _ref_mask_projects_mask_binding_src_utils_expression;
    (function() {
      var $Visible = (0, exports_1.customStatement_get)('visible');
      (0, exports_1.customTag_register)('+visible', {
        meta: {
          serializeNodes: true
        },
        render: function(model, ctx, container, ctr, childs) {
          return build(this.nodes, model, ctx, container, ctr);
        },
        renderEnd: function(els, model, ctx, container, ctr) {
          var compo = new VisibleStatement(this);
          compo.elements = els;
          compo.model = model;
          compo.parent = ctr;
          compo.refresh = (0, fn_1.fn_proxy)(compo.refresh, compo);
          compo.binder = (0, exports_3.expression_createBinder)(compo.expr, model, ctx, ctr, compo.refresh);
          (0, exports_3.expression_bind)(compo.expr, model, ctx, ctr, compo.binder);
          compo.refresh();
          return compo;
        }
      });
      function VisibleStatement(node) {
        this.expr = node.expression;
        this.nodes = node.nodes;
      }
      VisibleStatement.prototype = {
        compoName: '+visible',
        elements: null,
        binder: null,
        model: null,
        parent: null,
        refresh: function() {
          var isVisible = (0, expression_1.expression_eval_safe)(this.expr, this.model, this.ctx, this);
          $Visible.toggle(this.elements, isVisible);
        },
        dispose: function() {
          (0, exports_3.expression_unbind)(this.expr, this.model, this.parent, this.binder);
          this.parent = null;
          this.model = null;
          this.ctx = null;
        }
      };
      function build(nodes, model, ctx, container, ctr) {
        var els = [];
        (0, exports_2.builder_build)(nodes, model, ctx, container, ctr, els);
        return els;
      }
    })();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_visible === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_visible) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_visible, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_visible = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_binders_IBinder;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_binders_IBinder ? _ref_mask_projects_mask_binding_src_binders_IBinder : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.IBinder = void 0;
    var class_1 = _ref_utils_src_class;
    exports.IBinder = (0, class_1.class_create)({
      constructor: function(exp, model, ctr) {
        this.exp = exp;
        this.ctr = ctr;
        this.model = model;
        this.cb = null;
      },
      on: null,
      bind: function(cb) {
        this.cb = cb;
        // we have here no access to the ctx, so pass null
        this.on(this.exp, this.model, null, this.ctr, cb);
      },
      dispose: function() {
        this.off(this.exp, this.model, this.ctr, this.cb);
        this.exp = this.model = this.ctr = this.cb = null;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_binders_IBinder === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_binders_IBinder) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_binders_IBinder, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_binders_IBinder = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_binders_EventEmitterBinder;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_binders_EventEmitterBinder ? _ref_mask_projects_mask_binding_src_binders_EventEmitterBinder : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.EventEmitterBinder = void 0;
    var class_1 = _ref_utils_src_class;
    var reporters_1 = _ref_mask_src_util_reporters;
    var IBinder_1 = _ref_mask_projects_mask_binding_src_binders_IBinder;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    /*
 *    "expression, ...args"
 *    expression: to get the IEventEmitter
 */
    exports.EventEmitterBinder = (0, class_1.class_create)(IBinder_1.IBinder, {
      on: function(exp, model, ctx, ctr, cb) {
        call('on', exp, model, ctr, cb);
      },
      off: function(exp, model, ctr, cb) {
        call('off', exp, model, ctr, cb);
      }
    });
    function call(method, expr, model, ctr, cb) {
      expr = (0, exports_1.expression_evalStatements)(expr, model, null, ctr);
      model = expr.shift();
      if (null == model || null == model[method]) {
        (0, reporters_1.log_error)('Method is undefined on observable: ' + method);
        return;
      }
      expr.push(cb);
      model[method].apply(model, expr);
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_binders_EventEmitterBinder === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_binders_EventEmitterBinder) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_binders_EventEmitterBinder, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_binders_EventEmitterBinder = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_binders_ExpressionBinder;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_binders_ExpressionBinder ? _ref_mask_projects_mask_binding_src_binders_ExpressionBinder : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.ExpressionBinder = void 0;
    var IBinder_1 = _ref_mask_projects_mask_binding_src_binders_IBinder;
    var exports_1 = _ref_mask_projects_observer_src_exports;
    var class_1 = _ref_utils_src_class;
    exports.ExpressionBinder = (0, class_1.class_create)(IBinder_1.IBinder, {
      on: exports_1.expression_bind,
      off: exports_1.expression_unbind
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_binders_ExpressionBinder === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_binders_ExpressionBinder) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_binders_ExpressionBinder, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_binders_ExpressionBinder = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_binders_RxBinder;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_binders_RxBinder ? _ref_mask_projects_mask_binding_src_binders_RxBinder : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.RxBinder = void 0;
    var IBinder_1 = _ref_mask_projects_mask_binding_src_binders_IBinder;
    var reporters_1 = _ref_mask_src_util_reporters;
    var class_1 = _ref_utils_src_class;
    var exports_1 = _ref_mask_projects_expression_src_exports;
    /*
 *    "expression, ...args"
 *    expression: to get the RxObservable {subscribe:IDisposable}
 */
    exports.RxBinder = (0, class_1.class_create)(IBinder_1.IBinder, {
      stream: null,
      on: function call(expr, model, ctr, cb) {
        expr = (0, exports_1.expression_evalStatements)(expr, model, null, ctr);
        model = expr.shift();
        if (null == model || null == model.subscribe) {
          (0, reporters_1.error_withCompo)('Subscribe method is undefined on RxObservable', ctr);
          return;
        }
        expr.push(cb);
        this.stream = model.subscribe.apply(model, expr);
      },
      off: function() {
        if (null == this.stream) {
          return;
        }
        this.stream.dispose();
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_binders_RxBinder === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_binders_RxBinder) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_binders_RxBinder, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_binders_RxBinder = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_binders_exports;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_binders_exports ? _ref_mask_projects_mask_binding_src_binders_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Binders = void 0;
    var EventEmitterBinder_1 = _ref_mask_projects_mask_binding_src_binders_EventEmitterBinder;
    var ExpressionBinder_1 = _ref_mask_projects_mask_binding_src_binders_ExpressionBinder;
    var RxBinder_1 = _ref_mask_projects_mask_binding_src_binders_RxBinder;
    exports.Binders = {
      EventEmitterBinder: EventEmitterBinder_1.EventEmitterBinder,
      ExpressionBinder: ExpressionBinder_1.ExpressionBinder,
      RxBinder: RxBinder_1.RxBinder
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_binders_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_binders_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_binders_exports, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_binders_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_listen;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_listen ? _ref_mask_projects_mask_binding_src_statements_listen : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_utils_src_class;
    var exports_1 = _ref_mask_src_custom_exports;
    var fn_1 = _ref_utils_src_fn;
    var exports_2 = _ref_mask_projects_mask_binding_src_binders_exports;
    var utils_1 = _ref_mask_projects_mask_binding_src_statements_utils;
    var compo_1 = _ref_mask_projects_mask_binding_src_utils_compo;
    var exports_3 = _ref_mask_projects_mask_compo_src_exports;
    (0, exports_1.customTag_register)('listen', (0, exports.class_create)({
      disposed: false,
      placeholder: null,
      compoName: 'listen',
      show: null,
      hide: null,
      binder: null,
      meta: {
        serializeNodes: true,
        attributes: {
          animatable: false,
          on: false,
          rx: false
        }
      },
      renderEnd: function(els, model, ctx, container, ctr) {
        (0, utils_1._renderPlaceholder)(this, this, container);
        container = Boolean(this.attr.animatable) ? this.refreshAni : this.refreshSync;
        this.refresh = (0, fn_1.fn_proxy)(container, this);
        this.elements = els;
        container = this.getBinder();
        this.binder = new container(this.expression, model, this);
        this.binder.bind(this.refresh);
      },
      getBinder: function() {
        if (this.attr.on) {
          return exports_2.Binders.EventEmitterBinder;
        }
        if (this.attr.rx) {
          return exports_2.Binders.RxBinder;
        }
        return exports_2.Binders.ExpressionBinder;
      },
      dispose: function() {
        this.binder.dispose();
        this.disposed = true;
        this.elements = null;
      },
      refresh: function() {
        throw new Error('Should be defined by refreshSync/refreshAni');
      },
      refreshSync: function() {
        (0, compo_1.compo_disposeChildren)(this);
        this.create();
      },
      create: function() {
        (0, compo_1.compo_renderChildren)(this, this.placeholder);
      },
      refreshAni: function() {
        var _this = this;
        var x = {
          components: this.components,
          elements: this.elements
        };
        this.components = this.elements = null;
        var show = this.getAni('show');
        var hide = this.getAni('hide');
        if ('parallel' === this.attr.animatable) {
          show.start(this.create());
          hide.start(x.elements, function() {
            (0, compo_1.compo_dispose)(x);
          });
          return;
        }
        hide.start(x.elements, function() {
          if (true === _this.disposed) {
            return;
          }
          (0, compo_1.compo_dispose)(x);
          show.start(_this.create());
        });
      },
      getAni: function(name) {
        var x = this[name];
        if (null != x) {
          return x;
        }
        x = exports_3.Component.child(this, 'Animation#' + name);
        if (null != x) {
          return this[name] = x.start.bind(x);
        }
      }
    }));
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_listen === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_listen) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_listen, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_listen = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_statements_exports;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_statements_exports ? _ref_mask_projects_mask_binding_src_statements_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    _ref_mask_projects_mask_binding_src_statements_utils;
    _ref_mask_projects_mask_binding_src_statements_if;
    _ref_mask_projects_mask_binding_src_statements_loop_for;
    _ref_mask_projects_mask_binding_src_statements_loop_each;
    _ref_mask_projects_mask_binding_src_statements_switch;
    _ref_mask_projects_mask_binding_src_statements_with;
    _ref_mask_projects_mask_binding_src_statements_visible;
    _ref_mask_projects_mask_binding_src_statements_listen;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_statements_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_statements_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_statements_exports, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_statements_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_utilities_bind;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_utilities_bind ? _ref_mask_projects_mask_binding_src_utilities_bind : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var refs_1 = _ref_utils_src_refs;
    var is_1 = _ref_utils_src_is;
    var obj_1 = _ref_utils_src_obj;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_projects_observer_src_exports;
    exports = _ref_mask_src_custom_exports;
    var exports_3 = _ref_mask_projects_mask_compo_src_exports;
    var expression_1 = _ref_mask_projects_mask_binding_src_utils_expression;
    var exports_4 = _ref_mask_projects_expression_src_exports;
    /**
 *    Mask Custom Utility - for use in textContent and attribute values
 */
    function attr_strReplace(attrValue, currentValue, newValue) {
      if (!attrValue) {
        return newValue;
      }
      if (null == currentValue || '' === currentValue) {
        return attrValue + ' ' + newValue;
      }
      return attrValue.replace(currentValue, newValue);
    }
    function refresherDelegate_NODE(el) {
      return function(value) {
        el.textContent = value;
      };
    }
    /** Attributes */
    function refresherDelegate_ATTR(el, attrName, currentValue) {
      var current_ = currentValue;
      return function(value) {
        var currentAttr = el.getAttribute(attrName), currentAttr = attr_strReplace(currentAttr, current_, value);
        if (null == currentAttr || '' === currentAttr) {
          el.removeAttribute(attrName);
        } else {
          el.setAttribute(attrName, currentAttr);
        }
        current_ = value;
      };
    }
    function refresherDelegate_ATTR_COMPO(ctr, attrName, currentValue) {
      var current_ = currentValue;
      return function(val) {
        if (current_ === val) {
          return;
        }
        current_ = val;
        var fn = ctr.setAttribute;
        if ((0, is_1.is_Function)(fn)) {
          fn.call(ctr, attrName, val);
          return;
        }
        ctr.attr[attrName] = val;
      };
    }
    function refresherDelegate_ATTR_PROP(element, attrName, currentValue) {
      return function(value) {
        switch (typeof element[attrName]) {
         case 'boolean':
          currentValue = element[attrName] = !!value;
          return;

         case 'number':
          currentValue = element[attrName] = Number(value);
          return;

         case 'string':
          currentValue = element[attrName] = attr_strReplace(element[attrName], currentValue, value);
          return;

         default:
          (0, reporters_1.log_warn)('Unsupported elements property type', attrName);
          return;
        }
      };
    }
    /** Properties */
    function refresherDelegate_PROP_NODE(el, property, currentValue) {
      return function(value) {
        (0, obj_1.obj_setProperty)(el, property, value);
      };
    }
    function refresherDelegate_PROP_COMPO(ctr, property, currentValue) {
      var current_ = currentValue;
      return function(val) {
        if (current_ === val) {
          return;
        }
        current_ = val;
        (0, obj_1.obj_setProperty)(ctr, property, val);
      };
    }
    function create_refresher(type, expr, element, currentValue, attrName, ctr) {
      if ('node' === type) {
        return refresherDelegate_NODE(element);
      }
      if ('attr' === type) {
        switch (attrName) {
         case 'value':
         case 'disabled':
         case 'checked':
         case 'selected':
         case 'selectedIndex':
          if (attrName in element) {
            return refresherDelegate_ATTR_PROP(element, attrName, currentValue);
          }
        }
        return refresherDelegate_ATTR(element, attrName, currentValue);
      }
      if ('prop' === type) {
        return refresherDelegate_PROP_NODE(element, attrName, currentValue);
      }
      if ('compo-attr' === type) {
        return refresherDelegate_ATTR_COMPO(ctr, attrName, currentValue);
      }
      if ('compo-prop' === type) {
        return refresherDelegate_PROP_COMPO(ctr, attrName, currentValue);
      }
      throw Error('Unexpected binder type: ' + type);
    }
    function bind(currentVal, expr, model, ctx, element, ctr, attrName, type) {
      var owner = 'compo-attr' === type || 'compo-prop' === type ? ctr.parent : ctr;
      type = create_refresher(type, expr, element, currentVal, attrName, ctr);
      element = (0, exports_4.expression_parse)(expr);
      if (element.observe) {
        var subscr_1 = currentVal.subscribe(type);
        exports_3.Component.attach(ctr, 'dispose', function() {
          subscr_1.unsubscribe();
        });
        return;
      }
      var binder = (0, exports_1.expression_createBinder)(expr, model, ctx, owner, type);
      (0, exports_1.expression_bind)(expr, model, ctx, owner, binder);
      exports_3.Component.attach(ctr, 'dispose', function() {
        (0, exports_1.expression_unbind)(expr, model, owner, binder);
      });
    }
    (0, exports.customUtil_register)('bind', {
      mode: 'partial',
      wValue: null,
      value: null,
      element: null,
      nodeRenderStart: function(expr, model, ctx, el, ctr, attrName, type, node) {
        type = 'compo-attr' === type || 'compo-prop' === type ? ctr.parent : ctr;
        ctr = (0, exports_4.expression_parse)(expr, false, node);
        expr = (0, expression_1.expression_eval_safe)(ctr, model, ctx, type, node);
        // though we apply value's to `this` context, but it is only for immediat use
        // in .node() function, as `this` context is a static object that share all bind
        // utils
        ctx = ctr.async || ctr.observe ? null !== (model = null === expr || void 0 === expr ? void 0 : expr.value) && void 0 !== model ? model : '' : expr;
        this.element = refs_1._document.createTextNode(ctx);
        this.wValue = expr;
      },
      node: function(expr, model, ctx, container, ctr) {
        var el = this.element;
        var val = this.wValue;
        bind(val, expr, model, ctx, el, ctr, null, 'node');
        this.element = null;
        this.current = null;
        return el;
      },
      attrRenderStart: function(expr, model, ctx, el, ctr, attrName, type, node) {
        type = 'compo-attr' === type || 'compo-prop' === type ? ctr.parent : ctr;
        ctr = (0, exports_4.expression_parse)(expr, false, node);
        expr = (0, expression_1.expression_eval_safe)(ctr, model, ctx, type, node);
        ctx = ctr.async || ctr.observe ? null !== (model = null === expr || void 0 === expr ? void 0 : expr.value) && void 0 !== model ? model : '' : expr;
        this.value = ctx;
        this.wValue = expr;
      },
      attr: function(expr, model, ctx, el, ctr, attrName, type) {
        bind(this.wValue, expr, model, ctx, el, ctr, attrName, type);
        return this.value;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_utilities_bind === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_utilities_bind) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_utilities_bind, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_utilities_bind = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_utilities_exports;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_utilities_exports ? _ref_mask_projects_mask_binding_src_utilities_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    _ref_mask_projects_mask_binding_src_utilities_bind;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_utilities_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_utilities_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_utilities_exports, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_utilities_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_projects_mask_binding_src_exports;
  (function() {
    var exports = null != _ref_mask_projects_mask_binding_src_exports ? _ref_mask_projects_mask_binding_src_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.registerBinding = exports.BindingProviders = exports.obj_removeObserver = exports.obj_addObserver = exports.registerValidator = exports.Validators = void 0;
    _ref_mask_projects_mask_binding_src_attributes_exports;
    _ref_mask_projects_mask_binding_src_handlers_exports;
    _ref_mask_projects_mask_binding_src_statements_exports;
    _ref_mask_projects_mask_binding_src_utilities_exports;
    var BindingProvider_1 = _ref_mask_projects_mask_binding_src_BindingProvider;
    var ValidatorProvider_1 = _ref_mask_projects_mask_binding_src_ValidatorProvider;
    Object.defineProperty(exports, 'Validators', {
      enumerable: true,
      get: function() {
        return ValidatorProvider_1.Validators;
      }
    });
    Object.defineProperty(exports, 'registerValidator', {
      enumerable: true,
      get: function() {
        return ValidatorProvider_1.registerValidator;
      }
    });
    var exports_1 = _ref_mask_projects_observer_src_exports;
    Object.defineProperty(exports, 'obj_addObserver', {
      enumerable: true,
      get: function() {
        return exports_1.obj_addObserver;
      }
    });
    Object.defineProperty(exports, 'obj_removeObserver', {
      enumerable: true,
      get: function() {
        return exports_1.obj_removeObserver;
      }
    });
    exports.BindingProviders = BindingProvider_1.CustomProviders;
    function registerBinding(name, Prov) {
      BindingProvider_1.CustomProviders[name] = Prov;
    }
    exports.registerBinding = registerBinding;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_projects_mask_binding_src_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_projects_mask_binding_src_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_projects_mask_binding_src_exports, module.exports);
    } else {
      _ref_mask_projects_mask_binding_src_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_mask;
  (function() {
    var exports = null != _ref_mask_src_mask ? _ref_mask_src_mask : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.Mask = void 0;
    var refs_1 = _ref_utils_src_refs;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var obj_1 = _ref_utils_src_obj;
    var str_1 = _ref_utils_src_str;
    var is_1 = _ref_utils_src_is;
    var class_1 = _ref_utils_src_class;
    var error_1 = _ref_utils_src_error;
    var EventEmitter_1 = _ref_utils_src_class_EventEmitter;
    var listeners_1 = _ref_mask_src_util_listeners;
    var reporters_1 = _ref_mask_src_util_reporters;
    var exports_1 = _ref_mask_src_dom_exports;
    var exports_2 = _ref_mask_src_custom_exports;
    var exports_3 = _ref_mask_src_parser_exports;
    var exports_4 = _ref_mask_projects_expression_src_exports;
    var config_1 = _ref_mask_src_api_config;
    var template_1 = _ref_mask_src_handlers_template;
    var exports_5 = _ref_mask_src_builder_exports;
    var run_1 = _ref_mask_src_feature_run;
    var merge_1 = _ref_mask_src_feature_merge;
    var optimize_1 = _ref_mask_src_feature_optimize;
    var TreeWalker_1 = _ref_mask_src_feature_TreeWalker;
    var exports_6 = _ref_mask_src_feature_modules_exports;
    var Di_1 = _ref_mask_src_feature_Di;
    var exports_7 = _ref_mask_src_feature_decorators_exports;
    _ref_mask_src_statements_exports;
    _ref_mask_src_handlers_exports;
    var exports_8 = _ref_mask_projects_mask_binding_src_exports;
    var exports_9 = _ref_mask_projects_mask_compo_src_exports;
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    var exports_10 = _ref_mask_src_renderer_exports;
    /**
 * @namespace mask
 */
    exports.Mask = {
      /**
     * Render the mask template to document fragment or single html node
     * @param {(string|MaskDom)} template - Mask string template or Mask Ast to render from.
     * @param {*} [model] - Model Object.
     * @param {Object} [ctx] - Context can store any additional information, that custom handler may need
     * @param {IAppendChild} [container]  - Container Html Node where template is rendered into
     * @param {Object} [controller] - Component that should own this template
     * @returns {(IAppendChild|Node|DocumentFragment)} container
     * @memberOf mask
     */
      render: exports_10.renderer_render,
      /**
     * Same to `mask.render` but returns the promise, which is resolved when all async components
     * are resolved, or is in resolved state, when all components are synchronous.
     * For the parameters doc @see {@link mask.render}
     * @returns {Promise} Fullfills with (`IAppendChild|Node|DocumentFragment`, `Component`)
     * @memberOf mask
     */
      renderAsync: exports_10.renderer_renderAsync,
      parse: exports_3.parser_parse,
      parseHtml: exports_3.parser_parseHtml,
      stringify: exports_3.mask_stringify,
      build: exports_5.builder_build,
      buildSVG: exports_5.builder_buildSVG,
      run: run_1.mask_run,
      merge: merge_1.mask_merge,
      optimize: optimize_1.mask_optimize,
      registerOptimizer: optimize_1.mask_registerOptimizer,
      TreeWalker: TreeWalker_1.mask_TreeWalker,
      Module: exports_6.Module,
      File: exports_6.Module.File,
      Di: Di_1.Di,
      registerHandler: exports_2.customTag_register,
      registerFromTemplate: exports_2.customTag_registerFromTemplate,
      define: exports_2.customTag_define,
      getHandler: exports_2.customTag_get,
      getHandlers: exports_2.customTag_getAll,
      registerStatement: exports_2.customStatement_register,
      getStatement: exports_2.customStatement_get,
      registerAttrHandler: exports_2.customAttr_register,
      getAttrHandler: exports_2.customAttr_get,
      registerUtil: exports_2.customUtil_register,
      getUtil: exports_2.customUtil_get,
      $utils: exports_2.customUtil_$utils,
      _: exports_2.customUtil_$utils,
      defineDecorator: exports_7.Decorator.define,
      Dom: exports_1.Dom,
      /**
     * Is present only in DEBUG (not minified) version
     * Evaluates script in masks library scope
     * @param {string} script
     */
      plugin: function(source) {},
      clearCache: exports_10.renderer_clearCache,
      Utils: {
        Expression: exports_4.ExpressionUtil,
        ensureTmplFn: exports_3.parser_ensureTemplateFunction
      },
      obj: {
        get: obj_1.obj_getProperty,
        set: obj_1.obj_setProperty,
        extend: obj_1.obj_extend,
        addObserver: exports_8.obj_addObserver,
        removeObserver: exports_8.obj_removeObserver
      },
      str: {
        dedent: str_1.str_dedent
      },
      is: {
        Function: is_1.is_Function,
        String: is_1.is_String,
        ArrayLike: is_1.is_ArrayLike,
        Array: is_1.is_ArrayLike,
        Object: is_1.is_Object,
        Date: is_1.is_Date,
        NODE: is_1.is_NODE,
        DOM: is_1.is_DOM
      },
      class: {
        create: class_1.class_create,
        createError: error_1.error_createClass,
        Deferred: Dfr_1.class_Dfr,
        EventEmitter: EventEmitter_1.class_EventEmitter
      },
      parser: {
        ObjectLexer: exports_3.parser_ObjectLexer,
        getStackTrace: reporters_1.reporter_getNodeStack,
        defineContentTag: exports_3.parser_defineContentTag
      },
      log: {
        info: reporters_1.log,
        error: reporters_1.log_error,
        errorWithNode: reporters_1.error_withNode,
        warn: reporters_1.log_warn,
        warnWithNode: reporters_1.warn_withNode
      },
      on: listeners_1.listeners_on,
      off: listeners_1.listeners_off,
      // Stub for the reload.js, which will be used by includejs.autoreload
      delegateReload: function() {},
      /**
     * Define interpolation quotes for the parser
     * Starting from 0.6.9 mask uses ~[] for string interpolation.
     * Old '#{}' was changed to '~[]', while template is already overloaded with #, { and } usage.
     * @param {string} start - Must contain 2 Characters
     * @param {string} end - Must contain 1 Character
     **/
      setInterpolationQuotes: exports_3.parser_setInterpolationQuotes,
      setCompoIndex: function(index) {
        exports_5.BuilderData.id = index;
      },
      cfg: config_1.mask_config,
      config: config_1.mask_config,
      // For the consistence with the NodeJS
      toHtml: function(dom) {
        return exports.Mask.$(dom).outerHtml();
      },
      factory: function(compoName) {
        var params_ = refs_1._Array_slice.call(arguments, 1), factory = params_.pop(), mode = 'both';
        if (0 !== params_.length) {
          params_ = params_[0];
          if ('client' === params_ || 'server' === params_) {
            mode = params_;
          }
        }
        if ('client' === mode && is_1.is_NODE || 'server' === mode && is_1.is_DOM) {
          (0, exports_2.customTag_register)(compoName, {
            meta: {
              mode: mode
            }
          });
          return;
        }
        factory(refs_1._global, exports_9.Component.config.getDOMLibrary(), function(compo) {
          (0, exports_2.customTag_register)(compoName, compo);
        });
      },
      injectable: Di_1.Di.deco.injectableClass,
      deco: {
        slot: exports_9.Component.deco.slot,
        slotPrivate: exports_9.Component.deco.slotPrivate,
        pipe: exports_9.Component.deco.pipe,
        event: exports_9.Component.deco.event,
        hotkey: exports_9.Component.deco.hotkey,
        attr: exports_9.Component.deco.attr,
        refCompo: exports_9.Component.deco.refCompo,
        refElement: exports_9.Component.deco.refElement,
        refQuery: exports_9.Component.deco.refQuery,
        inject: Di_1.Di.deco.injectableClass
      },
      templates: template_1.Templates,
      /* from binding */
      Validators: exports_8.Validators,
      registerValidator: exports_8.registerValidator,
      BindingProviders: exports_8.BindingProviders,
      registerBinding: exports_8.registerBinding,
      Compo: exports_9.Compo,
      Component: exports_9.Component,
      jmask: jMask_1.jMask,
      version: '0.71.79',
      $: exports_9.domLib,
      j: jMask_1.jMask
    };
    //> make fast properties
    (0, exports_2.custom_optimize)();
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_mask === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_mask) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_mask, module.exports);
    } else {
      _ref_mask_src_mask = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_renderer_exports;
  (function() {
    var exports = null != _src_renderer_exports ? _src_renderer_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.rendererB_renderHtmlDomAsync = exports.rendererB_renderAsync = exports.rendererB_render = exports.rendererB_buildAsync = exports.rendererB_build = exports.rendererB_toHtml = void 0;
    var exports_1 = _ref_mask_src_renderer_exports;
    var DomB_1 = _src_html_dom_DomB;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var exports_2 = _src_html_dom_exports;
    var exports_3 = _ref_mask_src_builder_exports;
    function rendererB_toHtml(dom, model, ctx, ctr) {
      return null == ctx || null == ctx._rewrite && null == ctx._redirect ? exports_2.HtmlDom.stringify(dom, model, ctx, ctr) : '';
    }
    exports.rendererB_toHtml = rendererB_toHtml;
    function rendererB_build(tmpl, model, ctx, el, ctr) {
      ctr = ensureCtr(ctr);
      ctx = ensureCtx(ctx);
      tmpl = (0, exports_1.renderer_render)(tmpl, model, ctx, el, ctr);
      return {
        ctx: ctx,
        model: model,
        component: ctx,
        element: tmpl
      };
    }
    exports.rendererB_build = rendererB_build;
    function rendererB_buildAsync(tmpl, model, ctx, el, ctr) {
      var ctr = ensureCtr(ctr), _ctx = ensureCtx(ctx), dfr = new Dfr_1.class_Dfr(), dom = (0, 
      exports_1.renderer_render)(tmpl, model, _ctx, el, ctr);
      if (true === _ctx.async) {
        _ctx.done(resolve);
      } else {
        resolve();
      }
      function resolve() {
        dfr.resolve({
          ctx: _ctx,
          model: model,
          component: _ctx,
          element: dom
        });
      }
      return dfr;
    }
    exports.rendererB_buildAsync = rendererB_buildAsync;
    function rendererB_render(tmpl, model, ctx, el, ctr) {
      ctr = ensureCtr(ctr);
      ctx = ensureCtx(ctx);
      tmpl = (0, exports_1.renderer_render)(tmpl, model, ctx, el, ctr);
      return rendererB_toHtml(tmpl, model, ctx, ctr);
    }
    exports.rendererB_render = rendererB_render;
    function rendererB_renderAsync(tmpl, model, ctx, el, ctr) {
      return this.renderHtmlDomAsync(tmpl, model, ctx, el, ctr).then(rendererB_toHtml);
    }
    exports.rendererB_renderAsync = rendererB_renderAsync;
    function rendererB_renderHtmlDomAsync(tmpl, model, ctx, el, ctr) {
      var _ctr = ensureCtr(ctr), _ctx = ensureCtx(ctx), dfr = new Dfr_1.class_Dfr(), dom = (0, 
      exports_1.renderer_render)(tmpl, model, _ctx, el, _ctr);
      if (true === _ctx.async) {
        _ctx.done(resolve);
      } else {
        resolve();
      }
      function resolve() {
        dfr.resolve(dom, model, _ctx, _ctr);
      }
      return dfr;
    }
    exports.rendererB_renderHtmlDomAsync = rendererB_renderHtmlDomAsync;
    function ensureCtr(ctr) {
      return null == ctr ? new DomB_1.DomB.Component() : ctr;
    }
    function ensureCtx(ctx) {
      return null == ctx || ctx.constructor !== exports_3.builder_Ctx ? new exports_3.builder_Ctx(ctx) : ctx;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_renderer_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_src_renderer_exports) && __isObj(module.exports)) {
      Object.assign(_src_renderer_exports, module.exports);
    } else {
      _src_renderer_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_page_scripts;
  (function() {
    var exports = null != _src_html_page_scripts ? _src_html_page_scripts : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._scripts_handleAsync = exports._scripts_handleSync = void 0;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var exports_1 = _ref_mask_src_custom_exports;
    var class_1 = _ref_utils_src_class;
    var TreeWalker_1 = _ref_mask_src_feature_TreeWalker;
    var exports_2 = _ref_mask_src_feature_modules_exports;
    var config_1 = _ref_mask_src_api_config;
    function _scripts_handleSync(ast, model, ctx) {
      model = _getExternalServerScripts(ast, model, ctx);
      model.forEach(function(x) {
        return x.preloadSync();
      });
      return ast;
    }
    exports._scripts_handleSync = _scripts_handleSync;
    function _scripts_handleAsync(ast, model, ctx) {
      model = _getExternalServerScripts(ast, model, ctx);
      ctx = model.map(function(x) {
        return x.preloadAsync();
      });
      var error = null;
      var wait = ctx.length;
      var dfr = new Dfr_1.class_Dfr();
      if (0 === wait) {
        return dfr.resolve(ast);
      }
      ctx.forEach(function(x) {
        x.then(ok, fail);
      });
      function ok() {
        if (0 === --wait && null == error) {
          dfr.resolve(ast);
        }
      }
      function fail(err) {
        if (null == error) {
          dfr.reject(error = err);
        }
      }
      return dfr;
    }
    exports._scripts_handleAsync = _scripts_handleAsync;
    var ScriptTag = exports_1.custom_Tags['script'];
    exports_1.custom_Tags['script'] = (0, class_1.class_create)(ScriptTag, {
      render: function(model, ctx, el) {
        if (ScriptNode.isBrowser(this)) {
          // this.attr.export = null;
          // this.attr.isomorph = null;
          ScriptTag.prototype.render.call(this, model, ctx, el);
        }
        if (ScriptNode.isServer(this)) {
          model = ScriptNode.get(this);
          model.eval(ctx, el);
        }
      }
    });
    function _getExternalServerScripts(ast, model, ctx) {
      var arr = [];
      TreeWalker_1.mask_TreeWalker.walk(ast, function(node) {
        if ('script' !== node.tagName) {
          return;
        }
        if (false === ScriptNode.isServer(node) || false === ScriptNode.isExternal(node)) {
          return;
        }
        arr.push(ScriptNode.get(node, model, ctx));
        delete node.attr.export;
        delete node.attr.isomorph;
        if (ScriptNode.isServerOnly(node)) {
          return {
            remove: true
          };
        }
      });
      return arr;
    }
    var ScriptNode = /** @class */ function() {
      function ScriptNode(path, exportName) {
        this.path = path;
        this.exportName = exportName;
        this.state = 0;
        this.fn = null;
      }
      ScriptNode.prototype.eval = function(ctx, el) {
        var module = {
          exports: {}
        };
        this.fn.call(el, global, el.ownerDocument, module, module.exports);
        if (this.exportName) {
          global[this.exportName] = module.exports;
        }
      };
      ScriptNode.prototype.preloadAsync = function() {
        var self = this;
        return config_1.__cfg.getFile(this.path).then(function(content) {
          self.fn = new Function('window', 'document', 'module', 'exports', content);
        });
      };
      ScriptNode.prototype.preloadSync = function() {
        var self = this;
        return config_1.__cfg.getFile(this.path).then(function(content) {
          self.fn = new Function('window', 'document', 'module', 'exports', content);
        });
      };
      ScriptNode.isServer = function(node) {
        return Boolean(node.attr.isomorph || node.attr.server);
      };
      ScriptNode.isServerOnly = function(node) {
        return Boolean(node.attr.server);
      };
      ScriptNode.isBrowser = function(node) {
        return Boolean(node.attr.isomorph || !node.attr.server);
      };
      ScriptNode.isExternal = function(node) {
        return Boolean(node.attr.src);
      };
      ScriptNode.get = function(node, model, ctx) {
        var src = node.attr.src;
        src = {
          path: src
        };
        src = exports_2.Module.resolvePath(src, model, ctx, null, true);
        model = node.attr.export;
        return _scripts[src] || (_scripts[src] = new ScriptNode(src, model));
      };
      return ScriptNode;
    }();
    var _scripts = {};
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_page_scripts === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_page_scripts) && __isObj(module.exports)) {
      Object.assign(_src_html_page_scripts, module.exports);
    } else {
      _src_html_page_scripts = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_page_transform;
  (function() {
    var exports = null != _src_html_page_transform ? _src_html_page_transform : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports._transformAddingMaskBootstrap = exports._transformMaskAutoTemplates = void 0;
    var TreeWalker_1 = _ref_mask_src_feature_TreeWalker;
    var exports_1 = _ref_mask_src_parser_exports;
    var DomB_1 = _src_html_dom_DomB;
    var jMask_1 = _ref_mask_projects_mask_j_src_jmask_jMask;
    function _transformMaskAutoTemplates(ast) {
      return TreeWalker_1.mask_TreeWalker.walk(ast, function(node) {
        if ('script' !== node.tagName) {
          return;
        }
        if ('text/mask' !== node.attr.type) {
          return;
        }
        if ('auto' !== node.attr['data-run']) {
          return;
        }
        var fragment = new DomB_1.DomB.Fragment();
        fragment.parent = node.parent;
        node = node.nodes[0];
        node = node.content;
        fragment.nodes = (0, exports_1.parser_parse)(node);
        return {
          replace: fragment
        };
      });
    }
    exports._transformMaskAutoTemplates = _transformMaskAutoTemplates;
    function _transformAddingMaskBootstrap(ast, path) {
      var wasAdded = false;
      TreeWalker_1.mask_TreeWalker.walk(ast, function(node) {
        if ('body' === node.tagName) {
          wasAdded = true;
          append(node, path);
          return {
            deep: false
          };
        }
        if ('html' !== node.tagName) {
          return {
            deep: false
          };
        }
      });
      if (!wasAdded) {
        append(ast, path);
      }
      function append(node, path) {
        var script = new DomB_1.DomB.Node();
        script.tagName = 'script';
        script.attr = {
          type: 'text/javascript',
          src: path || '/node_modules/maskjs/lib/mask.bootstrap.js'
        };
        (0, jMask_1.jMask)(node).append(script);
        (0, jMask_1.jMask)(node).append('<script>mask.Compo.bootstrap()<\/script>');
      }
    }
    exports._transformAddingMaskBootstrap = _transformAddingMaskBootstrap;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_page_transform === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_page_transform) && __isObj(module.exports)) {
      Object.assign(_src_html_page_transform, module.exports);
    } else {
      _src_html_page_transform = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_html_page_exports;
  (function() {
    var exports = null != _src_html_page_exports ? _src_html_page_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.HtmlPage = void 0;
    var scripts_1 = _src_html_page_scripts;
    var transform_1 = _src_html_page_transform;
    var exports_1 = _src_renderer_exports;
    exports.HtmlPage = {
      render: function(tmpl, model, ctx) {
        tmpl = (0, scripts_1._scripts_handleSync)(tmpl, model, ctx);
        tmpl = (0, transform_1._transformMaskAutoTemplates)(tmpl);
        return (0, exports_1.rendererB_render)(tmpl, model, ctx);
      },
      renderAsync: function(tmpl, model, ctx) {
        return (0, scripts_1._scripts_handleAsync)(tmpl, model, ctx).then(function(ast) {
          ast = (0, transform_1._transformMaskAutoTemplates)(ast);
          if (ctx && ctx.config && ctx.config.shouldAppendBootstrap) {
            (0, transform_1._transformAddingMaskBootstrap)(ast, ctx.config.maskBootstrapPath);
          }
          return (0, exports_1.rendererB_renderHtmlDomAsync)(ast, model, ctx).then(function(dom, model, ctx, compo) {
            return (0, exports_1.rendererB_toHtml)(dom, model, ctx, compo);
          });
        });
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_html_page_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_src_html_page_exports) && __isObj(module.exports)) {
      Object.assign(_src_html_page_exports, module.exports);
    } else {
      _src_html_page_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_util_loaders;
  (function() {
    var exports = null != _src_util_loaders ? _src_util_loaders : {};
    var module = {
      exports: exports
    };
    'use strict';
    var _a;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_api_config;
    var Dfr_1 = _ref_utils_src_class_Dfr;
    var path_1 = _ref_mask_src_util_path;
    null !== (_a = exports.__cfg.getFile) && void 0 !== _a ? _a : exports.__cfg.getFile = function(path) {
      var dfr = new Dfr_1.class_Dfr();
      var fs = require('fs');
      path = (0, path_1.path_toLocalFile)(resolvePath(path));
      fs.readFile(path, 'utf8', function(error, str) {
        if (null != error) {
          dfr.reject({
            message: error.toString(),
            status: error.code
          });
          return;
        }
        dfr.resolve(str);
      });
      return dfr;
    };
    null !== (_a = exports.__cfg.getScript) && void 0 !== _a ? _a : exports.__cfg.getScript = function(path) {
      var dfr = new Dfr_1.class_Dfr();
      path = (0, path_1.path_toLocalFile)(resolvePath(path));
      try {
        var x = require(path);
        dfr.resolve(x);
      } catch (error) {
        dfr.reject(error);
      }
      return dfr;
    };
    var base_ = (0, path_1.path_toLocalFile)((0, path_1.path_resolveCurrent)());
    function resolvePath(path) {
      if ((0, path_1.path_isRelative)(path)) {
        return (0, path_1.path_combine)(base_, path);
      }
      return path;
    }
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_util_loaders === module.exports) {
      // do nothing if
    } else if (__isObj(_src_util_loaders) && __isObj(module.exports)) {
      Object.assign(_src_util_loaders, module.exports);
    } else {
      _src_util_loaders = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_mock_mock;
  (function() {
    var exports = null != _src_mock_mock ? _src_mock_mock : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var mask_1 = _ref_mask_src_mask;
    var exports_1 = _ref_mask_src_custom_exports;
    var obj_1 = _ref_utils_src_obj;
    var tag_handler_1 = _src_mock_tag_handler;
    mask_1.Mask.compoDefinitions = function(compos, utils, attributes) {
      var tags = exports_1.custom_Tags, defs = exports_1.custom_Tags_defs;
      for (var tagName in compos) {
        defs[tagName] = compos[tagName];
        if (void 0 !== tags[tagName]) {
          (0, obj_1.obj_extend)(tags[tagName].prototype, compos[tagName]);
          continue;
        }
        tags[tagName] = tag_handler_1.mock_TagHandler.create(tagName, null, 'client');
      }
      var doNothing = function() {};
      for (var key in utils) {
        if ('client' === utils[key].mode) {
          mask_1.Mask.registerUtil(key, doNothing, 'client');
        }
      }
      for (var key in attributes) {
        if ('client' === attributes[key].mode) {
          mask_1.Mask.registerAttrHandler(key, doNothing, 'client');
        }
      }
    };
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_mock_mock === module.exports) {
      // do nothing if
    } else if (__isObj(_src_mock_mock) && __isObj(module.exports)) {
      Object.assign(_src_mock_mock, module.exports);
    } else {
      _src_mock_mock = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _ref_mask_src_builder_delegate_exports;
  (function() {
    var exports = null != _ref_mask_src_builder_delegate_exports ? _ref_mask_src_builder_delegate_exports : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_buildDelegate = void 0;
    var builder_buildFactory_1 = _src_builder_delegate_builder_buildFactory;
    function builder_buildDelegate(opts) {
      return (0, builder_buildFactory_1.builder_buildFactory)(opts);
    }
    exports.builder_buildDelegate = builder_buildDelegate;
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_ref_mask_src_builder_delegate_exports === module.exports) {
      // do nothing if
    } else if (__isObj(_ref_mask_src_builder_delegate_exports) && __isObj(module.exports)) {
      Object.assign(_ref_mask_src_builder_delegate_exports, module.exports);
    } else {
      _ref_mask_src_builder_delegate_exports = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_builder_dom_build;
  (function() {
    var exports = null != _src_builder_dom_build ? _src_builder_dom_build : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.builder_build = void 0;
    var exports_1 = _ref_mask_src_builder_delegate_exports;
    var exports_2 = _src_html_dom_exports;
    exports.builder_build = (0, exports_1.builder_buildDelegate)({
      document: exports_2.HtmlDom.document,
      create: function(name, doc) {
        return doc.createElement(name);
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_builder_dom_build === module.exports) {
      // do nothing if
    } else if (__isObj(_src_builder_dom_build) && __isObj(module.exports)) {
      Object.assign(_src_builder_dom_build, module.exports);
    } else {
      _src_builder_dom_build = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  // source ./ModuleSimplified.js
  var _src_handlers_document;
  (function() {
    var exports = null != _src_handlers_document ? _src_handlers_document : {};
    var module = {
      exports: exports
    };
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports = _ref_mask_src_custom_exports;
    var class_1 = _ref_utils_src_class;
    var const_1 = _src_const;
    var exports_2 = _src_html_dom_exports;
    var DomB_1 = _src_html_dom_DomB;
    var build_1 = _src_builder_dom_build;
    exports.custom_Tags[':document'] = (0, class_1.class_create)({
      isDocument: true,
      meta: {
        template: 'merge',
        mode: const_1.mode_SERVER
      },
      render: function(model, ctx, fragment, ctr) {
        var head, body, handleBody, attr = this.attr, nodes = this.nodes, doctype = 'html';
        if (attr.doctype) {
          doctype = attr.doctype;
          attr.doctype = null;
        }
        fragment.appendChild(new exports_2.HtmlDom.DOCTYPE('<!DOCTYPE ' + doctype + '>'));
        doctype = {
          tagName: 'html',
          type: DomB_1.DomB.NODE,
          attr: attr,
          nodes: []
        };
        if (null != nodes) {
          var imax = nodes.length, i = -1;
          while (++i < imax) {
            x = nodes[i];
            if ('head' === x.tagName) {
              head = x;
              continue;
            }
            if ('body' === x.tagName) {
              body = x;
              continue;
            }
            handleBody = true;
          }
        }
        if (null == body) {
          body = {
            nodeType: DomB_1.DomB.NODE,
            tagName: 'body',
            nodes: []
          };
        }
        null != head && doctype.nodes.push(head);
        null != body && doctype.nodes.push(body);
        if (handleBody) {
          var x, imax = nodes.length, i = 0;
          for (;i < imax; i++) {
            x = nodes[i];
            if ('head' === x.tagName) {
              continue;
            }
            if ('body' === x.tagName) {
              continue;
            }
            body.nodes.push(x);
          }
        }
        attr = this.parent;
        attr.components = [];
        (0, build_1.builder_build)(doctype, model, ctx, fragment, attr);
        return fragment;
      }
    });
    function __isObj(x) {
      return null != x && 'object' === typeof x && x.constructor === Object;
    }
    if (_src_handlers_document === module.exports) {
      // do nothing if
    } else if (__isObj(_src_handlers_document) && __isObj(module.exports)) {
      Object.assign(_src_handlers_document, module.exports);
    } else {
      _src_handlers_document = module.exports;
    }
  })();
  // end:source ./ModuleSimplified.js
  'use strict';
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var mask_1 = _ref_mask_src_mask;
  var obj_1 = _ref_utils_src_obj;
  var exports_1 = _src_renderer_exports;
  var exports_2 = _src_html_dom_exports;
  var exports_3 = _src_html_page_exports;
  _src_util_loaders;
  _src_mock_mock;
  _src_handlers_document;
  (0, obj_1.obj_extend)(mask_1.Mask, {
    toHtml: exports_1.rendererB_toHtml,
    render: exports_1.rendererB_render,
    renderAsync: exports_1.rendererB_renderAsync,
    renderHtmlDomAsync: exports_1.rendererB_renderHtmlDomAsync,
    renderPage: exports_3.HtmlPage.render,
    renderPageAsync: exports_3.HtmlPage.renderAsync,
    build: exports_1.rendererB_build,
    buildAsync: exports_1.rendererB_buildAsync,
    document: exports_2.HtmlDom.document
  });
  var Mask = mask_1.Mask;
  document = Mask.document;
  return exports.mask = Mask;
});