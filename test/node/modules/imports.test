var TestHelper = {
	/*
	 * { path: content }
	 */
	registerFiles (Files) {

		Object.keys(Files).forEach(key => {
			this.register(key, Files[key]);
		});
	},

	register (path, content) {
		var getFile = mask.cfg('getFile');
		var rgx = new RegExp(path, 'i');

		mask.cfg('getFile', function(path){
			if (rgx.test(path)) {
				return (new mask.class.Deferred).resolve(content)
			};
			if (getFile == null) {
				return (new mask.class.Deferred).reject({code: 404, path: path});
			}
			return getFile(path);
		})
	}
}

TestHelper.registerFiles({
	'foo.css': ` h2 {}`,
	'bar.js': `var bar`,
	'Button.mask': `
		define Button {
			button .btn > '~this.attr.text'
		}
	`
});

UTest({
	async 'import template' () {
		var template = `
			import Button from 'Button.mask';
			Button text='Hello';
		`;
		
		var html = await mask.renderAsync(template);

		await UTest
			.domtest
			.use('cheerio')
			.process(html, `
				find ('button') {
					hasClass ('btn');
					text ('Hello');
				}
			`);
	}
})