	


UTest({
	
	$config: {
		'http.eval': function(done){
			
			include
				.instance(process.cwd() + '/')
				.js('/lib/mask.node.js::Mask')
				.done(function(resp){
					Object.extend(mask, resp.Mask.mask);
					done();
				})
		}
	},
	
	'if': function(done){
		
		$forEach([
			{
				template: 'if (1) > "foo"',
				result: 'foo'
			},
			{
				template: 'if (0) > "foo" else > "bar"',
				result: 'bar'
			},
			{
				template: 'if (i/2 == 1) > "foo" else > "bar"',
				model: { i: 2 },
				result: 'foo'
			},
			{
				template: 'div; span { if (i/2 * 2 == 1) { "foo" } else { "b" "a" "r" }}',
				model: { i: 2 },
				result: 'bar'
			},
		], function(test, next){
			
			$render(test.template, test.model)
				.done(assert.await(function($dom, doc, win){
					
					$dom.eq_('text', test.result);
				}))
				.always(next || done)
				;
		})
		
	},
	
	'for': function(done){
		
		$forEach([
			{
				template: 'for (x of items) > "~[x]"',
				model: {
					items: ['1', '2', '3']
				},
				result: '123'
			},
			{
				template: 'for (  x  of  items) > "~[name]~[x]"',
				model: {
					items: ['1', '2', '3'],
					name: '-'
				},
				result: '-1-2-3'
			},
			{
				template: 'for ( (item, index) of items ) > "~[name]~[item](~[index])"',
				model: {
					items: ['1', '2', '3'],
					name: '-'
				},
				result: '-1(0)-2(1)-3(2)'
			},
			{
				template: 'for ( key in items ) > "~[name]~[key]"',
				model: {
					items: {
						a: 'A',
						b: 'B'
					},
					name: '-'
				},
				result: '-a-b'
			},
			{
				template: 'for ( (key, value) in items ) > "~[name]~[key](~[value])"',
				model: {
					items: {
						a: 'A',
						b: 'B'
					},
					name: '-'
				},
				result: '-a(A)-b(B)'
			}, 
		], function(test, next){
			
			$render(test.template, test.model)
				.done(assert.await(function($dom, doc, win){
					
					$dom.eq_('text', test.result);
				}))
				.always(next || done)
				;
		})
	},
	
	'each': function(done){
		
		$forEach([
			{
				template: 'each (items) > "~[.]"',
				model: {
					items: ['1', '2', '3']
				},
				result: '123'
			},
			{
				template: 'each (items) > "-~[.](~[index])"',
				model: {
					items: ['1', '2', '3']
				},
				result: '-1(0)-2(1)-3(2)'
			}
		], function(test, next){
			
			$render(test.template, test.model)
				.done(assert.await(function($dom, doc, win){
					$dom.eq_('text', test.result);
				}))
				.always(next || done)
				;
		})
	},
	
	'with': function(done){
		
		$forEach([
			{
				template: 'with (foo.bar) > "~[.]"',
				model: {
					foo: {
						bar: 'bar'
					}
				},
				result: 'bar'
			},
			{
				template: 'with (baz) > "~[.]"',
				controller: {
					scope: {
						baz: 'baz'
					}
				},
				result: 'baz'
			}
		], function(test, next){
			
			$render(test.template, test.model, test.controller)
				.done(assert.await(function($dom, doc, win){
					$dom.eq_('text', test.result);
				}))
				.always(next || done)
				;
		})
	},
	
	'switch': function(done){
		$forEach([
			{
				template: 'switch (foo.bar) { case ("foo") > "foo"; case ("bar") > "bar" }',
				model: {
					foo: {
						bar: 'bar'
					}
				},
				result: 'bar'
			},
			{
				template: 'switch (baz) { case ("foo")  > "f"; default > "baz" }',
				controller: {
					scope: {
						baz: 'baz'
					}
				},
				result: 'baz'
			}
		], function(test, next){
			
			$render(test.template, test.model, test.controller)
				.done(assert.await(function($dom, doc, win){
					$dom.eq_('text', test.result);
				}))
				.always(next || done)
				;
		})
	},
	
	'include': function(done){
		
		$render('include("/test/tmpl/a.mask"){ import("a"); }')
			.done(function($dom){
				
				$dom.eq_('html', '<h4>a</h4>');
			})
			.always(function(){
				eq_(this._rejected);
				
				done();
			});
		
	}
	
})